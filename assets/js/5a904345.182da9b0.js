"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[7128],{949:(a,t,e)=>{e.r(t),e.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>k,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var n=e(7462),s=(e(7294),e(3905));e(8209);const r={},m="String Matching",l={unversionedId:"Algorithms/trie",id:"Algorithms/trie",title:"String Matching",description:"Introduction",source:"@site/docs/Algorithms/trie.md",sourceDirName:"Algorithms",slug:"/Algorithms/trie",permalink:"/docs/Algorithms/trie",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/trie.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",previous:{title:"\u5251\u6307offer",permalink:"/docs/Algorithms/point"}},p={},i=[{value:"Introduction",id:"introduction",level:2},{value:"Knuth-Morris-Pratt Algorithm",id:"knuth-morris-pratt-algorithm",level:2},{value:"KMP Failure Array",id:"kmp-failure-array",level:3},{value:"Algorithm",id:"algorithm",level:3},{value:"Regular Expression",id:"regular-expression",level:2},{value:"Solution:",id:"solution",level:3},{value:"Code",id:"code",level:3},{value:"Regular Expressions",id:"regular-expressions",level:2}],o={toc:i};function k(a){let{components:t,...e}=a;return(0,s.kt)("wrapper",(0,n.Z)({},o,e,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"string-matching"},"String Matching"),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"Search for a string (pattern) in a large body of text"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"T","[0...n \u2212 1]",": The text (or haystack) being searched within"),(0,s.kt)("li",{parentName:"ul"},"P","[0...m \u2212 1]",": The pattern (or needle) being searched for"),(0,s.kt)("li",{parentName:"ul"},"Return smallest i such that ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"P"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"j"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"j"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"P[j] = T[i+j]")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05724em"}},"j"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05724em"}},"j"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]")))))," for ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"0"),(0,s.kt)("mo",{parentName:"mrow"},"\u2264"),(0,s.kt)("mi",{parentName:"mrow"},"j"),(0,s.kt)("mo",{parentName:"mrow"},"\u2264"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0\\leq j\\leq m-1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7804em",verticalAlign:"-0.136em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2264"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.854em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05724em"}},"j"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2264"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1")))))," ")),(0,s.kt)("p",null,"This is the first ",(0,s.kt)("strong",{parentName:"p"},"occurrence")," of P in T"),(0,s.kt)("p",null,"Brute Force: \u0398(mn)"),(0,s.kt)("h2",{id:"knuth-morris-pratt-algorithm"},"Knuth-Morris-Pratt Algorithm"),(0,s.kt)("p",null,"When a mismatch occurs, the most we can shift the pattern: the largest prefix of P","[0...j]"," that is a suffix of P","[1...j]"),(0,s.kt)("h3",{id:"kmp-failure-array"},"KMP Failure Array"),(0,s.kt)("p",null,"The failure array : fail","[j]"," is defined as the length of the largest prefix of P","[0...j]"," that is also a suffix of P","[1...j]"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"fail","[0]"," = 0"),(0,s.kt)("li",{parentName:"ul"},"If a mismatch occurs at P","[j]"," ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",mathvariant:"normal"},"\u2260")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\neq")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mord vbox"},(0,s.kt)("span",{parentName:"span",className:"thinbox"},(0,s.kt)("span",{parentName:"span",className:"rlap"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"inner"},(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\ue020"))),(0,s.kt)("span",{parentName:"span",className:"fix"}))))),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="))))))," T","[i]"," we set j = fail","[j \u2212 1]")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230531170333.png",alt:"20230531170333"})),(0,s.kt)("p",null,"Construct the FailArray: almost same as KMP, pattern becomes part of P"),(0,s.kt)("h3",{id:"algorithm"},"Algorithm"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Runtime: \u0398(m + n)"),(0,s.kt)("li",{parentName:"ul"},"Space: \u0398(m + n)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int KMP(){\n    //T: String of length n (text), P: String of length m (pattern)\n    // Construct FailArray, but each case add F[i]\n    int i = 1, j = 0;\n    while(i < m){\n        if(p[j] == p[i]){\n            fail[i] = j + 1; // 0...j\n            ++i;\n            ++j;\n        }\n        else{\n            if(j > 0)j = fail[j-1];\n            else{\n                fail[i] = 0;\n                ++i;\n            } \n        }\n    }\n    // KMP \n    i = 0, j = 0;\n    while(i < n){\n        if(p[j] == t[i]){\n            ++j;\n            ++i;\n            if(j == m){\n                j = fail[j - 1];\n                result.push_back(i - m); // starting point\n            }\n        }\n        else{\n            if(j > 0)j = fail[j - 1];\n            else ++i;\n        }\n    }\n}\n")),(0,s.kt)("h2",{id:"regular-expression"},"Regular Expression"),(0,s.kt)("p",null,"Given an input string s\xa0and a pattern p, implement regular expression matching with support for '.' and '*' where:"),(0,s.kt)("p",null,"'.' Matches any single character.\u200b\u200b\u200b\u200b"),(0,s.kt)("p",null,"'*' Matches zero or more of the preceding element."),(0,s.kt)("h3",{id:"solution"},"Solution:"),(0,s.kt)("p",null,"The matching should cover the entire input string (not partial)."),(0,s.kt)("p",null,"Iterate Two strings, match one by one"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"case 0: \u4e00\u822c\u60c5\u51b5judge(str","[i-1]",",pattern","[j-1]",")"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"dp","[i][j]","=dp","[i-1][j-1]"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"case 1: pattern","[j-1]","=='*':"),(0,s.kt)("p",{parentName:"li"},"\u4e24\u79cd\u5c0f\u60c5\u51b5:"),(0,s.kt)("p",{parentName:"li"},"(1)not use preceding char "),(0,s.kt)("p",{parentName:"li"},"(2)preceding char use multiple times"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"dp","[i][j]","=dp","[i][j-2]","||judge(str","[i-1]",",pattern","[j-2]","&&dp","[i-1][j]",")")))),(0,s.kt)("h3",{id:"code"},"Code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool match(string s, string p) {\n        int n=p.size();\n        int m=s.size();\n        vector<vector<int>> dp(m+1,vector<int>(n+1,0));\n        dp[0][0]=1;\n        for(int i=2;i<=n;++i){\n            if(p[i-1]=='*')dp[0][i]=dp[0][i-2];\n        }\n        for(int i=1;i<=m;++i)for(int j=1;j<=n;++j){\n            if(judge(s[i-1],p[j-1]))\n                dp[i][j]=dp[i-1][j-1];\n            else if(p[j-1]=='*')\n                dp[i][j]=dp[i][j-2]||judge(s[i-1],p[j-2])&&dp[i-1][j];\n        }\n        return dp[m][n];\n    }\nprivate:\n    bool judge(char a,char b){return a==b||b=='.';}\n};\n")),(0,s.kt)("h2",{id:"regular-expressions"},"Regular Expressions"),(0,s.kt)("table",null,(0,s.kt)("tr",null,(0,s.kt)("th",null,"Category"),(0,s.kt)("th",null,"Pattern"),(0,s.kt)("th",null,"Matches")),(0,s.kt)("tr",null,(0,s.kt)("td",{rowspan:"6"},"Disjuncitons"),(0,s.kt)("td",null,"/[A-Z|a-z]/"),(0,s.kt)("td",null,"An upper/lower case letter")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/[0-9]/"),(0,s.kt)("td",null,"A single digit")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/[^A-Z]/"),(0,s.kt)("td",null,"Negations")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/\\d/"),(0,s.kt)("td",null,"any digit")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/\\D/"),(0,s.kt)("td",null,"any non-digit")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/./"),(0,s.kt)("td",null,"Any character except for newline")),(0,s.kt)("tr",null,(0,s.kt)("td",{rowspan:"2"},"Anchors"),(0,s.kt)("td",null,"/^/"),(0,s.kt)("td",null,"Start of Input")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/$/"),(0,s.kt)("td",null,"End of Input")),(0,s.kt)("tr",null,(0,s.kt)("td",{rowspan:"5"},"Frequencies"),(0,s.kt)("td",null,"/?/"),(0,s.kt)("td",null,"Optional(one or none)")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/*/"),(0,s.kt)("td",null,"zero or more")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/+/"),(0,s.kt)("td",null,"one or more")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/{m}/"),(0,s.kt)("td",null,"m repetitions")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"/{m,n}/"),(0,s.kt)("td",null,"m to n repetitions")),(0,s.kt)("tr",null,(0,s.kt)("td",null,"Others"),(0,s.kt)("td",null,"/()/"),(0,s.kt)("td",null,"capture group"))))}k.isMDXComponent=!0}}]);