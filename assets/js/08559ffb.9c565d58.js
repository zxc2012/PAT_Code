"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[4559],{8281:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));n(1839);const r={},i="1 Coding style and STL",s={unversionedId:"Algorithms/1",id:"Algorithms/1",title:"1 Coding style and STL",description:"STL",source:"@site/docs/Algorithms/1.md",sourceDirName:"Algorithms",slug:"/Algorithms/1",permalink:"/docs/Algorithms/1",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/1.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",next:{title:"2 \u66b4\u529b\u6c42\u89e3/\u6570\u5b66\u95ee\u9898",permalink:"/docs/Algorithms/2"}},o={},u=[{value:"STL",id:"stl",level:2},{value:"Coding Style",id:"coding-style",level:2},{value:"1.\u5b57\u7b26\u4e32\u5904\u7406",id:"1\u5b57\u7b26\u4e32\u5904\u7406",level:3},{value:"\u8f93\u5165\u65b9\u5f0f",id:"\u8f93\u5165\u65b9\u5f0f",level:4},{value:"\u5b57\u7b26\u4e32\u51fd\u6570",id:"\u5b57\u7b26\u4e32\u51fd\u6570",level:4},{value:"2.\u521d\u59cb\u5316",id:"2\u521d\u59cb\u5316",level:3},{value:"\u7b49\u503c",id:"\u7b49\u503c",level:4},{value:"\u4e0d\u7b49\u503c",id:"\u4e0d\u7b49\u503c",level:4},{value:"3.&quot;\u5bf9\u5e94&quot;\u7684\u5904\u7406",id:"3\u5bf9\u5e94\u7684\u5904\u7406",level:3},{value:"<code>\u6cd51:\u5efa\u8868</code>",id:"\u6cd51\u5efa\u8868",level:5},{value:"<code>\u6cd52:\u76f4\u63a5\u51fd\u6570\u8f93\u51fa</code>",id:"\u6cd52\u76f4\u63a5\u51fd\u6570\u8f93\u51fa",level:5},{value:"4. \u6392\u5e8f\u9898",id:"4-\u6392\u5e8f\u9898",level:3},{value:"cmp\u7684\u5199\u6cd5(since C++11)",id:"cmp\u7684\u5199\u6cd5since-c11",level:4},{value:"\u591a\u7ef4\u6392\u5e8f--&gt;\u627e\u53c2\u8003\u7cfb",id:"\u591a\u7ef4\u6392\u5e8f--\u627e\u53c2\u8003\u7cfb",level:4},{value:"\u5939\u903c\u9898:a,b!c",id:"\u5939\u903c\u9898abc",level:4},{value:"5.\u8f93\u51fa\u683c\u5f0f",id:"5\u8f93\u51fa\u683c\u5f0f",level:3},{value:"Basic",id:"basic",level:4},{value:"flag\u8bbe\u7f6e\u95ee\u9898",id:"flag\u8bbe\u7f6e\u95ee\u9898",level:4},{value:"\u6761\u4ef6\u8865\u96f6\u95ee\u9898",id:"\u6761\u4ef6\u8865\u96f6\u95ee\u9898",level:4},{value:"\u6c42\u6a21",id:"\u6c42\u6a21",level:4},{value:"\u5b57\u7b26\u4e32",id:"\u5b57\u7b26\u4e32",level:4},{value:"6.Time Limit Exceed",id:"6time-limit-exceed",level:3},{value:"7.Runtime Error",id:"7runtime-error",level:3}],p={toc:u};function d(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"1-coding-style-and-stl"},"1 Coding style and STL"),(0,l.kt)("h2",{id:"stl"},"STL"),(0,l.kt)("table",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"Category"),(0,l.kt)("td",null,"Container"),(0,l.kt)("td",null,"Expression"),(0,l.kt)("td",null,"Notes")),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"4"},"Sequence Containers"),(0,l.kt)("td",{rowspan:"4"},"string, vector, deque, list"),(0,l.kt)("td",null,"a.front()/a.back()"),(0,l.kt)("td",null,"Equivalent to *a.begin(),*(--a.end())")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"a[n]"),(0,l.kt)("td",null,"list not apply")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"void push_front(t)/void pop_front()"),(0,l.kt)("td",null,"deque, list")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"void push_back(t)/void pop_back()"),(0,l.kt)("td",null,"All")),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"2"},"(Unordered)Associative Containers"),(0,l.kt)("td",{rowspan:"2"},"set, map, multiset, multimap(unordered_set, unordered_map, unordered_multiset, unordered_multimap)"),(0,l.kt)("td",null,"size_type count( const Key& key ) const;"),(0,l.kt)("td",null,"All")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"bool contains( const Key& key ) const"),(0,l.kt)("td",null,"All")),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"3"},"Container adaptors"),(0,l.kt)("td",{rowspan:"3"},"stack, queue, priority_queue"),(0,l.kt)("td",null,"void push( value_type&& value )/void pop()"),(0,l.kt)("td",null,"All")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"reference top()"),(0,l.kt)("td",null,"stack, priority_queue")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"reference front()/back()"),(0,l.kt)("td",null,"queue(*begin(),*(--end())"))),(0,l.kt)("table",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,"\u7b97\u6cd5"),(0,l.kt)("td",null,"\u7c7b\u578b"),(0,l.kt)("td",null,"Structure"),(0,l.kt)("td",null,"function"),(0,l.kt)("td",null,"\u5907\u6ce8")),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"4",width:"80"},"Non-modifying sequence operations O(n)"),(0,l.kt)("td",{rowspan:"4",colspan:"2",width:"80"},"Sequence Containers && Associative containers"),(0,l.kt)("td",null,"iterator min_element(iterator first, iterator last[,Pred op])"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",null,"iterator max_element(iterator first, iterator last[,Pred op])"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",null,"int count(iterator first, iterator last,const T& val)"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",null,"iterator find(iterator first, iterator last,const T& val)"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"7"},"\u63d2\u5165\u7b97\u6cd5\u7b2c\u4e00\u4e2a\u88ab\u63d2\u5165\u5143\u7d20\u7684\u8fed\u4ee3\u5668first"),(0,l.kt)("td",{rowspan:"3",width:"40"},"Single element"),(0,l.kt)("td",{width:"40"},"vector"),(0,l.kt)("td",null,"iterator insert (const_iterator position, const value_type& val);"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",null,"set"),(0,l.kt)("td",null,"pair<iterator,bool> insert (const value_type& val);"),(0,l.kt)("td",null,"pair::second inserted(1)or existed(0)")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"string& insert (size_t pos, const char* s);"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"2"},"Fill"),(0,l.kt)("td",null,"vector"),(0,l.kt)("td",null,"iterator insert (const_iterator position, size_type n, const value_type& val);"),(0,l.kt)("td",null,"\u957f\u5ea6")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"string& insert (size_t pos, size_t n, char c);"),(0,l.kt)("td",null,"\u957f\u5ea6")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Range"),(0,l.kt)("td",null,"vector, string"),(0,l.kt)("td",null,"iterator insert (const_iterator position, InputIterator first, InputIterator last);"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Buffer"),(0,l.kt)("td",null,"string"),(0,l.kt)("td",null,"string& insert(size_t pos, const string& str, size_t subpos, size_t sublen);"),(0,l.kt)("td",null,"\u4e2a\u6570")),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"3"},"\u5220\u9664\u7b97\u6cd5return iterator points at the element that was pointed by last prior to any erasure, or a.end() if no such element exists"),(0,l.kt)("td",null,"Single element"),(0,l.kt)("td",null,"Sequence containers && (Unordered)Associative containers"),(0,l.kt)("td",null,"iterator erase (const_iterator position);"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Unfill"),(0,l.kt)("td",null,"Associative containers"),(0,l.kt)("td",null,"size_type erase(const value_type& val);"),(0,l.kt)("td",null,"\u4e2a\u6570")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"Range"),(0,l.kt)("td",null,"Sequence containers && (Unordered)Associative containers"),(0,l.kt)("td",null,"iterator erase(const_iterator first, const_iterator last);"),(0,l.kt)("td",null)),(0,l.kt)("tr",null,(0,l.kt)("td",{rowspan:"2"},"\u53d8\u5e8f\u7b97\u6cd5O(n)"),(0,l.kt)("td",{rowspan:"2",colspan:"2"},"Sequence Containers"),(0,l.kt)("td",null,"void reverse(iterator first, iterator last)")),(0,l.kt)("tr",null,(0,l.kt)("td",null,"void reverse(iterator first, iterator newFirst, iterator last)"),(0,l.kt)("td",null,"Performs a left rotation on a range of elements so that newFirst becomes the first element of the new range"))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"coding-style"},"Coding Style"),(0,l.kt)("h3",{id:"1\u5b57\u7b26\u4e32\u5904\u7406"},"1.\u5b57\u7b26\u4e32\u5904\u7406"),(0,l.kt)("h4",{id:"\u8f93\u5165\u65b9\u5f0f"},"\u8f93\u5165\u65b9\u5f0f"),(0,l.kt)("p",null,"getline(cin,str):"),(0,l.kt)("p",null,"std::basic_istream& getline(std::basic_istream&",(0,l.kt)("strong",{parentName:"p"},"is, std::"),"cxx11::basic_string& __str);"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"//\u89e3\u6790\u4e00\u4e2a\u5b57\u7b26\u7684\u4e09\u79cd\u65b9\u5f0f\nscanf(\"%c\",&ch);\nch=cin.get();\nch=getchar();\n//\u89e3\u6790\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\nchar m[20];\ngets(m);//gets\u51fd\u6570\u5982\u679c\u8bfb\u53d6\u4e86\u6362\u884c\u7b26\u4f1a\u5c06\u5176\u81ea\u52a8\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26'\\0'\ncin.getline(m,5);//\u591a\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u52a0\u7ed3\u675f\u7b26\ncin.get(m,20);//\u591a\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u52a0\u7ed3\u675f\u7b26\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"%2d\u5c31\u662f\u5c06\u6570\u5b57\u6309\u7167\u5bbd\u5ea6\u4e3a2 \u91c7\u7528\u53f3\u5bf9\u9f50\u65b9\u5f0f\u8f93\u51fa\uff0c\u82e5\u6570\u636e\u4f4d\u6570\u4e0d\u52302\u4f4d\uff0c\u5219\u5de6\u8fb9\u8865\u7a7a\u683c"),(0,l.kt)("li",{parentName:"ul"},"%02d\u548c%2d\u5dee\u4e0d\u591a \u53ea\u4e0d\u8fc7\u5de6\u8fb9\u88650"),(0,l.kt)("li",{parentName:"ul"},"toupper,tolower\u7684\u4f7f\u7528"))),(0,l.kt)("h4",{id:"\u5b57\u7b26\u4e32\u51fd\u6570"},"\u5b57\u7b26\u4e32\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"basic_string& operator+=( const basic_string& str );\nbasic_string& operator+=( const CharT* s );\nbasic_string& erase( size_type index = 0, size_type count = npos )//number of characters to remove\n")),(0,l.kt)("h3",{id:"2\u521d\u59cb\u5316"},"2.\u521d\u59cb\u5316"),(0,l.kt)("h4",{id:"\u7b49\u503c"},"\u7b49\u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"//vector\nvector<vector<int>>v(8,vector<int>(8,0));\n//e[][]\nfill(e[0],e[0]+510*510,0);\n")),(0,l.kt)("h4",{id:"\u4e0d\u7b49\u503c"},"\u4e0d\u7b49\u503c"),(0,l.kt)("p",null,"void iota(iterator first,iterator last,T val)\n[first,last)\u4eceval\u8fde\u7eed\u8d4b\u503c"),(0,l.kt)("h3",{id:"3\u5bf9\u5e94\u7684\u5904\u7406"},'3."\u5bf9\u5e94"\u7684\u5904\u7406'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"[\u6613\u9519\u70b9]","0/1\u5f00\u5934")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"1\u5f00\u5934\u597d\u5904:\u907f\u514dmap\u3001lchild\u3001rchild\u95ee\u9898")),(0,l.kt)("h5",{id:"\u6cd51\u5efa\u8868"},(0,l.kt)("inlineCode",{parentName:"h5"},"\u6cd51:\u5efa\u8868")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'char c[14] = {"0123456789ABC"};\nprintf("#");\nfor(int i = 0; i < 3; i++) {\n    int num;\n    scanf("%d", &num);\n    printf("%c%c", c[num/13], c[num%13]);\n}\nreturn 0;\n')),(0,l.kt)("h5",{id:"\u6cd52\u76f4\u63a5\u51fd\u6570\u8f93\u51fa"},(0,l.kt)("inlineCode",{parentName:"h5"},"\u6cd52:\u76f4\u63a5\u51fd\u6570\u8f93\u51fa")),(0,l.kt)("h3",{id:"4-\u6392\u5e8f\u9898"},"4. \u6392\u5e8f\u9898"),(0,l.kt)("h4",{id:"cmp\u7684\u5199\u6cd5since-c11"},"cmp\u7684\u5199\u6cd5(since C++11)"),(0,l.kt)("p",null,"Lambda Structure"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"capture clause"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"& (implicitly capture the used automatic variables by reference)"),(0,l.kt)("li",{parentName:"ul"},"= (implicitly capture the used automatic variables by copy)."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parameter list ",(0,l.kt)("em",{parentName:"p"},"Optional")," ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"lambda body."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"[&](node&a, node&b)->bool{\n    if ((a.de1 + a.cai) != (b.de + b.cai))        \n        return (a.de + a.cai) > (b.de + b.cai);//\u6280\u5de7:\u4ee5\u6c42\u548c\u4ee3\u66ff\u6c42\u5e73\u5747\u503c\n    else if (a.de != b.de) return a.de > b.de;\n    else return strcmp(a.name, b.name) < 0;//char name[9]\n        //\u8fd8\u53ef\u4ee5string a.name<b.name;\n}\n")),(0,l.kt)("p",null,"\u5e76\u5217\u6392\u540d\u95ee\u9898"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct node {\n    int id, best;\n    int score[4], rank[4];\n};//\u4e00\u822c\u4e00\u4e2a\u7ed3\u6784\u4f53\nfor(i=0;i<sch.size();++i){\n for(j=0;j<k;++j){\n        bool y;\n        int choice=sch[i].sc[j];\n        int x=ans[choice].size();\n        if(x>0){\n            int last=x-1;\n            y=sch[i].grade[0]==ans[choice][last].grade[0]&&sch[i].grade[1]==ans[choice][last].grade[1];\n            x=y?ans[choice][last].rank:x;\n        }\n        if(x<full[choice]||y){\n            ans[sch[i].sc[j]].push_back(sch[i];\n            break;\n        }\n}\nfor(flag = 0; flag <= 2; flag++) {\n        sort(ans.begin(), ans.end(), cmp1);\n        for(int i = 0; i < n; i++) {\n            ans[i].rank[flag] = i;\n            if(i>0&&ans[i].grade[flag] == ans[i-1].grade[flag])//\u6ce8\u610f\u591a\u4e00\u4e2a\u5224\u65ad\u8fd8\u6709\u53cd\u5411            \n            ans[i].ans[flag] = ans[i-1].rank[flag];\n        }\n}\n")),(0,l.kt)("h4",{id:"\u591a\u7ef4\u6392\u5e8f--\u627e\u53c2\u8003\u7cfb"},"\u591a\u7ef4\u6392\u5e8f--\x3e\u627e\u53c2\u8003\u7cfb"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"1\u6bd4\u8f83\u65f6\u95f4\u5b9e\u9645\u53ef\u4ee5t[j]-t[i](\u4ece0:0:0\u5f00\u59cb)")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"2\u6c42\u8fde\u7eed\u5b57\u7b26\u4e32\u548c\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6--\x3esum[j]-sum[i]")),(0,l.kt)("admonition",{title:"\u6613\u9519\u70b9",type:"caution"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"\u591a\u4f59\u94fe\u8868\u3001\u8bb0\u5f55\u7684\u95ee\u9898"),(0,l.kt)("li",{parentName:"ul"},"sum\u6709n+1\u4e2a(\u8fd8\u67090)"))),(0,l.kt)("h4",{id:"\u5939\u903c\u9898abc"},"\u5939\u903c\u9898:","[a,b]","!c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"for(j=temp;st[j].time<=cal(c)&&j<st.size();++j)\n    if(st[j].status==0)sum++;\n    else sum--;\n")),(0,l.kt)("h3",{id:"5\u8f93\u51fa\u683c\u5f0f"},"5.\u8f93\u51fa\u683c\u5f0f"),(0,l.kt)("h4",{id:"basic"},"Basic"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'for (int i = 0; i < 4; i++) {\n    sort(v[i].begin(), v[i].end(), cmp);\n    for (int j = 0; j < v[i].size(); j++){//\u5c0f\u6280\u5de7:\u5229\u7528\u987a\u5e8f\u6761\u4ef6\uff0c\u5982\u6c42\u4e00\u4e32\u7801\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5143\u7d20\n        if(j!=0)printf(" ");\n        printf("%d", v[i][j].num);\n    }\n    printf("\\n");\n}\n')),(0,l.kt)("h4",{id:"flag\u8bbe\u7f6e\u95ee\u9898"},"flag\u8bbe\u7f6e\u95ee\u9898"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Leetcode98 \u6307\u9488\u7a7a\u95f4\u590d\u6742\u5ea6O(1)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int* last = NULL;//flag\nbool isValidBST(TreeNode* root) {\n   if (root){\n         if(!isValidBST(root->left)) return false;\n         if (last && *last>=root->val) return false;//\u7b2c\u4e00\u6b21\u667a\u6167\u6267\u884c\u4e0b\u9762\n         last = &root->val;\n         if(!isValidBST(root->right)) return false;\n         return true;\n   }else return true;\n};\n")),(0,l.kt)("h4",{id:"\u6761\u4ef6\u8865\u96f6\u95ee\u9898"},"\u6761\u4ef6\u8865\u96f6\u95ee\u9898"),(0,l.kt)("p",null,"Eg:\u4fdd\u7559n\u4f4d\u5c0f\u6570(temp.size\u53ef\u5927\u53ef\u5c0f)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'while(temp.size()<N)//\u6709\u6548\u6570\u5b57\u4f4d\u6570\u5c0f\u4e8eN\ntemp+="0";//\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u52a0\u8db3\u591f\u76840\u4fdd\u8bc1\u6709N\u4f4d\u6709\u6548\u6570\u5b57\n')),(0,l.kt)("h4",{id:"\u6c42\u6a21"},"\u6c42\u6a21"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"sum+=(r-mid+1);\nsum%=1000000007;\n")),(0,l.kt)("h4",{id:"\u5b57\u7b26\u4e32"},"\u5b57\u7b26\u4e32"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'return mini==m+1?"":s.substr(cap,mini);//\u6ce8\u610fsubstr\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u957f\u5ea6\n')),(0,l.kt)("h3",{id:"6time-limit-exceed"},"6.Time Limit Exceed"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5faa\u73af\u5185\u5957\u4e86\u4e00\u4e2a\u5927\u51fd\u6570:\u5982\u5faa\u73af\u5185sort(>1000),\u6216\u662f\u4e00\u4e2a\u5927\u6570\u7ec4(",(0,l.kt)("span",{parentName:"p",className:"math math-inline"},(0,l.kt)("span",{parentName:"span",className:"katex"},(0,l.kt)("span",{parentName:"span",className:"katex-mathml"},(0,l.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,l.kt)("semantics",{parentName:"math"},(0,l.kt)("mrow",{parentName:"semantics"},(0,l.kt)("mn",{parentName:"mrow"},"1"),(0,l.kt)("msup",{parentName:"mrow"},(0,l.kt)("mn",{parentName:"msup"},"0"),(0,l.kt)("mn",{parentName:"msup"},"5"))),(0,l.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"10^5")))),(0,l.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},"1"),(0,l.kt)("span",{parentName:"span",className:"mord"},(0,l.kt)("span",{parentName:"span",className:"mord"},"0"),(0,l.kt)("span",{parentName:"span",className:"msupsub"},(0,l.kt)("span",{parentName:"span",className:"vlist-t"},(0,l.kt)("span",{parentName:"span",className:"vlist-r"},(0,l.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,l.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,l.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,l.kt)("span",{parentName:"span",className:"mord mtight"},"5")))))))))))),")\u7684cin--\x3escanf"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Eg:i<strlen(s),\u6bcf\u6b21\u6c42\u957f\u5ea6")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5916\u5faa\u73af\u4e0e\u5185\u5faa\u73af\u6761\u4ef6\u5bf9\u6362\uff0c\u53ef\u4ee5\u51cf\u5c11\u91cd\u590d"))),(0,l.kt)("h3",{id:"7runtime-error"},"7.Runtime Error"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for:scanf()\u5faa\u73af\u52a0\u4e86\u6c42sum\u6216\u8005\u5217\u8868\u95ee\u9898,\u4f46\u8fd8\u6ca1sort\u5462"),(0,l.kt)("li",{parentName:"ul"},"while\u548cfor\u7684\u53d6\u820d,\u5173\u952e\u5728\u4e8e\u66f4\u65b0\u8bed\u53e5,\u4e00\u5b9a\u8981\u4e8b\u5148\u8003\u8651update\u662f\u5426\u5728\u6240\u6709\u7ed3\u6784\u5747\u5b58\u5728")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"while(){\n    if(){update;}\n    else(){update;}\n}\n")))}d.isMDXComponent=!0}}]);