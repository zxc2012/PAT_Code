"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[3415],{9079:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>k,frontMatter:()=>m,metadata:()=>p,toc:()=>i});var n=t(7462),s=(t(7294),t(3905));t(1839);const m={},r="2 Synchronization",p={unversionedId:"cs/Operating_System/OS_2",id:"cs/Operating_System/OS_2",title:"2 Synchronization",description:"Race Condition",source:"@site/docs/cs/Operating_System/OS_2.md",sourceDirName:"cs/Operating_System",slug:"/cs/Operating_System/OS_2",permalink:"/docs/cs/Operating_System/OS_2",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/cs/Operating_System/OS_2.md",tags:[],version:"current",frontMatter:{},sidebar:"cs",previous:{title:"1 Abstraction",permalink:"/docs/cs/Operating_System/OS_1"},next:{title:"3 Scheduling",permalink:"/docs/cs/Operating_System/OS_3"}},l={},i=[{value:"Race Condition",id:"race-condition",level:2},{value:"Lock",id:"lock",level:3},{value:"semaphore",id:"semaphore",level:3},{value:"Producer-Consumer Problem",id:"producer-consumer-problem",level:3},{value:"Monitors",id:"monitors",level:3},{value:"DeadLock",id:"deadlock",level:2},{value:"Resource-Allocation Graph",id:"resource-allocation-graph",level:3},{value:"Four requirements",id:"four-requirements",level:3},{value:"Techniques for addressing deadlock",id:"techniques-for-addressing-deadlock",level:3},{value:"The Dining Philosopher",id:"the-dining-philosopher",level:3}],o={toc:i};function k(a){let{components:e,...t}=a;return(0,s.kt)("wrapper",(0,n.Z)({},o,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"2-synchronization"},"2 Synchronization"),(0,s.kt)("h2",{id:"race-condition"},"Race Condition"),(0,s.kt)("p",null,"we need to make threads coordinate with each other to ensure ",(0,s.kt)("strong",{parentName:"p"},"mutual exclusion")," in accessing ",(0,s.kt)("strong",{parentName:"p"},"critical sections")," of code"),(0,s.kt)("h3",{id:"lock"},"Lock"),(0,s.kt)("p",null,"Locks provide two atomic operations"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Lock.acquire() \u2013 wait until lock is free; then mark it as busy"),(0,s.kt)("li",{parentName:"ul"},"Lock.release() \u2013 mark lock as free")),(0,s.kt)("p",null,"Problem: SpinLock consumes cycles while waiting"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"TSL(&address) { //test and set lock \n    result = M[address]; // return result from \u201caddress\u201d and\n    M[address] = 1; // set value at \u201caddress\u201d to 1\n    return result;\n}\nint value = 0; // Free\nAcquire() {\n    while (TSL(&value)) {}; // spin while busy\n}\nRelease() {\n    value = 0; // atomic store\n}\n")),(0,s.kt)("p",null,"Better Locks"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int guard = 0;\nint value = FREE;\nAcquire() {\n    // Short busy-wait time\n    while (TSL(guard));\n    if (value == BUSY) {\n        put thread on wait queue;\n        run_new_thread() & guard = 0;\n    } else {\n        value = BUSY;\n        guard = 0;\n    }\n}\nRelease() {\n    // Short busy-wait time\n    while (TSL(guard));\n    if anyone on wait queue {\n        take thread off wait queue\n        Place on ready queue;\n    } else {\n        value = FREE;\n    }\n    guard = 0;\n}\n")),(0,s.kt)("h3",{id:"semaphore"},"semaphore"),(0,s.kt)("p",null,"semaphore ","['s\u025bm\u0259f\u0254r]",(0,s.kt)("inlineCode",{parentName:"p"},"sema- :signal,phoro:carry,bring")),(0,s.kt)("p",null,"a semaphore has a non-negative integer value and supports the following two operations:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"P() or down(): atomic operation that waits for semaphore to become positive, then decrements it by 1"),(0,s.kt)("li",{parentName:"ul"},"V() or up(): an atomic operation that increments the semaphore by 1")),(0,s.kt)("p",null,"P() stands for probe (to test) and V() stands for \u201cverhogen\u201d (to increment) in Dutch"),(0,s.kt)("h3",{id:"producer-consumer-problem"},"Producer-Consumer Problem"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Buffer Empty: The producer needs to first add a message to the shared buffer before the consumer can remove it"),(0,s.kt)("li",{parentName:"ul"},"Buffer Full: The producer needs to wait for the consumer to catch up")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"semaphore mutex = 1, empty = N, full = 0;\nProducer(item){\n    empty.P();\n    mutex.acquire();//1,2 \u6ce8\u610f\u987a\u5e8f\n    Enqueue(item);\n    mutex.release();\n    full.V(); //4,5\u987a\u5e8f\u53ef\u98a0\u5012\n}\nConsumer() {\n    full.P();\n    mutex.acquire();\n    item = Dequeue();\n    mutex.release();\n    empty.V();\n    return item;\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"wait->yield->schedule"),(0,s.kt)("li",{parentName:"ul"},"interrupt->schedule")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220531174332.png",alt:"20220531174332"})),(0,s.kt)("h3",{id:"monitors"},"Monitors"),(0,s.kt)("p",null,"Monitor"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Encapsulation",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Local data variables are accessible only via the monitor\u2019s entry methods"))),(0,s.kt)("li",{parentName:"ul"},"Mutual exclusion",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"only one thread can be active in a monitor at any time"),(0,s.kt)("li",{parentName:"ul"},"every method starts with lock and end with unlock")))),(0,s.kt)("p",null,"Condition Variables"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"condition.wait(): a thread exits the monitor(relese lock), waits for the ",(0,s.kt)("em",{parentName:"li"},"condition")," variable to hold, and enters the monitor(Reacquire lock) again when it does"),(0,s.kt)("li",{parentName:"ul"},"condition.signal(): signals (wakes up) a waiting thread on the ",(0,s.kt)("em",{parentName:"li"},"condition")," variable, so that it can try to enter the monitor"),(0,s.kt)("li",{parentName:"ul"},"condition.broadcast(): signals (wakes up) all waiting threads on the ",(0,s.kt)("em",{parentName:"li"},"condition")," variable, so that they can all try to enter the monitor")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// Wrong Answer\nmutex lock = unlocked;\nCondition full,empty;\nProducer(item){\n    lock.acquire();\n    if(buffer_full)full.wait();//wait when buffer is full\n    Enqueue(item);\n    empty.signal();\n    lock.release();\n}\nConsumer() {\n    lock.acquire();\n    if(buffer_empty)empty.wait();//wait when buffer is empty\n    item = Dequeue();\n    full.signal();\n    lock.release();\n    return item;\n}\n")),(0,s.kt)("p",null,"The Producer is running in the monitor.It adds a message to an empty shared buffer,signals a waiting Consumer thread, waking it up. At this time, the Producer and Consumer cannot both run inside the monitor."),(0,s.kt)("p",null,"(1)Hoare Semantics"),(0,s.kt)("p",null,"The signaled thread, B, enters the monitor immediately,then back to A(The signaling thread)"),(0,s.kt)("p",null,"When a thread call signal():"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It releases the lock and the OS context-switches to the waiter, which acquires the\nlock immediately"),(0,s.kt)("li",{parentName:"ul"},"When waiter releases lock, the OS switches back to signaler")),(0,s.kt)("p",null,"(2)",(0,s.kt)("strong",{parentName:"p"},"Mesa Semantics")),(0,s.kt)("p",null,"The signaled thread is awakened,it will have to compete against all other threads for the monitor lock."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Problem previously"),": "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"When a thread is woken up by signal(), it is simply marked as eligible to run. "),(0,s.kt)("li",{parentName:"ul"},'Another thread could be scheduled first and "sneak in" to empty/full the queue')),(0,s.kt)("p",null,"Solution: if->while"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"mutex lock = unlocked;\nCondition full,empty;\nProducer(item){\n    lock.acquire();\n    while(buffer_full)full.wait();//wait when buffer is full\n    Enqueue(item);\n    empty.signal();\n    lock.release();\n}\nConsumer() {\n    lock.acquire();\n    while(buffer_empty)empty.wait();//wait when buffer is empty\n    item = Dequeue();\n    full.signal();\n    lock.release();\n    return item;\n}\n")),(0,s.kt)("h2",{id:"deadlock"},"DeadLock"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230323204655.png",alt:"20230323204655"})),(0,s.kt)("p",null,"Deadlock => starvation but not vice versa"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Starvation: thread waits indefinitely"),(0,s.kt)("li",{parentName:"ul"},"Deadlock: circular waiting for resources")),(0,s.kt)("p",null,"Starvation can end. Deadlock can\u2019t end without external intervention"),(0,s.kt)("h3",{id:"resource-allocation-graph"},"Resource-Allocation Graph"),(0,s.kt)("p",null,"A set of Threads ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"T"),(0,s.kt)("mn",{parentName:"msub"},"1"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T_1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),", ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"T"),(0,s.kt)("mn",{parentName:"msub"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T_2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),", . . ., ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"T"),(0,s.kt)("mi",{parentName:"msub"},"n"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T_n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),"/ Resource types ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"R"),(0,s.kt)("mn",{parentName:"msub"},"1"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R_1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),"\uff0c",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"R"),(0,s.kt)("mn",{parentName:"msub"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R_2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),", . . ., ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"R"),(0,s.kt)("mi",{parentName:"msub"},"m"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R_m")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),"(CPU cycles, memory space, I/O devices)"),(0,s.kt)("p",null,"Each thread utilizes a resource as follows: Request() / Use() / Release()"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"request edge \u2013 directed edge ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"T"),(0,s.kt)("mn",{parentName:"msub"},"1"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T_1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," -> ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"R"),(0,s.kt)("mi",{parentName:"msub"},"j"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R_j")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9694em",verticalAlign:"-0.2861em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.05724em"}},"j")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2861em"}},(0,s.kt)("span",{parentName:"span"}))))))))))),(0,s.kt)("li",{parentName:"ul"},"assignment edge \u2013 directed edge ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"R"),(0,s.kt)("mi",{parentName:"msub"},"j"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R_j")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9694em",verticalAlign:"-0.2861em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0077em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.05724em"}},"j")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2861em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," -> ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"T"),(0,s.kt)("mi",{parentName:"msub"},"i"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T_i")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))))),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230323212735.png",alt:"20230323212735"})),(0,s.kt)("h3",{id:"four-requirements"},"Four requirements"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Mutual exclusion"),": Only one thread at a time can use a resource."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Hold and wait"),": Thread holding at least one resource is waiting to acquire additional resources held by other threads"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"No preemption"),": Resources are released only voluntarily by the thread holding the resource, after thread is finished with it"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Circular wait"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"There exists a set {T1, \u2026, Tn} of waiting threads"),(0,s.kt)("li",{parentName:"ul"},"T1 is waiting for a resource that is held by T2"),(0,s.kt)("li",{parentName:"ul"},"T2 is waiting for a resource that is held by T3"),(0,s.kt)("li",{parentName:"ul"},"..."),(0,s.kt)("li",{parentName:"ul"},"Tn is waiting for a resource that is held by T1")))),(0,s.kt)("h3",{id:"techniques-for-addressing-deadlock"},"Techniques for addressing deadlock"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Deadlock prevention"),": breaks any one of four requirements",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"No mutual exclusion: No Sharing of resources (totally independent threads)"),(0,s.kt)("li",{parentName:"ul"},"No hold and wait:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Allow process to request resources only when the process has none: starvation possible"),(0,s.kt)("li",{parentName:"ul"},"Make all threads request everything they\u2019ll need at the beginning: Low resource utilization"))),(0,s.kt)("li",{parentName:"ul"},"Allow preemption: On collision, back off and retry"),(0,s.kt)("li",{parentName:"ul"},"No circular wait: Force all threads to request resources in a particular order preventing any cyclic use of resources"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Deadlock recovery"),": let deadlock happen, and then figure out how to recover from it",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Terminate thread, force it to give up resources"),(0,s.kt)("li",{parentName:"ul"},"Preempt resources without killing off thread"),(0,s.kt)("li",{parentName:"ul"},"Roll back actions of deadlocked threads"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Deadlock avoidance"),": prevent system from reaching an ",(0,s.kt)("em",{parentName:"li"},"unsafe")," state",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"When a thread requests a resource, OS checks if it would result in deadlock an unsafe state",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"If not, it grants the resource right away"),(0,s.kt)("li",{parentName:"ul"},"If so, it waits for other threads to release resources"))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Deadlock denial"),": ignore the possibility of deadlock")),(0,s.kt)("p",null,"Deadlock avoidance: Safe state(System can delay resource acquisition to prevent deadlock), Unsafe state(Threads can unavoidably lead to deadlock/Deadlock exist)"),(0,s.kt)("h3",{id:"the-dining-philosopher"},"The Dining Philosopher"),(0,s.kt)("p",null,"Five Philosopher sit at a table"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220520215436.png",alt:"20220520215436"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def philosopher(int i):\n    while true:\n        think()\n        Pickup left fork\n        Pickup right fork\n        eat()\n        Put down left fork\n        Put down right fork\n")),(0,s.kt)("p",null,"DeadLock"),(0,s.kt)("p",null,"It may happen that all five philosophers take their left fork at the same time, and then try to take\ntheir right fork, which is taken by a neighbouring philosopher"),(0,s.kt)("p",null,"Solution"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"semaphore forks[5]= {1,1,1,1,1}\ndef pickup_fork(int i):\n    forks[i].down()\ndef putdown_fork(int i):\n    forks[i].up()\n\ndef pickup_forks(int i):\n    if i == 4:\n        pickup_fork((i+1) modulo 5)\n        pickup_fork(i)\n    else:\n        pickup_fork(i)\n        pickup_fork((i+1) modulo 5)\ndef putdown_forks(int i):\n    putdown_fork(i)\n    putdown_fork((i+1) modulo 5)\n")))}k.isMDXComponent=!0}}]);