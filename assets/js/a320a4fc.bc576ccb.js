"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[3624],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),o=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=o(r),d=a,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||l;return r?n.createElement(k,i(i({ref:t},c),{},{components:r})):n.createElement(k,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var o=2;o<l;o++)i[o]=r[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4139:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var n=r(7462),a=(r(7294),r(3905));const l={},i="CS162 Lecture1 --Operating System Overview",s={unversionedId:"cs/cs162_1",id:"cs/cs162_1",title:"CS162 Lecture1 --Operating System Overview",description:"Overview",source:"@site/docs/cs/cs162_1.md",sourceDirName:"cs",slug:"/cs/cs162_1",permalink:"/docs/cs/cs162_1",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/cs/cs162_1.md",tags:[],version:"current",frontMatter:{},sidebar:"cs",previous:{title:"CS152 Lecture2 --Complex Pipelining",permalink:"/docs/cs/cs152_2"},next:{title:"CS162 Lecture2 --Synchronization",permalink:"/docs/cs/cs162_2"}},p={},o=[{value:"Overview",id:"overview",level:2},{value:"Compare of cs61c and cs162",id:"compare-of-cs61c-and-cs162",level:3},{value:"Four fundamental OS concepts",id:"four-fundamental-os-concepts",level:2},{value:"Thread",id:"thread",level:3},{value:"Concept",id:"concept",level:4},{value:"Concurrency",id:"concurrency",level:4},{value:"User/Kernel Threading Models",id:"userkernel-threading-models",level:4},{value:"Address Space",id:"address-space",level:3},{value:"Process",id:"process",level:3},{value:"Process Management API",id:"process-management-api",level:4},{value:"Internal Events--PCB",id:"internal-events--pcb",level:4},{value:"External Events--Interrupt",id:"external-events--interrupt",level:4},{value:"Dual Mode Operation",id:"dual-mode-operation",level:3}],c={toc:o};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cs162-lecture1---operating-system-overview"},"CS162 Lecture1 --Operating System Overview"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"BIOS:Basic Input Output System"),(0,a.kt)("li",{parentName:"ul"},"PC(program counter) SP(stack pointer)"),(0,a.kt)("li",{parentName:"ul"},"CS:IP code segment : instruction pointer."),(0,a.kt)("li",{parentName:"ul"},".s source code files written in assembly")),(0,a.kt)("h3",{id:"compare-of-cs61c-and-cs162"},"Compare of cs61c and cs162"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Processor -- Thread"),(0,a.kt)("li",{parentName:"ul"},"Memory -- Address Space"),(0,a.kt)("li",{parentName:"ul"},"Disks,SSDS,... -- Files"),(0,a.kt)("li",{parentName:"ul"},"Networks -- Sockets"),(0,a.kt)("li",{parentName:"ul"},"Machines -- Processes")),(0,a.kt)("p",null,"Instruction Fetch/Decode/Execute\n",(0,a.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20210310160953285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzgwMjMw,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,a.kt)("h2",{id:"four-fundamental-os-concepts"},"Four fundamental OS concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Thread: Single unique execution context(Fully desribes program state)"),(0,a.kt)("li",{parentName:"ul"},"Address space: set of memory address accessible to program(r/o)"),(0,a.kt)("li",{parentName:"ul"},"Process: an instance of a running program(protected address space+ >=1 threads)"),(0,a.kt)("li",{parentName:"ul"},'Dual Mode operation/Protection(only the "system" has the ability to access certain resources)')),(0,a.kt)("h3",{id:"thread"},"Thread"),(0,a.kt)("h4",{id:"concept"},"Concept"),(0,a.kt)("p",null,"3 states"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"running"),(0,a.kt)("li",{parentName:"ul"},"ready \u2013 eligible to run, but not currently running"),(0,a.kt)("li",{parentName:"ul"},"blocked \u2013 ineligible to run (e.g.waiting for an I/O to finish)")),(0,a.kt)("p",null,"API"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"yield() \u2014 Current thread yields the CPU"),(0,a.kt)("li",{parentName:"ul"},"sleep() (e.g., sending to full buffer)"),(0,a.kt)("li",{parentName:"ul"},"wakeup() (e.g., buffer space becomes available)")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220503163341.png",alt:"20220503163341"})),(0,a.kt)("h4",{id:"concurrency"},"Concurrency"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Concurrency vs parallelism"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Concurrency is about handling multiple things at once(Networked servers must handle ",(0,a.kt)("em",{parentName:"li"},"concurrent")," requests)"),(0,a.kt)("li",{parentName:"ul"},"Parallelism is about doing multiple things simultaneously(Parallel programs must ",(0,a.kt)("em",{parentName:"li"},"parallelise")," for performance)"),(0,a.kt)("li",{parentName:"ul"},"Parallel => concurrent, but not the other way round!"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Multiprocessing vs multithreading"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Multiprocessing: Multiple CPUs(cores)"),(0,a.kt)("li",{parentName:"ul"},"Multithreading: Multiple threads/processes")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210317164857.png",alt:"20210317164857"}),"\n",(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210317165234.png",alt:"20210317165234"})))),(0,a.kt)("h4",{id:"userkernel-threading-models"},"User/Kernel Threading Models"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One-to-one: All major operating systems: Windows, Linux (with the Native POSIX Thread Library), macOS"),(0,a.kt)("li",{parentName:"ul"},"Many-to-one: GNU Portable Threads (Pth)"),(0,a.kt)("li",{parentName:"ul"},"Many-to-many: Windows user-mode scheduling")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220531163348.png",alt:"20220531163348"})),(0,a.kt)("h3",{id:"address-space"},"Address Space"),(0,a.kt)("p",null,"Base and bounds registers are visible/accessible only\nwhen processor is running in ",(0,a.kt)("em",{parentName:"p"},"supervisor")," mode"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20210310170644453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzgwMjMw,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,a.kt)("h3",{id:"process"},"Process"),(0,a.kt)("p",null,"Thread encapsulate ",(0,a.kt)("em",{parentName:"p"},"concurrency")),(0,a.kt)("p",null,"Address spaces encapsulate ",(0,a.kt)("em",{parentName:"p"},"protection"),"\n",(0,a.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20210310171008806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzgwMjMw,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,a.kt)("h4",{id:"process-management-api"},"Process Management API"),(0,a.kt)("p",null,"pthread: posix(portable operating system interface)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"join(pid) - suspends execution of the calling thread until the target ",(0,a.kt)("em",{parentName:"p"},"pid")," terminates ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"exit \u2013 terminate a process")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"fork \u2013 copy the current process"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"$>0$: Returned to parent or caller,return value is pid of new child"),(0,a.kt)("li",{parentName:"ul"},"$=0$: Returned to the newly created child process"),(0,a.kt)("li",{parentName:"ul"},"$<0$: error creating,running in original process"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"exec \u2013 change the program being run by the current process")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"wait \u2013  pauses the parent until the child finishes,crashes, or is terminated"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-c"},'int main(int argc, char* argv[]){\n    pid_t cpid,tcpid;\n    cpid = fork();\n    int status;\n    pid_t mypid=getpid();\n    if (cpid > 0) {               /* Parent Process */\n        tcpid = wait(&status);\n        printf("%d wait%d(%d)",mypid,tcpid,status);\n    } else if (cpid == 0) {      /* Child Process */\n        mypid = getpid();\n        printf("[%d] child\\n", mypid);\n        char *myargs[3];\n        myargs[0] = strdup("wc");   // program: "wc" (word count)\n        myargs[1] = strdup("test.cpp"); // argument: file to count\n        myargs[2] = NULL;           // marks end of array\n        execvp(myargs[0], myargs);  // runs word count\n        printf("this shouldn\'t print out.\\n");\n    }\n}\n')),(0,a.kt)("p",{parentName:"li"},"  output:"),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"[8042]"," child")),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"8041 wait8042(256)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"kill \u2013 send a signal (interrupt-like notification) to another process")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"signal \u2013 system call to send a notification to another process"))),(0,a.kt)("p",null,"Main thread creates (forks) collection of sub-threads passing them args to work on, and then ",(0,a.kt)("em",{parentName:"p"},"join"),"s with them, collecting results"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220120162550.png",alt:"20220120162550"})),(0,a.kt)("h4",{id:"internal-events--pcb"},"Internal Events--PCB"),(0,a.kt)("p",null,"PCB is used for saving states in a ",(0,a.kt)("em",{parentName:"p"},"context")),(0,a.kt)("p",null,"For multi-threaded process, substitute process \u2192 thread and\nPCB \u2192 TCB"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220120162249.png",alt:"20220120162249"})),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220503162234.png",alt:"20220503162234"})),(0,a.kt)("h4",{id:"external-events--interrupt"},"External Events--Interrupt"),(0,a.kt)("p",null,"Example:web server\n",(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210317172017.png",alt:"20210317172017"})),(0,a.kt)("h3",{id:"dual-mode-operation"},"Dual Mode Operation"),(0,a.kt)("p",null,"Unix structure\n",(0,a.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20210310171233609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzgwMjMw,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"}),"\n3 types of user$\\rightarrow$kernel mode transfer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"syscall",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"process requests a system service,e.g.,exit()"),(0,a.kt)("li",{parentName:"ul"},'like a function call, but "outside" the process'))),(0,a.kt)("li",{parentName:"ul"},"interrupt",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"external asychronous event triggers context switch "),(0,a.kt)("li",{parentName:"ul"},"e.g.,timer, I/O device"))),(0,a.kt)("li",{parentName:"ul"},"trap/exception",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"internal asychronous event in process triggers context switch"),(0,a.kt)("li",{parentName:"ul"},"e.g.,protection violation(segment fault),divide by zero")))))}u.isMDXComponent=!0}}]);