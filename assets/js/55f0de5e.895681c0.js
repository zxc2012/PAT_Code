"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[2858],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(i,".").concat(d)]||m[d]||s[d]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={},o="Memory Layout",c={unversionedId:"C++/\u5185\u5b58\u5206\u914d",id:"C++/\u5185\u5b58\u5206\u914d",title:"Memory Layout",description:"Memory layout",source:"@site/docs/C++/\u5185\u5b58\u5206\u914d.md",sourceDirName:"C++",slug:"/C++/\u5185\u5b58\u5206\u914d",permalink:"/docs/C++/\u5185\u5b58\u5206\u914d",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/C++/\u5185\u5b58\u5206\u914d.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"Java Application Design--Exceptions & IO",permalink:"/docs/C++/Java_exception"}},i={},p=[{value:"Memory layout",id:"memory-layout-1",level:2},{value:"\u8bb2\u89e3",id:"\u8bb2\u89e3",level:3},{value:"\u5168\u5c40\u533a",id:"\u5168\u5c40\u533a",level:3},{value:"Example",id:"example",level:3},{value:"From souce code to executable",id:"from-souce-code-to-executable",level:2},{value:"Preprocess",id:"preprocess",level:3},{value:"Compilation",id:"compilation",level:3},{value:"Assembly",id:"assembly",level:3},{value:"Link",id:"link",level:3}],u={toc:p};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"memory-layout"},"Memory Layout"),(0,r.kt)("h2",{id:"memory-layout-1"},"Memory layout"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tZWRpYS5nZWVrc2ZvcmdlZWtzLm9yZy93cC1jb250ZW50L3VwbG9hZHMvbWVtb3J5TGF5b3V0Qy5qcGc?x-oss-process=image/format,png",alt:"fds"})),(0,r.kt)("h3",{id:"\u8bb2\u89e3"},"\u8bb2\u89e3"),(0,r.kt)("p",null,"(1)stack"),(0,r.kt)("p",null,"Stack frame:\n\u8fd0\u884c\u65f6\u51fd\u6570\u5206\u914d\u7684\u5c40\u90e8 automatic \u53d8\u91cf\u3001\u51fd\u6570\u53c2\u6570\u3001\u8fd4\u56de\u6570\u636e\u3001\u8fd4\u56de\u5730\u5740\u7b49"),(0,r.kt)("p",null,"As you do recursive calls, a new stack frame ",(0,r.kt)("strong",{parentName:"p"},"added"),", the stack is going ",(0,r.kt)("strong",{parentName:"p"},"downward"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/pic%20(1).gif",alt:"pic (1)"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <stdio.h>\n#include <stdlib.h>\n\n/* A statically allocated variable */\nint foo;\n\n/* UNCOMMENT THIS LINE for 3.4.3*/\nextern int recur(int i);\n\n/* A statically allocated, pre-initialized variable */\nvolatile int stuff = 7;\n\nint main(int argc, char* argv[]) {\n  /* A stack allocated variable */\n  volatile int i = 0;\n\n  /* Dynamically allocate some stuff */\n  volatile char* buf1 = malloc(100);\n  /* ... and some more stuff */\n  volatile char* buf2 = malloc(100);\n\n  recur(3);\n  return 0;\n}\n")),(0,r.kt)("p",null,"#0,#1:frame number"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210330193414.png",alt:"20210330193414"})),(0,r.kt)("p",null,"(2)heap"),(0,r.kt)("p",null,"The Heap area is managed by ",(0,r.kt)("inlineCode",{parentName:"p"},"malloc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"realloc"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"free"),"."),(0,r.kt)("p",null,"When you do ",(0,r.kt)("em",{parentName:"p"},"malloc()")," to allocate new things,the heap is going upward."),(0,r.kt)("p",null,"When we run out of memory, the heap and stack run into each other."),(0,r.kt)("p",null,"(3)Uninitialized data(.bss--block started by symbol)"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"\u522b\u540d:",(0,r.kt)("inlineCode",{parentName:"em"},"ZI")," data(ZeroInitialie data)")),(0,r.kt)("p",null,"\u5bf9\u4e8e\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf(\u5168\u5c40 and \u5c40\u90e8)\uff0c\u7a0b\u5e8f\u8fd0\u884c main \u4e4b\u524d\u65f6\u4f1a\u7edf\u4e00\u6e05\u96f6\u3002\u5373\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u7f16\u8bd1\u5668\u4f1a\u521d\u59cb\u5316\u4e3a 0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//\u4e24\u79cd\u5747\u662f\nstatic int i;\nint j;\n")),(0,r.kt)("p",null,"(4)Initialized data(.data)"),(0,r.kt)("p",null,"\u5b58\u50a8\u7a0b\u5e8f\u4e2d\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf(\u5168\u5c40 and \u5c40\u90e8)"),(0,r.kt)("p",null,"\u8fdb\u4e00\u6b65\u53ef\u5206\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"RO"),"(read-only area) and ",(0,r.kt)("inlineCode",{parentName:"p"},"RW"),"(read-write area)--\u5b57\u7b26\u4e32\u5e38\u91cf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"char s[] = \u201chello world\u201d;//RW\ndebug=1 ;//RW\nconst char* string = \u201chello world\u201d ;\n//\u201chello world\u201d--RO ,character pointer variable string --RW\nint main(){}\n")),(0,r.kt)("p",null,"(5)text segment(.text)"),(0,r.kt)("p",null,"Contains the code to be executed(read only)"),(0,r.kt)("h3",{id:"\u5168\u5c40\u533a"},"\u5168\u5c40\u533a"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5168\u5c40\u533a(static)\uff1a\u4e5f\u53eb\u9759\u6001\u6570\u636e\u5185\u5b58\u7a7a\u95f4\uff0c\u5b58\u50a8\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\uff0c\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u7684\u5b58\u50a8\u662f\u653e\u4e00\u5757\u7684\uff0c\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u653e\u4e00\u5757\u533a\u57df\uff0c\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5728\u76f8\u90bb\u7684\u53e6\u4e00\u5757\u533a\u57df\uff0c\u7a0b\u5e8f\u7ed3\u675f\u540e\u7531\u7cfb\u7edf\u91ca\u653e\u3002(\u4e0d\u5305\u542b\u5e38\u91cf)")),(0,r.kt)("p",null,"Thus,\n",(0,r.kt)("inlineCode",{parentName:"p"},"\u7c7b\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\u672c\u8d28\u4e0a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u54ea\u6015\u4e00\u4e2a\u5bf9\u8c61\u90fd\u4e0d\u5b58\u5728\uff0c\u7c7b\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e5f\u5b58\u5728")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"\u7c7b\u7684\u9759\u6001\u6210\u5458\u51fd\u6570\u672c\u8d28\u4e0a\u662f\u5168\u5c40\u51fd\u6570")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"\u53ea\u662f\u5176\u4f5c\u7528\u57df\u4e3a\u5c40\u90e8\u4f5c\u7528\u57df")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//main.cpp \u7a0b\u5e8f\u4ee3\u7801\u533a\nint a = 0; //\u5168\u5c40\u521d\u59cb\u5316\u533a\nchar *p1; //\u5168\u5c40\u672a\u521d\u59cb\u5316\u533a\nmain()\n{\n    int b; //\u6808\n    char s[] = "abc"; //\u6808\n    char *p2; //\u6808\n    char *p3 = "123456"; //123456\\0\u5728\u5e38\u91cf\u533a\uff0cp3\u5728\u6808\u4e0a\u3002\n    static int c =0\uff1b //\u5168\u5c40\uff08\u9759\u6001\uff09\u521d\u59cb\u5316\u533a\n    p1 = (char *)malloc(10);\n    p2 = (char *)malloc(20); //\u5206\u914d\u5f97\u6765\u5f9710\u548c20\u5b57\u8282\u7684\u533a\u57df\u5c31\u5728\u5806\u533a\u3002\n    strcpy(p1, "123456"); //123456\\0\u653e\u5728\u5e38\u91cf\u533a\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u5c06\u5b83\u4e0ep3\u6240\u6307\u5411\u7684"123456"\u4f18\u5316\u6210\u4e00\u4e2a\u5730\u65b9\u3002\n}\n')),(0,r.kt)("h2",{id:"from-souce-code-to-executable"},"From souce code to executable"),(0,r.kt)("h3",{id:"preprocess"},"Preprocess"),(0,r.kt)("p",null,"Convert the source code file into a modified/expanded source code file"),(0,r.kt)("p",null,"3 things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Macro substitution"),(0,r.kt)("li",{parentName:"ul"},"Comments are stripped off"),(0,r.kt)("li",{parentName:"ul"},"Expansion of the included files")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcc -E map.c\n")),(0,r.kt)("h3",{id:"compilation"},"Compilation"),(0,r.kt)("p",null,"\u751f\u6210\u6c47\u7f16\u6307\u4ee4\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcc -S map.c -o map.S\ngcc -S recurse.c -o recurse.S\n")),(0,r.kt)("h3",{id:"assembly"},"Assembly"),(0,r.kt)("p",null,"At this stage only the existing code is converted into machine language, the function calls like printf() are not resolved."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcc -c map.c -o map\ngcc -c recurse.c -o recurse\n")),(0,r.kt)("h3",{id:"link"},"Link"),(0,r.kt)("p",null,"link together a bunch of object files (.o files) into a binary executable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gcc recurse map -o map.o\n")))}s.isMDXComponent=!0}}]);