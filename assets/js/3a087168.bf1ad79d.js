"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[4789],{6793:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>k,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var a=l(7462),i=(l(7294),l(3905));l(1839);const n={},r="4 File System",o={unversionedId:"cs/Operating_System/OS_4",id:"cs/Operating_System/OS_4",title:"4 File System",description:"Basic",source:"@site/docs/cs/Operating_System/OS_4.md",sourceDirName:"cs/Operating_System",slug:"/cs/Operating_System/OS_4",permalink:"/docs/cs/Operating_System/OS_4",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/cs/Operating_System/OS_4.md",tags:[],version:"current",frontMatter:{},sidebar:"cs",previous:{title:"3 Scheduling",permalink:"/docs/cs/Operating_System/OS_3"},next:{title:"1 HTML&CSS",permalink:"/docs/cs/webDevelop/web_1"}},s={},u=[{value:"Basic",id:"basic",level:2},{value:"Data Structure of File system",id:"data-structure-of-file-system",level:3},{value:"File Storage on Disk",id:"file-storage-on-disk",level:3},{value:"Directory Structure",id:"directory-structure",level:2},{value:"File Allocation",id:"file-allocation",level:2},{value:"Contiguous Allocation",id:"contiguous-allocation",level:3},{value:"Linked List Allocation",id:"linked-list-allocation",level:3},{value:"Indexed Allocation",id:"indexed-allocation",level:3}],c={toc:u};function k(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"4-file-system"},"4 File System"),(0,i.kt)("h2",{id:"basic"},"Basic"),(0,i.kt)("h3",{id:"data-structure-of-file-system"},"Data Structure of File system"),(0,i.kt)("p",null,"Directory Structure: "),(0,i.kt)("p",null,"A directory is a file containing <file_name:file_number> mappings(each called a directory entry)"),(0,i.kt)("p",null,'File (and directory) defined by header, called "inode"(i = index)'),(0,i.kt)("p",null,"Each inode contains file attributes (permissions, timestamps, owner) and the index blocks"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230313212759.png",alt:"20230313212759"})),(0,i.kt)("p",null,"Open performs ",(0,i.kt)("strong",{parentName:"p"},"Name Resolution"),": Translates path name into file number"),(0,i.kt)("p",null,"Read and Write operate on the ",(0,i.kt)("em",{parentName:"p"},"file number")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230313214926.png",alt:"20230313214926"})),(0,i.kt)("h3",{id:"file-storage-on-disk"},"File Storage on Disk"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230313213841.png",alt:"20230313213841"})),(0,i.kt)("p",null,"Super Block"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"number of blocks"),(0,i.kt)("li",{parentName:"ul"},"size of data blocks"),(0,i.kt)("li",{parentName:"ul"},"free-block count"),(0,i.kt)("li",{parentName:"ul"},"location of the file descriptor of the root directory")),(0,i.kt)("h2",{id:"directory-structure"},"Directory Structure"),(0,i.kt)("p",null,"To acclerate the process of finding a file and enable sharing, use DAG"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230313220501.png",alt:"20230313220501"})),(0,i.kt)("p",null,"Hard Links and Symbolic Links"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Hard links: Both directory entries point to the same inode",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The file may have a different name in each directory"))),(0,i.kt)("li",{parentName:"ul"},'Symbolic links: One directory entry points to the file\u2019s inode, Other directory entries contains the "path"',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"inode different")))),(0,i.kt)("p",null,'7 disk accesses to resolve "/my/book/count"'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Read in file header for root (fixed position on disk)"),(0,i.kt)("li",{parentName:"ul"},'Read in first data block for root, search for "my"'),(0,i.kt)("li",{parentName:"ul"},'Read in file header for "my"'),(0,i.kt)("li",{parentName:"ul"},'Read in first data block for "my"; search for "book"'),(0,i.kt)("li",{parentName:"ul"},'Read in file header for "book"'),(0,i.kt)("li",{parentName:"ul"},'Read in first data block for "book"; search for "count"'),(0,i.kt)("li",{parentName:"ul"},'Read in file header for "count"')),(0,i.kt)("h2",{id:"file-allocation"},"File Allocation"),(0,i.kt)("h3",{id:"contiguous-allocation"},"Contiguous Allocation"),(0,i.kt)("p",null,"All blocks in a file are contiguous on the disk, Search bit map or linked list to locate a space"),(0,i.kt)("p",null,"File header: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"first sector in file"),(0,i.kt)("li",{parentName:"ul"},"number of sectors")),(0,i.kt)("p",null,"Pros"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Simple to implement (only needs starting block & length of file)"),(0,i.kt)("li",{parentName:"ul"},"Fast sequential access"),(0,i.kt)("li",{parentName:"ul"},"Easy random access")),(0,i.kt)("p",null,"Cons"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"External fragmentation"),(0,i.kt)("li",{parentName:"ul"},"hard to grow files when new file is inserted into a hole")),(0,i.kt)("h3",{id:"linked-list-allocation"},"Linked List Allocation"),(0,i.kt)("p",null,"Each file is a sequence of blocks. File header points to 1st block on disk, each block points to next"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230317204648.png",alt:"20230317204648"})),(0,i.kt)("p",null,"Pro"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No external fragmentation"),(0,i.kt)("li",{parentName:"ul"},"easy to grow files")),(0,i.kt)("p",null,"Cons"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"bad random access"),(0,i.kt)("li",{parentName:"ul"},"unreliable: losing a block means losing the rest")),(0,i.kt)("p",null,"Variation: File Allocation Table(FAT)"),(0,i.kt)("p",null,"FAT is linked list 1-1 with blocks, follow list to get block number, unused blocks marked free"),(0,i.kt)("p",null,"Ex: file_write 31, < 3, y > (y: offset within block)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Grab free block"),(0,i.kt)("li",{parentName:"ul"},"Linking them into file")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230319212139.png",alt:"20230319212139"})),(0,i.kt)("p",null,"FAT directory: Directory entry needs only the starting block number"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230319215117.png",alt:"20230319215117"})),(0,i.kt)("p",null,'Format a disk: Zero the blocks, mark FAT entries "free"'),(0,i.kt)("p",null,'Quick format: Mark FAT entries "free"'),(0,i.kt)("p",null,"Used in MS-DOS"),(0,i.kt)("p",null,"Pros:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Easy to delete a file"),(0,i.kt)("li",{parentName:"ul"},"Easy to append to a file")),(0,i.kt)("p",null,"Cons:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Small file access slow(seek time latency between blocks)"),(0,i.kt)("li",{parentName:"ul"},"Random access slow(sequential search)"),(0,i.kt)("li",{parentName:"ul"},"memory overhead",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"20 GB disk size, 1 KB block size, 4 bytes FAT entry size. Need 80MB to store FAT")))),(0,i.kt)("h3",{id:"indexed-allocation"},"Indexed Allocation"),(0,i.kt)("p",null,"Berkeley F(Fast)FS / UNIX FS"),(0,i.kt)("p",null,"inode"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Metadata(File owner, access permissions, access times, \u2026)"),(0,i.kt)("li",{parentName:"ul"},"Small Files: 12 Direct pointers With 4KB blocks => max size of 48KB files"),(0,i.kt)("li",{parentName:"ul"},"Large Files: Indirect block pointers, each block supports 1K ptrs",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"indirected block pointer => max 4 MB"),(0,i.kt)("li",{parentName:"ul"},"Doubly indirected block pointer => max 4 GB"),(0,i.kt)("li",{parentName:"ul"},"Triply indirected block pointer => max 4 TB")))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230319215757.png",alt:"20230319215757"})),(0,i.kt)("p",null,"Pros"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Efficient storage for both small and large files"),(0,i.kt)("li",{parentName:"ul"},"Locality for both small and large files"),(0,i.kt)("li",{parentName:"ul"},"Locality for metadata and data"),(0,i.kt)("li",{parentName:"ul"},"No defragmentation necessary!")),(0,i.kt)("p",null,"Cons"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inefficient for tiny files (a 1 byte file requires both an inode and a data block)"),(0,i.kt)("li",{parentName:"ul"},"Inefficient encoding when file is mostly contiguous on disk"),(0,i.kt)("li",{parentName:"ul"},"Need to reserve 10-20% of free space to prevent fragmentation")))}k.isMDXComponent=!0}}]);