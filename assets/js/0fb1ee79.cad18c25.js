"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[6757],{6137:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(8209);const l={},o="3 Exceptions & IO",s={unversionedId:"Language/Java/Java_3",id:"Language/Java/Java_3",title:"3 Exceptions & IO",description:"Exception",source:"@site/docs/Language/Java/Java_3.md",sourceDirName:"Language/Java",slug:"/Language/Java/Java_3",permalink:"/docs/Language/Java/Java_3",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Language/Java/Java_3.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"2 Collection",permalink:"/docs/Language/Java/Java_2"},next:{title:"4 Concurrency",permalink:"/docs/Language/Java/Java_4"}},u={},p=[{value:"Exception",id:"exception",level:2},{value:"The try-catch mechanism",id:"the-try-catch-mechanism",level:3},{value:"throw and throws",id:"throw-and-throws",level:3},{value:"throw Inheritance",id:"throw-inheritance",level:3},{value:"IO",id:"io",level:2},{value:"Byte Streams",id:"byte-streams",level:3},{value:"Character Streams",id:"character-streams",level:3},{value:"Java.nio",id:"javanio",level:3}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"3-exceptions--io"},"3 Exceptions & IO"),(0,r.kt)("h2",{id:"exception"},"Exception"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Checked: Must be Caught or Declared to be Thrown(Green One)"),(0,r.kt)("li",{parentName:"ul"},"Unchecked: no such restrictions(code below compile just fine)")),(0,r.kt)(i.G,{chart:"graph LR;\n\tArithmeticException--\x3eRuntimeException;\n\tClassCastException--\x3eRuntimeException;\n\tIllegalArgumentException--\x3eRuntimeException;\n\tIllegalStateException--\x3eRuntimeException;\n\tIndexOutOfBoundsException--\x3eRuntimeException;\n\tNoSuchElementException--\x3eRuntimeException;\n\tNullPointerException--\x3eRuntimeException;\n\tClassNotFoundException--\x3eException;\n\tCloneNotSupportedException--\x3eException;\n\tid1(IOException)--\x3eException;\n    RuntimeException--\x3eException;\n    Exception--\x3eThrowable;\n    Error--\x3eThrowable;\n\tstyle id1 fill:#0cdf19",mdxType:"Mermaid"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Throwable implements Serializable{\n    Throwable();\n    Throwable(String message);//Constructs a new throwable with the specified detail message.\n    String getMessage();//Returns the detail message string of this throwable\n    String toString();//Returns a short description of this throwable.\n    void printStackTrace();\n    void printStackTrace(PrintStream s);\n}\n")),(0,r.kt)("h3",{id:"the-try-catch-mechanism"},"The try-catch mechanism"),(0,r.kt)("p",null,"The try-with-resources Statement"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The try-with-resources statement ensures that each resource is closed at the end of the statement"),(0,r.kt)("li",{parentName:"ul"},"The resource can be put here must implements AutoCloseable")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"//FileReader and BufferedReader are resources\nString readFirstLineFromFile(String path) throws IOException {\n    try (FileReader fr = new FileReader(path);\n            BufferedReader br = new BufferedReader(fr)) {\n        return br.readLine();\n    }\n}   \n")),(0,r.kt)("p",null,"When an exception is thrown, it descends the call stack."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20221030173316.png",alt:"20221030173316"})),(0,r.kt)("p",null,"In Java SE 7 and later, a single catch block can handle more than one type of exception. This feature can reduce code duplication and lessen the temptation to catch an overly broad exception."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"catch (IOException|SQLException ex) {\n    logger.log(ex);\n    throw ex;\n}\n")),(0,r.kt)("h3",{id:"throw-and-throws"},"throw and throws"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can claim to throw an Exception that you really don't"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"throws"),": Anyone call your funcition must catch it or declare to throw this exception.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'throw new Exception("Help");//\u7948\u4f7f\u53e5\npublic void f()throws SException,IOExption{}//\u9648\u8ff0\u53e5\u4e09\u5355\npublic void writeList() throws IOException{//IndexOutOfBoundsException is unchecked\n    PrintWriter out = new PrintWriter(new FileWriter("OutFile.txt"));\n    for (int i = 0; i < SIZE; i++) {\n        out.println("Value at: " + i + " = " + list.get(i));\n    }\n    out.close();\n}\n')),(0,r.kt)("h3",{id:"throw-inheritance"},"throw Inheritance"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u6210\u5458\u51fd\u6570:\u7236\u7c7b\u548c\u63a5\u53e3\u7684\u4ea4\u96c6")),(0,r.kt)("p",null,"When you overide a method, you can only throw the exceptions that have beeen specified in the ",(0,r.kt)("em",{parentName:"p"},"base-class")," version of the method."),(0,r.kt)("p",null,"\u53cd\u8bc1: Polymorphism"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class A{\n    void f()throws ExceptionA;\n}\nclass B extends A{\n    void f()throws ExceptionaA,ExceptionB;\n}\nvoid process(A p){\n    try{\n        p.f();//Compile\u8fc7\u800cRun Time error,throw B\u65f6A.f()\u4f1a\u6355\u6349\u4e0d\u5230\n    }catch(A a){\n\n    }\n}\nprocess(new B())\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u6784\u9020\u65b9\u6cd5:\u7236\u7c7b\u7684\u8d85\u96c6")),(0,r.kt)("p",null,"\u56e0\u4e3a\u6784\u9020\u65b9\u6cd5\u91cc\u9690\u542b\u8c03\u7528\u4e86 super(); address\u4e86\u7236\u7c7b\u53ef\u4ee5\u518d\u52a0\u81ea\u5df1\u7684"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class BaseballException extends Exception{}\nclass Foul extends BaseballException{}\nclass Strike extends BaseballException{}\n\nabstract class Inning{\n    Inning() throws BaseballException{}\n    abstract void atBat() throws Strike, Foul;\n    void walk(){} \n}\n\nclass RainedOut extends Exception{}\nclass PopFoul extends Foul{}\n\ninterface Storm{\n    void event()throws RainedOut;\n}\n\npublic class StormInning extends Inning implements Storm{\n    StormInning() throws RainedOut,BaseballException;\n    StormInning(String s) throws Foul,BaseballException;\n    void walk()throws PopFoul{}// Compile Error\n    void atBat()throws PopFoul{} // call stack, ok\n}\n")),(0,r.kt)("h2",{id:"io"},"IO"),(0,r.kt)("h3",{id:"byte-streams"},"Byte Streams"),(0,r.kt)(i.G,{chart:"graph LR;\n\tDataInputStream--\x3eFilterInputStream;\n\tBufferedInputStream--\x3eFilterInputStream;\n\tFilterInputStream--\x3eInputStream;\n\tPipedInputStream--\x3eInputStream;\n\tByteArrayInputStream--\x3eInputStream;\n\tFileInputStream--\x3eInputStream;\n\tPrintStream--\x3eFilterOutputStream;\n\tFilterOutputStream--\x3eOutputStream;",mdxType:"Mermaid"}),(0,r.kt)("p",null,"CopyBytes spends most of its time in a simple loop that reads the input stream and writes the output stream, one byte at a time. The best approach is to use character streams"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230424102059.png",alt:"20230424102059"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"InputStream")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"read()",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"int read()"),(0,r.kt)("li",{parentName:"ul"},"int read(byte b[])"),(0,r.kt)("li",{parentName:"ul"},"int read(byte b[],int off,int len): Reads up to len bytes of data from the input stream into an array of bytes. The first byte would be stored into b","[off]",". "))),(0,r.kt)("li",{parentName:"ul"},"skip(long n)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"OutputStream")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"write()",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"write(int b)"),(0,r.kt)("li",{parentName:"ul"},"write(byte b[]);"),(0,r.kt)("li",{parentName:"ul"},"write(byte b[],int off,int len)"))),(0,r.kt)("li",{parentName:"ul"},"flush(): Flushes this output stream and forces any buffered output bytes to be written out")),(0,r.kt)("h3",{id:"character-streams"},"Character Streams"),(0,r.kt)("p",null,"Reader\u3001Writer Method\u540cInputStream/OutputStream"),(0,r.kt)(i.G,{chart:"graph LR;\n\tBufferedReader--\x3eReader;\n\tFileReader--\x3eInputStreamReader;\n\tInputStreamReader--\x3eReader;\n\tStringReader--\x3eReader;\n\tPipedReader--\x3eReader;\n\tPrintWriter--\x3eWriter;",mdxType:"Mermaid"}),(0,r.kt)("p",null,"Line-Oriented I/O"),(0,r.kt)("p",null,"BufferedReader: String readLine()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'try(\n    BufferedReader inputStream = new BufferedReader(new FileReader("xanadu.txt"));\n    PrintWriter outputStream = new PrintWriter(new FileWriter("characteroutput.txt");\n) {\n    while ((String l = inputStream.readLine()) != null) {\n        outputStream.println(l); // PrintWriter object autoflushes the buffer on every invocation of println or format.\n    }\n}\n')),(0,r.kt)("p",null,'Character streams are often "wrappers" for byte streams '),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"FileReader wraps FileInputStream, FileWriter wraps FileOutputStream"),(0,r.kt)("li",{parentName:"ul"},'Two general-purpose byte-to-character "bridge" streams: InputStreamReader and OutputStreamWriter')),(0,r.kt)("p",null,"The Standard Streams(System.in, System.out, System.err) are byte streams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"//Transform Standard Input/Output into a character stream\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\nBufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));\n")),(0,r.kt)("h3",{id:"javanio"},"Java.nio"),(0,r.kt)("p",null,"nio = new/Non-blocking IO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using methods in java.io, threads will block while waiting for a stream or buffer."),(0,r.kt)("li",{parentName:"ul"},"java.nio will not block")))}m.isMDXComponent=!0}}]);