"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[8390],{6065:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var s=t(7462),i=(t(7294),t(3905));t(8209);const r={},c="Leetcode 334 Increasing Triplet Subsequence",o={unversionedId:"OJ/Leetcode334",id:"OJ/Leetcode334",title:"Leetcode 334 Increasing Triplet Subsequence",description:"Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.",source:"@site/docs/OJ/Leetcode334.md",sourceDirName:"OJ",slug:"/OJ/Leetcode334",permalink:"/docs/OJ/Leetcode334",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/OJ/Leetcode334.md",tags:[],version:"current",frontMatter:{},sidebar:"OJ",previous:{title:"leetcode1348 Tweet Counts Per Frequency",permalink:"/docs/OJ/Leetcode1348"},next:{title:"Leetcode4",permalink:"/docs/OJ/Leetcode4"}},u={},a=[{value:"Analysis",id:"analysis",level:2},{value:"Solution",id:"solution",level:2}],l={toc:a};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,s.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"leetcode-334-increasing-triplet-subsequence"},"Leetcode 334 Increasing Triplet Subsequence"),(0,i.kt)("p",null,"Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums","[i]"," < nums","[j]"," < nums","[k]",". If no such indices exists, return false."),(0,i.kt)("h2",{id:"analysis"},"Analysis"),(0,i.kt)("p",null,"\u5f88\u50cfLongest Increasing Subsequence\uff0c\u4f46\u9650\u5b9a\u4e863\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u628alower_bound \u6362\u6210\u5355\u72ec\u5143\u7d20->O(1)"),(0,i.kt)("p",null,"\u4ece\u65b9\u6cd5\u4e0a\u770b\uff0c\u90fd\u662f\u91c7\u7528\u8d2a\u5fc3\u7b56\u7565\uff0c\u8ba9\u524d\u9762\u7684\u5143\u7d20\u5c3d\u53ef\u80fd\u5c0f"),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool increasingTriplet(vector<int>& nums) {\n    int n = nums.size();\n    int first = nums[0],second = INT_MAX;\n    for(int &p:nums){\n        if(p>second) return true;\n        else if(p>first) second = p;\n        else first = p;\n    }\n    return false;\n}\n")))}d.isMDXComponent=!0}}]);