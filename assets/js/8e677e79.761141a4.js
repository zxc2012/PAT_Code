"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[7628],{1300:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var n=s(7462),r=(s(7294),s(3905));s(1839);const a={},o="Leetcode 93 Restore IP Addresses",d={unversionedId:"OJ/Leetcode93",id:"OJ/Leetcode93",title:"Leetcode 93 Restore IP Addresses",description:"\u9898\u76ee",source:"@site/docs/OJ/Leetcode93.md",sourceDirName:"OJ",slug:"/OJ/Leetcode93",permalink:"/docs/OJ/Leetcode93",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/OJ/Leetcode93.md",tags:[],version:"current",frontMatter:{},sidebar:"OJ",previous:{title:"Leetcode4",permalink:"/docs/OJ/Leetcode4"},next:{title:"PAT1123 Is It a Complete AVL Tree",permalink:"/docs/OJ/PAT1123"}},i={},c=[],l={toc:c};function p(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"leetcode-93-restore-ip-addresses"},"Leetcode 93 Restore IP Addresses"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/restore-ip-addresses/"},"\u9898\u76ee")),(0,r.kt)("p",null,"Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order."),(0,r.kt)("p",null,'A valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses and "0.011.255.245", "192.168.1.312" and "',(0,r.kt)("a",{parentName:"p",href:"mailto:192.168@1.1"},"192.168@1.1"),'" are invalid IP addresses.\xa0'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<string> restoreIpAddresses(string s) {\n    int n=s.size();\n    vector<string> ans;\n    for(int a=1;a<=3;++a)for(int b=1;b<=3;++b)for(int c=1;c<=3;++c)\n    for(int d=1;d<=4;++d){\n        if(a+b+c+d==n){\n            int A=stoi(s.substr(0,a));\n            int B=stoi(s.substr(a,b));\n            int C=stoi(s.substr(a+b,c));\n            int D=stoi(s.substr(a+b+c,d));\n            if(A<=255&&B<=255&&C<=255&&D<=255){\n                string temp=to_string(A)+'.'+to_string(B)+'.'+to_string(C)+'.'+to_string(D);\n                if(temp.size()==n+3)ans.push_back(temp);\n            }\n        }\n    }\n    return ans;\n}\n")))}p.isMDXComponent=!0}}]);