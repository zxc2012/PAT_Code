"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[6083],{2690:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var t=n(7462),r=(n(7294),n(3905));n(1839);const i={},l="2 Data Science",p={unversionedId:"Language/Python/2",id:"Language/Python/2",title:"2 Data Science",description:"Numpy",source:"@site/docs/Language/Python/2.md",sourceDirName:"Language/Python",slug:"/Language/Python/2",permalink:"/docs/Language/Python/2",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Language/Python/2.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"1 Python Basic",permalink:"/docs/Language/Python/1"},next:{title:"Build and Test Tools",permalink:"/docs/Language/Tools"}},o={},d=[{value:"Numpy",id:"numpy",level:2},{value:"Basic operation",id:"basic-operation",level:3},{value:"Advanced Indexing",id:"advanced-indexing",level:3},{value:"Deep copy",id:"deep-copy",level:3},{value:"Pandas",id:"pandas",level:2},{value:"Maplotlib",id:"maplotlib",level:2}],s={toc:d};function u(a){let{components:e,...n}=a;return(0,r.kt)("wrapper",(0,t.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2-data-science"},"2 Data Science"),(0,r.kt)("h2",{id:"numpy"},"Numpy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Slice",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"np.arrange(start,stop,step)"),(0,r.kt)("li",{parentName:"ul"},"np.linspace(start,stop,num)"))),(0,r.kt)("li",{parentName:"ul"},"Random",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"uniform: np.random.randint(low,high,size)"),(0,r.kt)("li",{parentName:"ul"},"standard normal: np.random.randn(d1,d2,...)"))),(0,r.kt)("li",{parentName:"ul"},"max,min",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"argmax, argmin return the indices of the maximum/minimum values")))),(0,r.kt)("h3",{id:"basic-operation"},"Basic operation"),(0,r.kt)("p",null,"elementwise vs dot"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = np.array([20, 30, 40, 50])\nb = np.arange(4)\nc = a + b # Matrix\nprint(c) # [20 31 42 53]\nprint(a*b) # [0 30 80 150]\nprint(a.dot(b)) # 260\n")),(0,r.kt)("h3",{id:"advanced-indexing"},"Advanced Indexing"),(0,r.kt)("p",null,"Index by arrays of indices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = np.arange(12)**2  # the first 12 square numbers\ni = np.array([1, 1, 3, 8, 5])  # an array of indices\nprint(a[i])  # array([ 1,  1,  9, 64, 25])\nj = np.array([[3, 4], [9, 7]])  # a bidimensional array of indices\nprint(a[j])  # array([[ 9, 16],[81, 49]])\n")),(0,r.kt)("p",null,"Index by boolean arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = np.arange(12).reshape(3, 4)\na[a>4] = 0 # 0 is a matrix\nprint(a) # array([[0, 1, 2, 3],[4, 0, 0, 0],[0, 0, 0, 0]])\n")),(0,r.kt)("h3",{id:"deep-copy"},"Deep copy"),(0,r.kt)("p",null,"If a = b, that's only a reference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = np.arange(int(1e8))\nb = a[:100].copy()\ndel a  # the memory of ``a`` can be released.\n")),(0,r.kt)("h2",{id:"pandas"},"Pandas"),(0,r.kt)("h2",{id:"maplotlib"},"Maplotlib"))}u.isMDXComponent=!0}}]);