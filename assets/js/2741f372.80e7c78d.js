"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[4514],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>k});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=l.createContext({}),p=function(e){var t=l.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=p(e.components);return l.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,u=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),c=p(a),k=n,d=c["".concat(u,".").concat(k)]||c[k]||m[k]||r;return a?l.createElement(d,i(i({ref:t},o),{},{components:a})):l.createElement(d,i({ref:t},o))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=c;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<r;p++)i[p]=a[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2539:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var l=a(7462),n=(a(7294),a(3905));const r={},i="CS186 Lecture1 --Relational Model & SQL",s={unversionedId:"cs/cs186_1",id:"cs/cs186_1",title:"CS186 Lecture1 --Relational Model & SQL",description:"course website",source:"@site/docs/cs/cs186_1.md",sourceDirName:"cs",slug:"/cs/cs186_1",permalink:"/docs/cs/cs186_1",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/cs/cs186_1.md",tags:[],version:"current",frontMatter:{},sidebar:"cs",previous:{title:"CS162 Lecture3 --Scheduling",permalink:"/docs/cs/cs162_3"},next:{title:"Data Models",permalink:"/docs/cs/cs186_2"}},u={},p=[{value:"Relational Algebra",id:"relational-algebra",level:2},{value:"Six basic operators",id:"six-basic-operators",level:3},{value:"Additional operations",id:"additional-operations",level:3},{value:"SQL",id:"sql",level:2},{value:"Create",id:"create",level:3},{value:"Queries",id:"queries",level:3},{value:"Function",id:"function",level:3},{value:"Modification",id:"modification",level:3},{value:"Null",id:"null",level:3},{value:"Integrity constraints",id:"integrity-constraints",level:3}],o={toc:p};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,l.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"cs186-lecture1---relational-model--sql"},"CS186 Lecture1 --Relational Model & SQL"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://cs186berkeley.net/"},"course website")),(0,n.kt)("h2",{id:"relational-algebra"},"Relational Algebra"),(0,n.kt)("h3",{id:"six-basic-operators"},"Six basic operators"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"select $\\sigma$"),(0,n.kt)("li",{parentName:"ul"},"project  $\\Pi$"),(0,n.kt)("li",{parentName:"ul"},"union $\\cup$"),(0,n.kt)("li",{parentName:"ul"},"set difference $-$"),(0,n.kt)("li",{parentName:"ul"},"Cartesian product(\u7b1b\u5361\u5c14\u79ef) $\\times$"),(0,n.kt)("li",{parentName:"ul"},"rename $\\rho$")),(0,n.kt)("h3",{id:"additional-operations"},"Additional operations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"set intersection $\\cap$"),(0,n.kt)("li",{parentName:"ul"},"natural join $\\Join$"),(0,n.kt)("li",{parentName:"ul"},"assignment $\\leftarrow$"),(0,n.kt)("li",{parentName:"ul"},"outerjoin \u27d7 \u27d5 \u27d6")),(0,n.kt)("h2",{id:"sql"},"SQL"),(0,n.kt)("p",null,"SQL (sequel/structured query language)"),(0,n.kt)("h3",{id:"create"},"Create"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Database"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"set of named Relations"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Relation"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Schema(description/metadata):",(0,n.kt)("strong",{parentName:"li"},"unique attribute names"),",",(0,n.kt)("strong",{parentName:"li"},"atomic types")),(0,n.kt)("li",{parentName:"ul"},"Instance:can change very often"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Attribute"),"(Column,Field)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Tuple"),"(Record,Row)")),(0,n.kt)("p",null,"Create "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A:attribute name"),(0,n.kt)("li",{parentName:"ul"},"D:domain type",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"char(n)"),(0,n.kt)("li",{parentName:"ul"},"varchar(n)  Variable length character strings"),(0,n.kt)("li",{parentName:"ul"},"int"),(0,n.kt)("li",{parentName:"ul"},"numeric(p,d) p\u4f4d\u6709\u6548\u6570\u5b57\u5c0f\u6570\u70b9\u540ed\u4f4d"),(0,n.kt)("li",{parentName:"ul"},"float(n) n\u4f4d\u6709\u6548\u6570\u5b57")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"create table table_name(A1 D1,A2 D2,...)\n")),(0,n.kt)("p",null,"Table modification"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"drop table r;\nalter table r add A D;\nalter table r drop A;\n")),(0,n.kt)("h3",{id:"queries"},"Queries"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"select [distinct] <column expression list> from \n<table1 [as t1],table2 [as t2],...>\n[where <predicate>]\n[group by <column list>]\n[having <predicate>]\n[order by <column list>]\n[limit integer];\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Order:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Order by"),"--lexicographic ordering"),(0,n.kt)("li",{parentName:"ul"},"desc for descending,asc for ascending"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Aggregates:"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"avg,sum,count,min,max"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Group by:"),(0,n.kt)("p",{parentName:"li"},"categorize the data(\u5408\u5e76\u5355\u5143\u683c) by a list of columns")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Having:"),(0,n.kt)("p",{parentName:"li"},"predicate filters ",(0,n.kt)("strong",{parentName:"p"},"groups")))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/2021031019304130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MzgwMjMw,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,n.kt)("h3",{id:"function"},"Function"),(0,n.kt)("p",null,"(1)Column Names:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Sailors.sid, sname, bid (if\u65e0\u6b67\u4e49,\u53ef\u53bb\u6389range)")),(0,n.kt)("p",null,"(2)Aliases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Table Aliases: ",(0,n.kt)("strong",{parentName:"li"},"from")," sailors as S, reserves as R",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'needed when the same table used multiple times("self join") '))),(0,n.kt)("li",{parentName:"ul"},"Column Aliases: ",(0,n.kt)("strong",{parentName:"li"},"select")," x.sname as sname2")),(0,n.kt)("p",null,"(3)Arithmetic expressions anywhere you like"),(0,n.kt)("p",null,"(4)String comparisons -- wildcard characters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"where s.sname like 'B_%'",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"_:a single character"),(0,n.kt)("li",{parentName:"ul"},"%:zero or more characters")))),(0,n.kt)("p",null,"(5)Combining predicates"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},",\u968f\u5904\u53ef\u7528")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Where clause",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Boolean logic: ",(0,n.kt)("em",{parentName:"li"},"and"),", ",(0,n.kt)("em",{parentName:"li"},"or"),", and ",(0,n.kt)("em",{parentName:"li"},"not")))),(0,n.kt)("li",{parentName:"ul"},"set operation:(\u56de\u5fc6set\u6570\u636e\u7ed3\u6784)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"union,intersect,except"))),(0,n.kt)("li",{parentName:"ul"},"multiset semantics",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"union:sum of cardinalities"),(0,n.kt)("li",{parentName:"ul"},"intersection all:min of cardinalities"),(0,n.kt)("li",{parentName:"ul"},"except all:difference of cardinalities")))),(0,n.kt)("p",null,"(6)Nested queries"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"(not)",(0,n.kt)("em",{parentName:"li"},"in")," and ",(0,n.kt)("em",{parentName:"li"},"exists")),(0,n.kt)("li",{parentName:"ul"},"op(<,>,=) ",(0,n.kt)("em",{parentName:"li"},"any")," and ",(0,n.kt)("em",{parentName:"li"},"all")," ")),(0,n.kt)("p",null,"\u5d4c\u5957\u5185\u90e8\u53ef\u4ee5\u4f7f\u7528\u5916\u90e8\u53d8\u91cf"),(0,n.kt)("p",null,"example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"select S.name from sailors S\nwhere S.sid in (\n    select R.sid from Reserve R\n    where R.bid=103\n);\n")),(0,n.kt)("p",null,"(7)Join variants"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"select [distinct] <column expression list> from \ntable_name\n[natural|{left|right|full}{outer}]join table_name\non <qualification_list>\nwhere ...\n")),(0,n.kt)("p",null,"(8)Views"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"view",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"create view view_name as (select_statement)"))),(0,n.kt)("li",{parentName:"ul"},"from ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"from b,(select_statement)"))),(0,n.kt)("li",{parentName:"ul"},"with ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"with Reds (bid,scount) as (select_statement)")))),(0,n.kt)("h3",{id:"modification"},"Modification"),(0,n.kt)("p",null,"(1)deletion"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"delete from r where P;\n")),(0,n.kt)("p",null,"(2)insert"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"insert into course \nvalues('cs','database',4);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u4e0d\u8003\u8651\u987a\u5e8f:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"insert into course(departname,title,credits) values();"))),(0,n.kt)("li",{parentName:"ul"},"values\u53ef\u7528select clause\u66ff\u6362")),(0,n.kt)("p",null,"(3)update"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"update instructor\nset salary=salary*1.5\nwhere ...\n")),(0,n.kt)("p",null,"Two set"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"salary =select..."),(0,n.kt)("li",{parentName:"ol"},"case end ")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"set salary =case\n                when pred1 then result1\n                when pred2 then result2\n                else result0\n            end\n            \n")),(0,n.kt)("h3",{id:"null"},"Null"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"x op null is null"),(0,n.kt)("li",{parentName:"ul"},"where null: \u4e0d\u8f93\u51fa(\u5173\u4e8e\u662f\u5426\u4e3anull\u5fc5\u987b\u8003\u8651boolean logic)"),(0,n.kt)("li",{parentName:"ul"},"aggregates ignore null-value inputs")),(0,n.kt)("h3",{id:"integrity-constraints"},"Integrity constraints"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"not null(after A1 D1)"),(0,n.kt)("li",{parentName:"ul"},"primary key(A1,A2,...) or A1 D1 primary key"),(0,n.kt)("li",{parentName:"ul"},"foreign key(A1,A2,...) references relation_name"),(0,n.kt)("li",{parentName:"ul"},"unique(A1,A2,...) A1, A2,...form a candidate key"),(0,n.kt)("li",{parentName:"ul"},"check(semester in ('Fall', 'Winter', 'Spring', 'Summer'))")))}m.isMDXComponent=!0}}]);