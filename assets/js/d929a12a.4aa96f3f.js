"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[2076],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=s(n),u=i,m=f["".concat(c,".").concat(u)]||f[u]||d[u]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6116:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={},a="PAT1123 Is It a Complete AVL Tree",l={unversionedId:"OJ/PAT1123",id:"OJ/PAT1123",title:"PAT1123 Is It a Complete AVL Tree",description:"1123 Is It a Complete AVL Tree (30\u5206)",source:"@site/docs/OJ/PAT1123.md",sourceDirName:"OJ",slug:"/OJ/PAT1123",permalink:"/docs/OJ/PAT1123",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/OJ/PAT1123.md",tags:[],version:"current",frontMatter:{},sidebar:"OJ",previous:{title:"Leetcode 93 Restore IP Addresses",permalink:"/docs/OJ/Leetcode93"},next:{title:"PAT1141 PAT Ranking of Institutions (25 \u5206)",permalink:"/docs/OJ/PAT1141"}},c={},s=[{value:"1123 Is It a Complete AVL Tree (30\u5206)",id:"1123-is-it-a-complete-avl-tree-30\u5206",level:3}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pat1123-is-it-a-complete-avl-tree"},"PAT1123 Is It a Complete AVL Tree"),(0,i.kt)("h3",{id:"1123-is-it-a-complete-avl-tree-30\u5206"},"1123 Is It a Complete AVL Tree (30\u5206)"),(0,i.kt)("p",null,"\u5b58\u4e00\u4e2a\u6a21\u677f\uff0c\u4ee5\u540e\u80cc\u8fd9\u4e2a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n    int data;\n    node* left;\n    node* right;\n};\nstruct sq{int i,data;};\nvector<sq> v;\nbool cmp(sq& a,sq& b){return a.i<b.i;}\nnode* l(node* tree){\n    node* temp=tree->right;\n    tree->right=temp->left;\n    temp->left=tree;\n    return temp;\n}\nnode* r(node* tree){\n    node* temp=tree->left;\n    tree->left=temp->right;\n    temp->right=tree;\n    return temp;\n}\nnode* lr(node* tree){\n    tree->left=l(tree->left);\n    return r(tree);\n}\nnode* rl(node* tree){\n    tree->right=r(tree->right);\n    return l(tree);\n}\nint height(node* tree){\n    if(tree==NULL)return 0;\n    int l=height(tree->left);\n    int r=height(tree->right);\n    return max(l,r)+1;\n}\nnode* insert(node* tree,int v){\n    if(tree==NULL){\n        tree=new node();\n        tree->data=v;\n    }\n    else if(v<tree->data){\n        tree->left=insert(tree->left,v);\n        if(height(tree->left)-height(tree->right)>=2){\n            if(v<tree->left->data)tree=r(tree);\n            else tree=lr(tree);\n        }\n    }\n    else{\n        tree->right=insert(tree->right,v);\n        if(height(tree->right)-height(tree->left)>=2){\n            if(v>tree->right->data)tree=l(tree);\n            else tree=rl(tree);\n        }\n    }\n    return tree;\n}\nvoid dfs(node* tree,int i){\n    if(tree==NULL)return ;\n    v.push_back({i,tree->data});\n    dfs(tree->left,2*i);\n    dfs(tree->right,2*i+1);\n}\nint main(){\n    int n,i,m,judge=1;\n    scanf("%d",&n);node* tree=NULL;\n    for(i=0;i<n;++i){\n        scanf("%d",&m);\n        tree=insert(tree,m);\n    }\n    dfs(tree,1);\n    sort(v.begin(),v.end(),cmp);\n    for(i=0;i<v.size();++i){\n        printf("%d",v[i].data);\n        judge=i!=0&&v[i].i!=v[i-1].i+1?0:judge;\n        if(i!=v.size()-1)printf(" ");\n    }\n    if(judge==1)printf("\\nYES");\n    else printf("\\nNO");\n    return 0;\n}\n')))}d.isMDXComponent=!0}}]);