"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[4469],{5162:(n,e,t)=>{t.d(e,{Z:()=>l});var i=t(7294),r=t(6010);const a="tabItem_Ymn6";function l(n){let{children:e,hidden:t,className:l}=n;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,l),hidden:t},e)}},4866:(n,e,t)=>{t.d(e,{Z:()=>y});var i=t(7462),r=t(7294),a=t(6010),l=t(2466),s=t(6550),u=t(1980),o=t(7392),m=t(12);function c(n){return function(n){var e;return(null==(e=r.Children.map(n,(n=>{if(!n||(0,r.isValidElement)(n)&&function(n){const{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:e.filter(Boolean))??[]}(n).map((n=>{let{props:{value:e,label:t,attributes:i,default:r}}=n;return{value:e,label:t,attributes:i,default:r}}))}function p(n){const{values:e,children:t}=n;return(0,r.useMemo)((()=>{const n=e??c(t);return function(n){const e=(0,o.l)(n,((n,e)=>n.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(n),n}),[e,t])}function d(n){let{value:e,tabValues:t}=n;return t.some((n=>n.value===e))}function h(n){let{queryString:e=!1,groupId:t}=n;const i=(0,s.k6)(),a=function(n){let{queryString:e=!1,groupId:t}=n;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,u._X)(a),(0,r.useCallback)((n=>{if(!a)return;const e=new URLSearchParams(i.location.search);e.set(a,n),i.replace({...i.location,search:e.toString()})}),[a,i])]}function f(n){const{defaultValue:e,queryString:t=!1,groupId:i}=n,a=p(n),[l,s]=(0,r.useState)((()=>function(n){let{defaultValue:e,tabValues:t}=n;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=t.find((n=>n.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:e,tabValues:a}))),[u,o]=h({queryString:t,groupId:i}),[c,f]=function(n){let{groupId:e}=n;const t=function(n){return n?`docusaurus.tab.${n}`:null}(e),[i,a]=(0,m.Nk)(t);return[i,(0,r.useCallback)((n=>{t&&a.set(n)}),[t,a])]}({groupId:i}),k=(()=>{const n=u??c;return d({value:n,tabValues:a})?n:null})();(0,r.useLayoutEffect)((()=>{k&&s(k)}),[k]);return{selectedValue:l,selectValue:(0,r.useCallback)((n=>{if(!d({value:n,tabValues:a}))throw new Error(`Can't select invalid tab value=${n}`);s(n),o(n),f(n)}),[o,f,a]),tabValues:a}}var k=t(2389);const g="tabList__CuJ",v="tabItem_LNqP";function b(n){let{className:e,block:t,selectedValue:s,selectValue:u,tabValues:o}=n;const m=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),p=n=>{const e=n.currentTarget,t=m.indexOf(e),i=o[t].value;i!==s&&(c(e),u(i))},d=n=>{var e;let t=null;switch(n.key){case"Enter":p(n);break;case"ArrowRight":{const e=m.indexOf(n.currentTarget)+1;t=m[e]??m[0];break}case"ArrowLeft":{const e=m.indexOf(n.currentTarget)-1;t=m[e]??m[m.length-1];break}}null==(e=t)||e.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},e)},o.map((n=>{let{value:e,label:t,attributes:l}=n;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,key:e,ref:n=>m.push(n),onKeyDown:d,onClick:p},l,{className:(0,a.Z)("tabs__item",v,null==l?void 0:l.className,{"tabs__item--active":s===e})}),t??e)})))}function w(n){let{lazy:e,children:t,selectedValue:i}=n;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const n=a.find((n=>n.props.value===i));return n?(0,r.cloneElement)(n,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((n,e)=>(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==i}))))}function N(n){const e=f(n);return r.createElement("div",{className:(0,a.Z)("tabs-container",g)},r.createElement(b,(0,i.Z)({},n,e)),r.createElement(w,(0,i.Z)({},n,e)))}function y(n){const e=(0,k.Z)();return r.createElement(N,(0,i.Z)({key:String(e)},n))}},1012:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=t(7462),r=(t(7294),t(3905)),a=(t(1839),t(4866)),l=t(5162);const s={},u="3 Basic Strategy",o={unversionedId:"Algorithms/3",id:"Algorithms/3",title:"3 Basic Strategy",description:"Binary Search",source:"@site/docs/Algorithms/3.md",sourceDirName:"Algorithms",slug:"/Algorithms/3",permalink:"/docs/Algorithms/3",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/3.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",previous:{title:"2 \u66b4\u529b\u6c42\u89e3/\u6570\u5b66\u95ee\u9898",permalink:"/docs/Algorithms/2"},next:{title:"4 Data Structure",permalink:"/docs/Algorithms/4"}},m={},c=[{value:"Binary Search",id:"binary-search",level:2},{value:"\u4e8c\u5206\u67e5\u627e",id:"\u4e8c\u5206\u67e5\u627e",level:3},{value:"Floating Point",id:"floating-point",level:3},{value:"\u4e8c\u5206\u641c\u7d22",id:"\u4e8c\u5206\u641c\u7d22",level:3},{value:"Two pointers",id:"two-pointers",level:2},{value:"Merge Intervals",id:"merge-intervals",level:3},{value:"Sliding Window",id:"sliding-window",level:3},{value:"Hash",id:"hash",level:2},{value:"Bit Manipulation",id:"bit-manipulation",level:2},{value:"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570",id:"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570",level:3},{value:"Set Mismatch",id:"set-mismatch",level:3},{value:"Sort",id:"sort",level:2},{value:"Brute Force",id:"brute-force",level:3},{value:"Decrease &amp; Conquer",id:"decrease--conquer",level:3},{value:"Divide &amp; Conquer",id:"divide--conquer",level:3},{value:"Transform &amp; Conquer",id:"transform--conquer",level:3},{value:"Heap sort",id:"heap-sort",level:4}],p={toc:c};function d(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"3-basic-strategy"},"3 Basic Strategy"),(0,r.kt)("h2",{id:"binary-search"},"Binary Search"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"O(log(n))")),(0,r.kt)("h3",{id:"\u4e8c\u5206\u67e5\u627e"},"\u4e8c\u5206\u67e5\u627e"),(0,r.kt)("p",null,"\u5728\u95ed\u533a\u95f4\u67e5\u627e","[begin,end]",",\u6ce8\u610f\u5bf9\u627e\u4e0d\u5230\u7684\u5904\u7406"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int binary_find(vector<int>& nums, int target){\n    int l=0,r=nums.size()-1;//Notice1\n    while(l<r){\n        int mid=l+(r-l)/2;//Notice2\n        if(nums[mid]==target)return mid;\n        else if(nums[mid]>target)r=mid-1;\n        else l=mid+1;\n    }\n    return nums[l]==target?l:-1;\n}\n")),(0,r.kt)("h3",{id:"floating-point"},"Floating Point"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"double floating_find(double l, double r)\n{\n    while (r - l > eps)\n    {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    return l;\n}\n")),(0,r.kt)("h3",{id:"\u4e8c\u5206\u641c\u7d22"},"\u4e8c\u5206\u641c\u7d22"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5728[begin,end)\u67e5\u627e,\u6545\u683c\u5916\u6ce8\u610f\u8fb9\u754c"),(0,r.kt)("li",{parentName:"ol"},"\u5148\u60f3\u6700\u7ec8\u76ee\u6807>or>=,\u7136\u540e\u6ee1\u8db3\u6761\u4ef6\u65f6\u53f3\u4e0d\u53d8,\u4e0d\u6ee1\u8db3\u65f6\u5de6\u52a0\u4e00"),(0,r.kt)("li",{parentName:"ol"},"\u6ce8\u610f\u53d8\u5f0f\u5982\u6c42\u4e0a\u754c(\u6ce8\u91ca\u90e8\u5206)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int upper_bound(vector<int>& nums, int target){\n    int l=0,n=nums.size();//Notice1\n    int r=n;\n    while(l<r){\n        int mid=l+(r-l)/2);//Notice2\n        if(nums[mid]>target)r=mid;\n        else l=mid+1;\n    }\n    if(r==n||nums[l]!=target)return -1;\n    else return l;\n    /*\n    if(l==0||nums[l-1]!=target)return -1;\n    else return l-1;    \n    */\n}\nint lower_bound(vector<int>& nums, int target){\n    int l=0,n=nums.size();//Notice1\n    int r=n;\n    while(l<r){\n        int mid=l+(r-l)/2);//Notice2\n        if(nums[mid]>=target)r=mid;\n        else l=mid+1;\n    }\n    if(r==n||nums[l]!=target)return -1;\n    else return l;\n}\n")),(0,r.kt)("h2",{id:"two-pointers"},"Two pointers"),(0,r.kt)("h3",{id:"merge-intervals"},"Merge Intervals"),(0,r.kt)("p",null,"first pointer: merged interval right end"),(0,r.kt)("p",null,"second pointer: the unmerged part"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<vector<int>> merge(vector<vector<int>>& intervals) {\n    sort(intervals.begin(),intervals.end());\n    int n = intervals.size();\n    vector<vector<int>> ans;\n    ans.push_back(intervals[0]);\n    for(int i =1;i<n;++i){\n        if(intervals[i][0]<=ans.back()[1]){\n            ans.back()[1] = max(ans.back()[1],intervals[i][1]);\n        }\n        else{\n            ans.push_back(intervals[i]);\n        }\n    }\n    return ans;\n}\n")),(0,r.kt)("h3",{id:"sliding-window"},"Sliding Window"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Leetcode76")),(0,r.kt)("p",null,'Given two strings s and t of lengths m and n respectively, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string ""'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string minWindow(string s, string t) {\n        fill(flag,flag+128,0);\n        fill(each,each+128,0);\n        int n=t.size();\n        int m=s.size();\n        int cap;\n        int count=0,start=0,mini=m+1;//\u6613\u9519\u70b91\n        for(int i=0;i<n;++i)flag[t[i]]=1,each[t[i]]++;\n        for(int i=0;i<m;++i){\n            if(flag[s[i]]){\n                if(--each[s[i]]>=0)count++;\n                while(count==n){\n                    if(i-start+1<mini){\n                        mini=i-start+1;\n                        cap=start;\n                    }\n                    if(flag[s[start]]&&++each[s[start]]>0)count--;\n                    ++start;\n                }\n            }\n        }\n        return mini==m+1?"":s.substr(cap,mini);\n    }\nprivate:\n    int flag[128];\n    int each[128];\n};\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Leetcode3")),(0,r.kt)("p",null,"Given a string s, find the length of the longest substring without repeating characters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        fill(each,each+128,0);\n        int n=s.size();\n        int start=0,maxi=0;\n        for(int i=0;i<n;++i){\n            char p=s[i];\n            if(++each[p]>1){\n                while(start<i&&s[start]!=p){\n                    --each[s[start]];\n                    ++start;\n                }\n                if(start!=i){\n                    --each[s[start]];\n                    ++start;\n                }\n            }   \n            maxi=max(maxi,i-start+1);\n        }\n        return maxi;\n    }\nprivate:\n    int each[128];\n};\n")),(0,r.kt)("h2",{id:"hash"},"Hash"),(0,r.kt)("p",null,"\u601d\u8def"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8bb0\u5f55\u4e0a\u4e00\u6b21\u4f4d\u7f6e(\u662f\u5426\u51fa\u73b0)\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"\u7528vector\u5b58,\u9700\u8981\u4ece-1\u5f00\u59cb"),(0,r.kt)("li",{parentName:"ul"},"\u7528unordered_map\u5b58,\u6ce8\u610f\u5148\u5224\u65adcount"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Leetcode 3 Longest Substring Without Repeating Characters")),(0,r.kt)("p",null,"Given a string s, find the length of the longest substring without repeating characters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// unordered_map\nint lengthOfLongestSubstring(string s) {\n    unordered_map<char,int> record;\n    int ans = 0;\n    int n = s.size();\n    int j = -1;\n    for (int i =0;i<n;++i){\n        if(record.count(s[i])&&record[s[i]]>j){\n            j = record[s[i]];\n        }\n        record[s[i]] = i;\n        ans = max(ans, i - j);\n    }\n    return ans;\n}\n// vector\nint lengthOfLongestSubstring(string s) {\n    vector<int> record(256,-1);\n    int ans = 0;\n    int n = s.size();\n    int j = -1;\n    for (int i =0;i<n;++i){\n        j = max(j,record[s[i]]);\n        record[s[i]] = i;\n        ans = max(ans, i - j);\n    }\n    return ans;\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570(\u5f80\u5f80\u53ef\u4ee5\u8054\u7cfbTwo pointers)")),(0,r.kt)("h2",{id:"bit-manipulation"},"Bit Manipulation"),(0,r.kt)("h3",{id:"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking"},"\u9898\u76ee\u94fe\u63a5")),(0,r.kt)("p",null,"\u6bcf\u4f4d\u904d\u5386O(n)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n     int  NumberOf1(int n) {\n         unsigned int flag=1,sum=0;\n         for(int i=0;i<32;++i){\n             sum+=flag&n?1:0;\n             flag<<=1;\n         }\n         return sum;\n     }\n};\n")),(0,r.kt)("p",null,"\u53ea\u904d\u53861\u7684\u4e2a\u6570O(m)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n     int  NumberOf1(int n) {\n         unsigned int sum=0;\n         while(n!=0){\n             n=n&(n-1);\n             sum++;\n         }\n         return sum;\n     }\n};\n")),(0,r.kt)("h3",{id:"set-mismatch"},"Set Mismatch"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/set-mismatch/"},"\u9898\u76ee\u94fe\u63a5")),(0,r.kt)("p",null,"a set of integers 1 to n but got repetition of one number and loss of another number,e.g. ","[1,2,2,4]"),(0,r.kt)("p",null,"find the duplicate and the missing."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5728\u540e\u9762\u6dfb\u52a01 to n\uff0c\u6784\u5efa3\u4e2aduplicate\u548c1\u4e2amissing,\u7136\u540e\u5728\u6570\u91cf\u4e0a\u505a\u6587\u7ae0")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> findErrorNums(vector<int>& nums) {\n    int sum=0,num1=0,num2=0;\n    int n=nums.size();\n    vector<int> result(2);\n    for(int i=0;i<n;++i){\n        sum^=nums[i];\n        sum^=(i+1);\n    }\n    int low=sum&(-sum);\n    for(int i=0;i<n;++i){\n        if((nums[i]&low)==0)num1^=nums[i];\n        else num2^=nums[i];\n        if(((i+1)&low)==0)num1^=(i+1);\n        else num2^=(i+1);\n    }\n    for(int i=0;i<n;++i){\n        if(nums[i]==num1||nums[i]==num2){\n            result[0]=nums[i];\n            result[1]=nums[i]==num1?num2:num1;\n            break;\n        }\n    }\n    return result;\n}\n")),(0,r.kt)("h2",{id:"sort"},"Sort"),(0,r.kt)("h3",{id:"brute-force"},"Brute Force"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//Selection sort\n//Finding the minimum element from the unsorted part,swapping it with the leftmost unsorted element\nfor(int i = 0; i< n-1; ++i){\n    int min = i;\n    for(int j = i+1; j<n; ++j)\n        if(nums[j]<nums[min])min = j;\n    swap(nums[i],nums[min]);\n}\n//Bubble sort\n//Just like the movement of air bubbles in the water that rise up to the surface, each element of the array move to the end in each iteration\nfor(int i = 0; i< n-1; ++i){\n    int flag = true;\n    for(int j =0; j< n-1-i; ++j)\n        if(nums[j+1]<nums[j]){\n            swap(nums[j],nums[j+1]);\n            flag = false;\n        }\n    if(flag == true)break;\n}\n")),(0,r.kt)("h3",{id:"decrease--conquer"},"Decrease & Conquer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//Insertion sort\n//Compare the new card to each sorted card and find its position until the array is sorted\nfor(int i = 0; i < n; ++i){\n    int v = nums[i];\n    j = i - 1;\n    while(j>= 0 && nums[j] > v){\n        nums[j + 1] = nums[j];\n        j--;\n    }\n    nums[j+1] = v;\n}\n")),(0,r.kt)("p",null,"Shell\u2019s Sort:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"compare items that are one stride length h apart. Do insertion sort."),(0,r.kt)("li",{parentName:"ul"},"Start with large stride, and decrease towards 1")),(0,r.kt)("h3",{id:"divide--conquer"},"Divide & Conquer"),(0,r.kt)(a.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"mergesort",mdxType:"TabItem"},(0,r.kt)("p",null,"\u6a21\u677f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void merge_sort(vector<int> &nums, int l, int r, vector<int> &temp) {\n    if (r-l<=1) return; //Notice1\n    // divide\n    int mid = l + (r - l) / 2;\n    merge_sort(nums, l, mid, temp); // Notice2, [l,mid), \u5982\u679c\u662fmid + 1\u6709\u53ef\u80fd=r\n    merge_sort(nums, mid, r, temp);\n    // conquer\n    int p = l, q = mid, k = l;\n    while (p < mid && q < r)\n        temp[k++] = nums[p]< nums[q]? nums[p++]:nums[q++];\n    while(p < mid)temp[k++] = nums[p++];\n    while(q < r) temp[k++] = nums[q++];\n    for (k = l; k < r; ++k)\n        nums[k] = temp[k];\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Leetcode 148 https://leetcode-cn.com/problems/sort-list/\nListNode* sortList(ListNode* head) {\n    if(!head||!head->next)return head;\n    //Find midium\n    ListNode *slow = head,*fast = head;\n    while(fast->next&&fast->next->next){\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    fast = slow->next;\n    slow->next = NULL;\n    slow = head;\n    //divide\n    slow=sortList(slow);fast=sortList(fast);\n    //conquer\n    ListNode * dummy = new ListNode(0);\n    ListNode * node = dummy;\n    while(slow&&fast){\n        if(slow->val < fast->val){\n            node->next = slow;\n            slow = slow->next;\n        }\n        else{\n            node->next = fast;\n            fast = fast->next;\n        }\n        node = node->next;\n    }\n    node->next = slow?slow:fast;\n    return dummy->next;\n}\n"))),(0,r.kt)(l.Z,{value:"quicksort",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void quick_sort(int l,int r){//\u5de6\u95ed\u53f3\u5f00\n    if(r-l<=1)return;\n    int first=l,last=r-1,key=nums[l];//\u4fdd\u7559pivot\n    while(first<last){//\u5148\u53f3\u518d\u5de6\uff0c\u56e0\u4e3anums[first]\u53ef\u4ee5\u88ab\u66ff\u6362\n        while(first<last&&nums[last]>=key)last--;\n        nums[first]=nums[last];\n        while(first<last&&nums[first]<=key)first++;\n        nums[last]=nums[first];\n    }\n    nums[first]=key;\n    quick_sort(l,first);\n    quick_sort(first+1,r);\n}\n")))),(0,r.kt)("h3",{id:"transform--conquer"},"Transform & Conquer"),(0,r.kt)("h4",{id:"heap-sort"},"Heap sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sink: ",(0,r.kt)("strong",{parentName:"li"},"O(logn)")),(0,r.kt)("li",{parentName:"ul"},"pop_heap: v","[1]"," sink ",(0,r.kt)("strong",{parentName:"li"},"O(logn)")),(0,r.kt)("li",{parentName:"ul"},"push_heap: v","[n+1]"," up ",(0,r.kt)("strong",{parentName:"li"},"O(logn)")),(0,r.kt)("li",{parentName:"ul"},"make_heap: bottom-up sink ",(0,r.kt)("strong",{parentName:"li"},"O(n)"))),(0,r.kt)("p",null,"heap sort: make_heap + sort_heap(O(nlog(n)))"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//[f,l),[,Compare comp]\nvoid pop_heap(iterator first, iterator last);\nvoid push_heap(iterator first, iterator last);\nvoid make_heap(iterator first, iterator last);\nvoid sort_heap(iterator first, iterator last);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u53d8\u5f0f:vector\u53ea\u5c06a","[i]","\u7528v","[i-1]","\u4ee3\u66ff\u5373\u53ef")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void sink(int val, vector<int>& a){\n    int n = a.size()-1;\n    while(2*val<=n){//\u6700\u7ec8\u662f2*val\n        int i=2*val;\n        if(i+1<=n&&a[i+1]>a[i])i++;//\u6613\u9519\u70b92\n        if(a[i]>a[val]){\n            swap(a[i],a[val]);\n            val=i;\n        }\n        else break;\n    }\n}\nvoid up(int val, vector<int>& a){//\u6700\u7ec8\u662fval/2\n    while(val>1&&a[val>>1]<a[val]){// all but a[1]\n        swap(a[val],a[val>>1]);\n        val>>=1;\n    }\n}\nint main(){\n    for(int i=n>>1;i>=1;--i)sink(i);//construct heap\n    // partition heap and sorted array\n    while(--n){\n        // get nums[1]\n        nums[1] = nums.back();\n        nums.pop_back();\n        sink(1, nums);\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Leetcode215. Kth Largest Element in an Array")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/"},"\u9898\u76ee")),(0,r.kt)("p",null,"\u6cd51:\u5806\u6392\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        int n = nums.size();\n        // make heap\n        for(int i=n/2;i>0;--i)sink(i,nums);\n        // sort heap\n        while(--k){\n            nums[0] = nums.back();\n            nums.pop_back();\n            sink(1,nums);\n        }\n        return nums[0];\n    }\nprivate:\n    void sink(int val, vector<int>& nums){\n        int n = nums.size();\n        while(val*2<=n){\n            int i = val*2;\n            if(i+1<=n&&nums[i]>nums[i-1]) ++i;\n            if(nums[i-1]>nums[val-1]){\n                swap(nums[i-1],nums[val-1]);\n                val = i;\n            }\n            else break;\n        }\n    }\n};\n")),(0,r.kt)("p",null,"\u6cd52:\u5feb\u6392"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int x) {\n        k=x;\n        n=nums.size();\n        v=nums;\n        quick_selection(0,n);\n        return v[n-k];\n    }\nprivate:\n    int k,n;\n    vector<int> v;\n    void quick_selection(int l,int r){\n        if(r-l<=1)return;\n        int first=l,last=r-1,p=v[l];\n        while(first<last){\n            while(first<last&&v[last]>=p)last--;\n            v[first]=v[last];\n            while(first<last&&v[first]<=p)first++;\n            v[last]=v[first];\n        }\n        v[first]=p;\n        if(first==n-k)return;\n        else if(first<n-k)quick_selection(first+1,r);\n        else quick_selection(l,first);\n    }\n};\n")))}d.isMDXComponent=!0}}]);