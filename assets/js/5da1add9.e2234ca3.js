"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[508],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),p=o,f=d["".concat(s,".").concat(p)]||d[p]||m[p]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6350:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,c={unversionedId:"OJ/Leetcode4",id:"OJ/Leetcode4",title:"Leetcode4",description:"Leetcode 4 Median of Two Sorted Arrays",source:"@site/docs/OJ/Leetcode4.md",sourceDirName:"OJ",slug:"/OJ/Leetcode4",permalink:"/docs/OJ/Leetcode4",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/OJ/Leetcode4.md",tags:[],version:"current",frontMatter:{},sidebar:"OJ",previous:{title:"Leetcode 334 Increasing Triplet Subsequence",permalink:"/docs/OJ/Leetcode334"},next:{title:"Leetcode 93 Restore IP Addresses",permalink:"/docs/OJ/Leetcode93"}},s={},l=[{value:"Leetcode 4 Median of Two Sorted Arrays",id:"leetcode-4-median-of-two-sorted-arrays",level:2}],u={toc:l};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"leetcode-4-median-of-two-sorted-arrays"},"Leetcode 4 Median of Two Sorted Arrays"),(0,o.kt)("p",null,"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays."),(0,o.kt)("p",null,"The overall run time complexity should be O(log (m+n))."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210904113642.png",alt:"20210904113642"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n    int n=nums1.size(),m=nums2.size();\n    if(n>m)return findMedianSortedArrays(nums2,nums1);\n    int k=m+n;\n    int l=0,r=n;\n    while(l<r){\n        int mid=l+r>>1;\n        int m2=(k+1>>1)-mid;\n        if(nums1[mid]<nums2[m2-1])l=mid+1;\n        else r=mid;\n    }\n    int m2=(k+1>>1)-l;\n    int left=m2==0?nums1[l-1]:l==0?nums2[m2-1]:max(nums1[l-1],nums2[m2-1]);\n    if(k%2==0){\n        int right=m2==m?nums1[l]:l==n?nums2[m2]:min(nums1[l],nums2[m2]);\n        return (left+right)/2.0;\n    }\n    else return left;\n}\n")))}m.isMDXComponent=!0}}]);