"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[1054],{5162:(a,e,t)=>{t.d(e,{Z:()=>r});var n=t(7294),s=t(6010);const m="tabItem_Ymn6";function r(a){let{children:e,hidden:t,className:r}=a;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(m,r),hidden:t},e)}},5488:(a,e,t)=>{t.d(e,{Z:()=>N});var n=t(7462),s=t(7294),m=t(6010),r=t(2389),p=t(7392),l=t(7094),i=t(2466);const o="tabList__CuJ",c="tabItem_LNqP";function u(a){var e;const{lazy:t,block:r,defaultValue:u,values:N,groupId:k,className:h}=a,d=s.Children.map(a.children,(a=>{if((0,s.isValidElement)(a)&&"value"in a.props)return a;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof a.type?a.type:a.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=N??d.map((a=>{let{props:{value:e,label:t,attributes:n}}=a;return{value:e,label:t,attributes:n}})),b=(0,p.l)(g,((a,e)=>a.value===e.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((a=>a.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===u?u:u??(null==(e=d.find((a=>a.props.default)))?void 0:e.props.value)??d[0].props.value;if(null!==v&&!g.some((a=>a.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((a=>a.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:f}=(0,l.U)(),[w,x]=(0,s.useState)(v),A=[],{blockElementScrollPositionUntilNextRender:z}=(0,i.o5)();if(null!=k){const a=y[k];null!=a&&a!==w&&g.some((e=>e.value===a))&&x(a)}const S=a=>{const e=a.currentTarget,t=A.indexOf(e),n=g[t].value;n!==w&&(z(e),x(n),null!=k&&f(k,String(n)))},T=a=>{var e;let t=null;switch(a.key){case"Enter":S(a);break;case"ArrowRight":{const e=A.indexOf(a.currentTarget)+1;t=A[e]??A[0];break}case"ArrowLeft":{const e=A.indexOf(a.currentTarget)-1;t=A[e]??A[A.length-1];break}}null==(e=t)||e.focus()};return s.createElement("div",{className:(0,m.Z)("tabs-container",o)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":r},h)},g.map((a=>{let{value:e,label:t,attributes:r}=a;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===e?0:-1,"aria-selected":w===e,key:e,ref:a=>A.push(a),onKeyDown:T,onClick:S},r,{className:(0,m.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":w===e})}),t??e)}))),t?(0,s.cloneElement)(d.filter((a=>a.props.value===w))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},d.map(((a,e)=>(0,s.cloneElement)(a,{key:e,hidden:a.props.value!==w})))))}function N(a){const e=(0,r.Z)();return s.createElement(u,(0,n.Z)({key:String(e)},a))}},3264:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>N,frontMatter:()=>p,metadata:()=>i,toc:()=>c});var n=t(7462),s=(t(7294),t(3905)),m=(t(1839),t(5488)),r=t(5162);const p={},l="4 Data Structure",i={unversionedId:"Algorithms/4",id:"Algorithms/4",title:"4 Data Structure",description:"Array",source:"@site/docs/Algorithms/4.md",sourceDirName:"Algorithms",slug:"/Algorithms/4",permalink:"/docs/Algorithms/4",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/4.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",previous:{title:"3 Basic Strategy",permalink:"/docs/Algorithms/3"},next:{title:"5 Searching summary",permalink:"/docs/Algorithms/5"}},o={},c=[{value:"Array",id:"array",level:2},{value:"LinkedList",id:"linkedlist",level:2},{value:"Stack",id:"stack",level:2},{value:"Monotonic Stack",id:"monotonic-stack",level:3},{value:"Deque",id:"deque",level:2},{value:"Hashmap",id:"hashmap",level:2},{value:"Separate Chaining Data Indexed Array",id:"separate-chaining-data-indexed-array",level:3},{value:"Open Addressing",id:"open-addressing",level:3}],u={toc:c};function N(a){let{components:e,...t}=a;return(0,s.kt)("wrapper",(0,n.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"4-data-structure"},"4 Data Structure"),(0,s.kt)("h2",{id:"array"},"Array"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6570\u7ec4\u8d8a\u754c"),(0,s.kt)("li",{parentName:"ul"},"\u6570\u7ec4\u662f\u5426\u53ef\u4ee5\u91cd\u590d,\u91cd\u590d\u7684\u5904\u7406")),(0,s.kt)("h2",{id:"linkedlist"},"LinkedList"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"\u6613\u9519\u70b9:\u6bcf\u4e00\u6b65p->next\u68c0\u67e5p!=NULL")),(0,s.kt)("h2",{id:"stack"},"Stack"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Basic Calculator")),(0,s.kt)("p",null,"Implement a basic calculator to evaluate a simple expression string."),(0,s.kt)("p",null,"The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces . The integer division should truncate toward zero."),(0,s.kt)("p",null,"You may assume that the given expression is always valid. All intermediate results will be in the range of ","[-2147483648, 2147483647]"),(0,s.kt)(m.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"stack",mdxType:"TabItem"},(0,s.kt)("p",null,"if there are no brackets, we could evaluate easily"),(0,s.kt)("p",null,"if there are brackets, we could see each part = nonbracket + evaluate(bracket), but nonbracket should be store in a stack"),(0,s.kt)("p",null,"Problems: evaluate(bracket) could be -3, so the new expression could contain 3*-3, 3+-3, 3--3. We need to handle those."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int calculate(string &s) {\n    stack<string> nonbracket;\n    string curStr; \n    for(auto p: s){\n        if(p=='('){\n            nonbracket.push(curStr);\n            curStr = \"\";\n        }\n        else if(p==')'){\n            curStr = to_string(evaluate(curStr));\n            curStr = nonbracket.top() + curStr;\n            nonbracket.pop();\n        }\n        else if(p!=' ') curStr +=p;\n    }\n    return evaluate(curStr);\n}\nlong long evaluate(string input){\n    int i =0, j =0;\n    long long base = 0, temp = 0;\n    input = '+' + input;\n    while(i<input.size()){\n        if(input[i]=='+'||input[i]=='-'){\n            base += temp;\n            j = i+1;\n            if(input[j]=='-')++j;\n            while(isdigit(input[j]))++j;\n            temp = stoll(input.substr(i+1,j-1-i));\n            temp = input[i]=='+'?temp: -temp;\n            i = j;\n        }\n        else if(input[i]=='*'||input[i]=='/'){\n            j = i+1;\n            if(input[j]=='-')++j;\n            while(isdigit(input[j]))++j;\n            if(input[i]=='*') temp *= stoll(input.substr(i+1,j-1-i));\n            else temp /= stoll(input.substr(i+1,j-1-i));\n            i = j;\n        }\n    }\n    return base + temp;\n}\n"))),(0,s.kt)(r.Z,{value:"recursion",mdxType:"TabItem"},(0,s.kt)("p",null,"for each character, if not empty space, make sure you are handling digits and is an operator before go to next step:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"if last character ')', break "),(0,s.kt)("li",{parentName:"ul"},"'(': recursion(i+1)"),(0,s.kt)("li",{parentName:"ul"},"digit: transform from string to long long, i becomes operator when it is done")),(0,s.kt)("p",null,"as we always start from digits, we will not handle operator every loop, and we could record last operator(or character)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int calculate(string &s) {\n    int i =0;\n    return calHelper(s,i);\n}\nint calHelper(string &s,int &i){\n    char op = '+';\n    long long base=0, temp = 0;\n    int n = s.size();\n    while(i<n&&op!=')'){\n        if(s[i]!=' '){\n            long long num = 0;\n            if(s[i] == '(')num = calHelper(s,++i);\n            else{\n                while(i<n&&isdigit(s[i])){\n                    num = num*10 + s[i] - '0';\n                    ++i;\n                } \n            }\n            if(op=='+'){\n                base +=temp;\n                temp = num;\n            }\n            else if(op == '-'){\n                base +=temp;\n                temp = -num;\n            }\n            else if(op == '*') temp *= num;\n            else if(op == '/') temp /= num;\n            if(i<n) op = s[i];\n        }\n        ++i;\n    }\n    return base + temp;\n}\n")))),(0,s.kt)("h3",{id:"monotonic-stack"},"Monotonic Stack"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Mono-decreasing(pop smaller elements) stack keeps the result as greater as possible"),(0,s.kt)("li",{parentName:"ul"},"Mono-increasing stack keeps the result as smaller as possible ")),(0,s.kt)("h2",{id:"deque"},"Deque"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Sliding Window Maximum")),(0,s.kt)("p",null,"You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n    deque<int> dq;\n    vector<int> ans;\n    for(int i=0;i<nums.size();++i){\n        while(!dq.empty()&&dq.front()<nums[i])dq.pop_front();\n        dq.push_front(nums[i]);\n        if(i-k>=0&&!dq.empty()&&dq.back()==nums[i-k])dq.pop_back();\n        if(i>=k-1) ans.push_back(dq.back());\n    }\n    return ans;\n}\n")),(0,s.kt)("h2",{id:"hashmap"},"Hashmap"),(0,s.kt)("h3",{id:"separate-chaining-data-indexed-array"},"Separate Chaining Data Indexed Array"),(0,s.kt)("p",null,"Data is converted into a hash code. The hash code is then reduced to a valid index."),(0,s.kt)("p",null,"Java\u2019s hashCode() function for Strings: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"h"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"s"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"s"),(0,s.kt)("mn",{parentName:"msub"},"0")),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mn",{parentName:"mrow"},"3"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mn",{parentName:"msup"},"1"),(0,s.kt)("mrow",{parentName:"msup"},(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"))),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"s"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mn",{parentName:"mrow"},"3"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mn",{parentName:"msup"},"1"),(0,s.kt)("mrow",{parentName:"msup"},(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"2"))),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"s"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1")))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"h(s)=s_0 \\times 31^{n-1}+s_1\\times 31^{n-2}+...+s_{n-1}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"h"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8974em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8974em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"3"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2"))))))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"..."),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6389em",verticalAlign:"-0.2083em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2083em"}},(0,s.kt)("span",{parentName:"span"}))))))))))),(0,s.kt)("p",null,"31: the hashCode base should be a small ",(0,s.kt)("strong",{parentName:"p"},"prime")," to avoid overflow"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20221120134556.png",alt:"20221120134556"})),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20221120135107.png",alt:"20221120135107"})),(0,s.kt)("p",null,"suppose the number of buckets: M, number of items: N"),(0,s.kt)("p",null,"then complexities of contains and add are O(Q = N/M) "),(0,s.kt)("p",null,"To make them O(1), strategy: When N/M is \u2265 1.5, double M"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"bool contains(int x, vector<list<int>>& hash_table){\n    int n = hash_table.size();\n    int index = (x%n + n)%n;\n    list<int>& slot = hash_table[index]; \n    return find(slot.begin(),slot.end(),x)!=slot.end();\n}\nbool add(int x,vector<list<int>>& hash_table){\n    int n = hash_table.size();\n    int index = (x%n + n)%n;\n    hash_table[index].push_back(x);\n}\n")),(0,s.kt)("h3",{id:"open-addressing"},"Open Addressing"),(0,s.kt)("p",null,"An alternate way to handle collisions is to use open addressing"),(0,s.kt)("p",null,"If target bucket is already occupied, use a different bucket"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Linear probing",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Use next address, and if already occupied, just keep scanning one by one."))),(0,s.kt)("li",{parentName:"ul"},"Quadratic probing",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Use next address, and if already occupied, try looking 4 ahead, then 9 ahead, then 16 ahead, ...")))))}N.isMDXComponent=!0}}]);