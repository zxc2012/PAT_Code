"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[4449],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),p=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,s=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),c=p(n),k=a,d=c["".concat(s,".").concat(k)]||c[k]||m[k]||l;return n?r.createElement(d,i(i({ref:e},u),{},{components:n})):r.createElement(d,i({ref:e},u))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9487:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={},i="2 \u66b4\u529b\u6c42\u89e3/\u6570\u5b66\u95ee\u9898",o={unversionedId:"Algorithms/2",id:"Algorithms/2",title:"2 \u66b4\u529b\u6c42\u89e3/\u6570\u5b66\u95ee\u9898",description:"\u77e5\u8bc6\u70b9",source:"@site/docs/Algorithms/2.md",sourceDirName:"Algorithms",slug:"/Algorithms/2",permalink:"/docs/Algorithms/2",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/2.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",previous:{title:"1 Coding style and STL summary",permalink:"/docs/Algorithms/1"},next:{title:"3 Binary Search",permalink:"/docs/Algorithms/3"}},s={},p=[{value:"\u77e5\u8bc6\u70b9",id:"\u77e5\u8bc6\u70b9",level:2},{value:"1.\u6570\u5b66\u95ee\u9898",id:"1\u6570\u5b66\u95ee\u9898",level:3},{value:"\u6c42\u89e3\u6280\u5de7",id:"\u6c42\u89e3\u6280\u5de7",level:2}],u={toc:p};function m(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2-\u66b4\u529b\u6c42\u89e3\u6570\u5b66\u95ee\u9898"},"2 \u66b4\u529b\u6c42\u89e3/\u6570\u5b66\u95ee\u9898"),(0,a.kt)("h2",{id:"\u77e5\u8bc6\u70b9"},"\u77e5\u8bc6\u70b9"),(0,a.kt)("h3",{id:"1\u6570\u5b66\u95ee\u9898"},"1.\u6570\u5b66\u95ee\u9898"),(0,a.kt)("p",null,"(1)\u7d20\u6570"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u7b97\u672f\u57fa\u672c\u5b9a\u7406:\u82e5$a\\in Z$,$a\\gt 1$,\u5219\u6709$a=p_1p_2\\cdots p_n$,\u5176\u4e2d$p_i$\u4e3a\u7d20\u6570")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Proof:\n\u5047\u5b9a\u5b9a\u7406\u5bf9\u6240\u6709\u5c0f\u4e8ea\u7684\u6b63\u6574\u6570\u5747\u6210\u7acb \u82e5a\u4e3a\u7d20\u6570,\u5219\u7ed3\u8bba\u663e\u7136\u6210\u7acb \u82e5a\u4e3a\u5408\u6570,$a=bc$,\u5176\u4e2d$1\\lt b,c\\lt a$\u7531\u5f52\u7eb3\u5047\u8bbe$b=p",(0,a.kt)("em",{parentName:"p"},"1p_2\\cdots p_k,c=p"),"{k+1}p_{k+2}\\cdots p_n$")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"for(int i = 2; i <= n; i++)\n{\n    if(!vis[i])\n    prime[cnt++] = i;\n    for(int j = 0; j<cnt && i*prime[j]<=n; j++)\n    {\n        vis[i*prime[j]] = 1;\n        if(i % prime[j] == 0) break;\n    }\n}\n")),(0,a.kt)("p",null,"\u5224\u65ad\u7d20\u6570"),(0,a.kt)("blockquote",null,(0,a.kt)("h5",{parentName:"blockquote",id:"\u9677\u96311\u7684\u7279\u6b8a\u5904\u7406\u6781\u6613\u9519"},(0,a.kt)("inlineCode",{parentName:"h5"},"\u9677\u9631:1\u7684\u7279\u6b8a\u5904\u7406(\u6781\u6613\u9519)")),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool judge(int x){\n    if(x<2)return 0;\n    for(int i=2;i<=sqrt(x);++i){//9\n        if(x%i==0)return 0;\n    }\n    return 1;\n}\n")),(0,a.kt)("p",{parentName:"blockquote"},"(2)gcd\nEuclid's Algorithm(\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5)\n$lcm(m,n)=\\frac{mn}{gcd(m,n)}$"),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"long long gcd(long long a,long long b){return b==0?a:gcd(b,a%b);}//\u539f\u6765a>b\u73b0\u8c03\u6362\n")),(0,a.kt)("p",{parentName:"blockquote"},"(3)\u56de\u6587\u6570"),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'for(int i = 0; i < n / 2; i++) {//\u6ce8\u610f\u70b91\uff0c\u662f\u5426\u6539\u53d8\u4e2d\u4f4d\u6570\n    if(arr[i] != arr[n-1-i])//\u6ce8\u610f\u70b92,n-1\n    {         \n        printf("No\\n");            \n        flag = 1;break;        \n    }    \n}if(!flag)printf("Yes\\n");\n')),(0,a.kt)("p",{parentName:"blockquote"},"(4)str2num & num2str"),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int str2num(char *a)\n{\n    return 26 * 26 * (a[0]-'A') + 26 * (a[1]-'A') + (a[2]-'A');\n}\nstring num2str(int num){\n    string a(3,0);\n    a[0] = num / (26 * 26)+'A';\n    a[1] = num / 26 % 26 + 'A';\n    a[2] = num % 26 + 'A';\n    return a;\n}\n")),(0,a.kt)("h3",{parentName:"blockquote",id:"2\u6570\u636e\u7c7b\u578b\u8303\u56f4"},"2.\u6570\u636e\u7c7b\u578b\u8303\u56f4"),(0,a.kt)("table",{parentName:"blockquote"},(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"\u7c7b\u578b"),(0,a.kt)("th",{parentName:"tr",align:null},"\u5b57\u8282"),(0,a.kt)("th",{parentName:"tr",align:null},"\u8303\u56f4"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"short"),(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},"-32768~+32767"))))),(0,a.kt)("html",null,(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"\u6570\u636e\u7c7b\u578b"),(0,a.kt)("th",null,"\u752810\u8868\u793a"),(0,a.kt)("th",null,"\u75282\u8868\u793a"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,"unsigned int"),(0,a.kt)("td",null,"$0, 4\\times10^",9,"$"),(0,a.kt)("td",null,"$0, 2^",32,"-1$")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"int"),(0,a.kt)("td",null,"$-2\\times10^",9,", 2\\times10^",9,"$"),(0,a.kt)("td",null,"$-2^",31,", 2^",31,"-1$")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"unsigned long"),(0,a.kt)("td",null,"$0, 4\\times10^",9,"$"),(0,a.kt)("td",null,"$0, 2^",32,"-1$")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"long"),(0,a.kt)("td",null,"$-2\\times10^",10,", 2\\times10^",10,"$"),(0,a.kt)("td",null,"$-2^",31,", 2^",31,"-1$")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"long long"),(0,a.kt)("td",null,"$0, 9\\times10^",18,"$"),(0,a.kt)("td",null,"$-2^",63,", 2^",63,"-1$")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"unsigned long long"),(0,a.kt)("td",null,"$0, 10^",19,"$"),(0,a.kt)("td",null,"$0, 2^",64,"-1$")))),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"\u6570\u636e\u7c7b\u578b"),(0,a.kt)("th",null,"\u6bd4\u7279\u4f4d\u6570"),(0,a.kt)("th",null,"\u6709\u6548\u6570\u5b57"),(0,a.kt)("th",null,"\u752810\u8868\u793a"),(0,a.kt)("th",null,"\u75282\u8868\u793a"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,"float"),(0,a.kt)("td",null,"32"),(0,a.kt)("td",null,"6~7"),(0,a.kt)("td",null,"$-3.4\\times10^",38,", +3.4\\times10^",38,"$"),(0,a.kt)("td",null,"$-2^",128,", +2^",128,"$")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"double"),(0,a.kt)("td",null,"64"),(0,a.kt)("td",null,"15, 16"),(0,a.kt)("td",null,"$-1.7\\times10^",-308,", 1.7\\times10^",308,"$"),(0,a.kt)("td",null,"*")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"long double"),(0,a.kt)("td",null,"128"),(0,a.kt)("td",null,"18, 19"),(0,a.kt)("td",null,"$-1.2\\times10^",-4932,", 1.2\\times10^",4932,"$"),(0,a.kt)("td",null,"*"))))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"\u6c42\u89e3\u6280\u5de7"},"\u6c42\u89e3\u6280\u5de7"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\u601d\u8def:\u904d\u5386\u8303\u56f4\u5185\u5168\u90e8\u6570\u5b57,\u4f9d\u636e\u9996+\u5c3e/\u9996+\u95f4\u9694\u904d\u5386")),(0,a.kt)("p",null,"1.\u4e8c\u5206\u6cd5upper_bound,lower_bound\u7684\u8fd0\u7528"),(0,a.kt)("p",null,"2.PAT\u9898\uff0c\u5229\u7528\u6b21\u5e8f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"for (int i = 0; i < len; i++) {\n    if (s[i] == 'T')countt++;\n}\nfor (int i = 0; i < len; i++) {\n    if (s[i] == 'P')countp++;\n    if (s[i] == 'T')countt--;\n    if (s[i] == 'A')result = (result + (countp * countt) % 1000000007) % 1000000007;\n}\n")),(0,a.kt)("p",null,"3.\u6570\u5b66\u5f62\u5f0f\u9898\u6ce8\u610f\u5bf9\u6570\u5b57\u7684\u76f4\u63a5\u5229\u7528\uff0c\u5c11\u7528\u5b57\u7b26\u4e32\u7279\u6027"),(0,a.kt)("p",null,"4.hash"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u672a\u6392\u5e8f:\u5229\u7528\u57fa\u6570\u548c"),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("em",{parentName:"p"},"Leetcode1711 Count Good Meals")),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/count-good-meals/"},"\u9898\u76ee")),(0,a.kt)("p",{parentName:"li"},"  A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two."),(0,a.kt)("p",{parentName:"li"},"  Given an array of integers deliciousness where deliciousness","[i]"," is the deliciousness of the i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b item of food, return the number of different good meals you can make from this list modulo $10^9 + 7$."),(0,a.kt)("p",{parentName:"li"},"  $1 <= deliciousness.length <= 10^5$"),(0,a.kt)("p",{parentName:"li"},"  $0 <= deliciousness","[i]"," <= 2^{20}$"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int countPairs(vector<int>& deliciousness) {\n    unordered_map<int,int> m;\n    int res=0;\n    for(int &p:deliciousness){\n        for(int i=1;i<=pow(2,21);i<<=1){\n            if(m.count(i-p)){\n                res=(res+m[i-p])%1000000007; \n            }\n        }\n        m[p]++;\n    }\n    return res;\n}\n")),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("em",{parentName:"p"},"Leetcode1846 Maximum Element After Decreasing and Rearranging")),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/maximum-element-after-decreasing-and-rearranging/"},"\u9898\u76ee")),(0,a.kt)("p",{parentName:"li"},"  You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:"),(0,a.kt)("p",{parentName:"li"},"  The value of the first element in arr must be 1.\nThe absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, $abs(arr","[i]"," - arr","[i - 1]",") <= 1$ for each i where $1 <= i < arr.length$.\nThere are 2 types of operations that you can perform any number of times:"),(0,a.kt)("p",{parentName:"li"},"  Decrease the value of any element of arr to a smaller positive integer.\nRearrange the elements of arr to be in any order.\nReturn the maximum possible value of an element in arr after performing the operations to satisfy the conditions."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    public:\n        int maximumElementAfterDecrementingAndRearranging(vector<int>& arr) {\n            fill(cnt,cnt+100001,0);\n            int n=arr.size();\n            int miss=0;\n            for(int i=0;i<n;++i)cnt[min(arr[i],n)]++;\n            for(int i=1;i<=n;++i){\n                if(cnt[i]==0)miss++;\n                else{\n                    miss-=min(miss,cnt[i]-1);\n                }\n            }\n            return n-miss;\n        }\n    private:\n        int cnt[100001];\n};\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5df2\u6392\u5e8f:\u5229\u7528\u524d\u7f00\u548c"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"for(int i = 1; i < 110; i++) a[i]+=a[i-1];//\u8ba1\u7b97\u524d\u7f00\u548c a[i]\u8868\u793a\u5c0f\u4e8e\u7b49\u4e8ei\u7684\u6570\u5b57\u6709\u51e0\u4e2a\n")),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("em",{parentName:"p"},"Leetcode413 Arithmetic Slices")),(0,a.kt)("p",{parentName:"li"},"  ",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/arithmetic-slices/"},"\u9898\u76ee")),(0,a.kt)("p",{parentName:"li"},"  An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same."),(0,a.kt)("p",{parentName:"li"},"  Given an integer array nums, return the number of arithmetic subarrays of nums."),(0,a.kt)("p",{parentName:"li"},"  A subarray is a contiguous subsequence of the array."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int numberOfArithmeticSlices(vector<int>& nums){\n    int n=nums.size();\n    int dp=0;\n    int sum=0;\n    for(int i=2;i<n;++i){\n        if(nums[i]-nums[i-1]==nums[i-1]-nums[i-2]){\n            sum+=++dp;\n        }\n        else dp=0;\n    }\n    return sum;\n}\n")))),(0,a.kt)("p",null,"5.\u77e9\u9635\u6027\u8d28"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Rotate String")),(0,a.kt)("p",null,"Given a string(Given in the way of char array) and an offset, rotate the string by offset in place. (rotate from left to right)."),(0,a.kt)("p",null,"Example"),(0,a.kt)("p",null,'Input: str="abcdefg", offset = 10'),(0,a.kt)("p",null,'Output: str = "efgabcd"\t'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\u5229\u7528"),"$(A^TB^T)^T=BA$"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void rotateString(string &str, int offset) {\n    int n=str.size();\n    if(n>0){\n        offset%=n;\n        reverse(str.begin(),str.begin()+n-offset);\n        reverse(str.begin()+n-offset,str.end());\n        reverse(str.begin(),str.end());\n    }\n}\n")))}m.isMDXComponent=!0}}]);