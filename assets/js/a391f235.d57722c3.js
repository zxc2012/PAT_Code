"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[3116],{8483:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=a(7462),r=(a(7294),a(3905));a(8209);const i={},c="4 Concurrency",l={unversionedId:"Language/Java/Java_4",id:"Language/Java/Java_4",title:"4 Concurrency",description:"Thread Object",source:"@site/docs/Language/Java/Java_4.md",sourceDirName:"Language/Java",slug:"/Language/Java/Java_4",permalink:"/docs/Language/Java/Java_4",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Language/Java/Java_4.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"3 Exceptions & IO",permalink:"/docs/Language/Java/Java_3"},next:{title:"5 Java New Features",permalink:"/docs/Language/Java/Java_5"}},o={},s=[{value:"Thread Object",id:"thread-object",level:2},{value:"Synchronization",id:"synchronization",level:2}],u={toc:s};function d(n){let{components:e,...a}=n;return(0,r.kt)("wrapper",(0,t.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"4-concurrency"},"4 Concurrency"),(0,r.kt)("h2",{id:"thread-object"},"Thread Object"),(0,r.kt)("p",null,"Runnable and Thread"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@FunctionalInterface\npublic interface Runnable{\n    void run();\n}\npublic class Thread implements Runnable{\n    Thread(Runnable task);\n    static Thread currentThread();\n    final String getName();\n    Thread.State getState();\n    final int getPriority();\n    final void join();//Waits for this thread to terminate.\n    void run();\n    static void sleep(long millis);\n    void start();//A thread can be started at most once. Throws IllegalThreadStateException if the thread was already started\n    static void yield();//the current thread is willing to yield\n}\npublic class HelloRunnable implements Runnable {\n\n    public void run() {\n        System.out.println("Hello from a thread!");\n    }\n\n    public static void main(String args[]) {\n        new Thread(new HelloRunnable()).start();\n        //\u5199\u6cd52\n        new Thread(()->System.out.println("Hello from a thread!")).start();\n    }\n\n}\n')),(0,r.kt)("p",null,"join"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Schedules thread4 to begin execution. Thread4 will execute independently of the main thread"),(0,r.kt)("li",{parentName:"ul"},"join waits for thread4 to finish")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230426214421.png",alt:"20230426214421"})),(0,r.kt)("p",null,"Interrupt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class A implements Runnable\n{\n    public void run(){\n        try {\n            Thread.sleep(2000);\n        } \n        catch (InterruptedException ie) {\n            ie.printStackTrace(); // interrupt sleep\n        }\n        System.out.println("Hello Java");\n        System.out.println(Thread.currentThread());\n    }\n    public static void main(String[] args) {\n        A a = new A();\n        Thread t = new Thread(a, "Child Thread");\n        t.start();\n        t.interrupt();\n    }\n}\n')),(0,r.kt)("h2",{id:"synchronization"},"Synchronization"),(0,r.kt)("p",null,"It is not possible for two invocations of synchronized methods on the same object to interleave"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class SynchronizedCounter {\n    private int c = 0;\n\n    //Synchronized Method: The lock release occurs even if the return was caused by an uncaught exception\n    public synchronized void increment() {\n        c++;\n    }\n\n    public synchronized void decrement() {\n        c--;\n    }\n\n    public synchronized int value() {\n        return c;\n    }\n}\npublic class MsLunch {\n    private long c1 = 0;\n    private long c2 = 0;\n    private Object lock1 = new Object();\n    private Object lock2 = new Object();\n\n    public void inc1() {\n        synchronized(lock1) {\n            c1++;\n        }\n    }\n\n    public void inc2() {\n        synchronized(lock2) {\n            c2++;\n        }\n    }\n}\n\n")))}d.isMDXComponent=!0}}]);