"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[5487],{83:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>m,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var n=t(7462),s=(t(7294),t(3905));t(1839);const r={},m="3 Machine Learning",i={unversionedId:"Language/Python/3",id:"Language/Python/3",title:"3 Machine Learning",description:"Scikit-Learn",source:"@site/docs/Language/Python/3.md",sourceDirName:"Language/Python",slug:"/Language/Python/3",permalink:"/docs/Language/Python/3",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Language/Python/3.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"2 Data Science",permalink:"/docs/Language/Python/2"},next:{title:"Build and Test Tools",permalink:"/docs/Language/Tools"}},p={},o=[{value:"Scikit-Learn",id:"scikit-learn",level:2}],l={toc:o};function c(a){let{components:e,...t}=a;return(0,s.kt)("wrapper",(0,n.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"3-machine-learning"},"3 Machine Learning"),(0,s.kt)("h2",{id:"scikit-learn"},"Scikit-Learn"),(0,s.kt)("p",null,"OneHotEncoder"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def one_hot_encode(data):\n    \"\"\"\n    Return the one-hot encoded dataframe of our input data.\n    \n    Parameters\n    -----------\n    data: a dataframe that may include non-numerical features\n    \n    Returns\n    -----------\n    A one-hot encoded dataframe that only contains numeric features\n    \n    \"\"\"\n    enc = OneHotEncoder(drop='first') # remove redundancy by categories\n    # Eg:\n    # var1_apple = 1 - (var1_orange + var1_pear + var1_banana)\n    # var2_cat = 1 - (var2_dog + var2_fish)\n\n    enc.fit(data.select_dtypes(include='category'))\n    ohData = enc.transform(data.select_dtypes(include='category')).toarray()\n    ohResult = pd.DataFrame(ohData,columns= enc.get_feature_names_out())\n    # sex_Female    sex_Male    smoker_No   smoker_Yes  day_Fri day_Sat\n    return pd.concat([data.select_dtypes(exclude='category'),ohResult],axis =1)\n")),(0,s.kt)("p",null,"Linear Regression"),(0,s.kt)("p",null,"fit_intercept: bias as ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"\u03b8"),(0,s.kt)("mn",{parentName:"msub"},"0"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta_0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8444em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"\u03b8"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))))))),"(False) or not(True)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.linear_model import LinearRegression\n\nsklearn_model = LinearRegression(fit_intercept=False).fit(one_hot_X,tips)\nprint("sklearn with bias column thetas:")\nprint(sklearn_model.coef_)\n# sklearn with bias column thetas:\n# [ 0.25496633  0.09448701  0.175992    0.14370363  0.11126269  0.17068732\n#   0.084279    0.14104114  0.01958276  0.11556048 -0.02121806  0.09341886\n#   0.16154746]\n')))}c.isMDXComponent=!0}}]);