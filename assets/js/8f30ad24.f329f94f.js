"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[5487],{83:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));a(8209);const s={},l="3 Machine Learning",i={unversionedId:"Language/Python/3",id:"Language/Python/3",title:"3 Machine Learning",description:"Scikit-Learn",source:"@site/docs/Language/Python/3.md",sourceDirName:"Language/Python",slug:"/Language/Python/3",permalink:"/docs/Language/Python/3",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Language/Python/3.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"2 Data Science",permalink:"/docs/Language/Python/2"},next:{title:"Build and Test Tools",permalink:"/docs/Language/Tools"}},o={},p=[{value:"Scikit-Learn",id:"scikit-learn",level:2},{value:"Pytorch",id:"pytorch",level:2},{value:"Basic Operation",id:"basic-operation",level:3}],m={toc:p};function c(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"3-machine-learning"},"3 Machine Learning"),(0,r.kt)("h2",{id:"scikit-learn"},"Scikit-Learn"),(0,r.kt)("p",null,"OneHotEncoder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def one_hot_encode(data):\n    \"\"\"\n    Return the one-hot encoded dataframe of our input data.\n    \n    Parameters\n    -----------\n    data: a dataframe that may include non-numerical features\n    \n    Returns\n    -----------\n    A one-hot encoded dataframe that only contains numeric features\n    \n    \"\"\"\n    enc = OneHotEncoder(drop='first') # remove redundancy by categories\n    # Eg:\n    # var1_apple = 1 - (var1_orange + var1_pear + var1_banana)\n    # var2_cat = 1 - (var2_dog + var2_fish)\n\n    enc.fit(data.select_dtypes(include='category'))\n    ohData = enc.transform(data.select_dtypes(include='category')).toarray()\n    ohResult = pd.DataFrame(ohData,columns= enc.get_feature_names_out())\n    # sex_Female    sex_Male    smoker_No   smoker_Yes  day_Fri day_Sat\n    return pd.concat([data.select_dtypes(exclude='category'),ohResult],axis =1)\n")),(0,r.kt)("p",null,"Linear Regression"),(0,r.kt)("p",null,"fit_intercept: bias as ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"\u03b8"),(0,r.kt)("mn",{parentName:"msub"},"0"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta_0")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8444em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"\u03b8"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0278em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))))))),"(False) or not(True)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from sklearn.linear_model import LinearRegression\n\nsklearn_model = LinearRegression(fit_intercept=False).fit(one_hot_X,tips)\nprint("sklearn with bias column thetas:")\nprint(sklearn_model.coef_)\n# sklearn with bias column thetas:\n# [ 0.25496633  0.09448701  0.175992    0.14370363  0.11126269  0.17068732\n#   0.084279    0.14104114  0.01958276  0.11556048 -0.02121806  0.09341886\n#   0.16154746]\n')),(0,r.kt)("h2",{id:"pytorch"},"Pytorch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"torch.Tensor() is an alias for the default tensor type (torch.FloatTensor)."),(0,r.kt)("li",{parentName:"ul"},"torch.tensor(data, dtype=None, device=None, requires_grad=False)")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Data type"),(0,r.kt)("th",{parentName:"tr",align:null},"dtype"),(0,r.kt)("th",{parentName:"tr",align:null},"Tensor type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"32-bit floating point"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.float32 or torch.float"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.FloatTensor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"64-bit floating point"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.float64 or torch.double"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.DoubleTensor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16-bit floating point"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.float16 or torch.half"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.HalfTensor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8-bit integer (unsigned)"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.uint8"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.ByteTensor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8-bit integer (signed)"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.int8"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.CharTensor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16-bit integer (signed)"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.int16 or torch.short"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.ShortTensor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"32-bit integer (signed)"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.int32 or torch.int"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.IntTensor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"64-bit integer (signed)"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.int64 or torch.long"),(0,r.kt)("td",{parentName:"tr",align:null},"torch.*.LongTensor")))),(0,r.kt)("h3",{id:"basic-operation"},"Basic Operation"),(0,r.kt)("p",null,"tensor shape is determined by the iteration of square brackets"),(0,r.kt)("p",null,"torch.squeeze(): Returns a tensor with all specified dimensions of input of size 1 removed. If specified, a squeeze operation is done only in the given dimension."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"a = torch.tensor(1) # torch.Size([])\na = a.unsqueeze(dim = 0) # torch.Size([1,1])\n\n## squeeze and unsqueeze\na = torch.tensor([1,2]).unsqueeze(dim = 0) # torch.Size([1,2])\na = a.squeeze().unsqueeze(dim = 1) # torch.Size([2,1])\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tensor.tolist(): array"),(0,r.kt)("li",{parentName:"ul"},"Tensor.item(): scalar")))}c.isMDXComponent=!0}}]);