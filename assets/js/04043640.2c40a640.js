"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[1863],{3429:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=a(7462),l=(a(7294),a(3905)),r=a(1839);const i={},s="1 Python Basic",o={unversionedId:"C++/Python/1",id:"C++/Python/1",title:"1 Python Basic",description:"Functions",source:"@site/docs/C++/Python/1.md",sourceDirName:"C++/Python",slug:"/C++/Python/1",permalink:"/docs/C++/Python/1",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/C++/Python/1.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"6 Web Frameworks and ORM",permalink:"/docs/C++/Java/Java_6"},next:{title:"Build and Test Tools",permalink:"/docs/C++/Tools"}},p={},u=[{value:"Functions",id:"functions",level:2},{value:"Unpacking argument lists",id:"unpacking-argument-lists",level:3},{value:"lambda",id:"lambda",level:3},{value:"Function Annotations",id:"function-annotations",level:3},{value:"Iterable",id:"iterable",level:2},{value:"Common Sequence Operations",id:"common-sequence-operations",level:3},{value:"Immutable Sequence Types",id:"immutable-sequence-types",level:3},{value:"Mutable Sequence Types",id:"mutable-sequence-types",level:3},{value:"Data Types",id:"data-types",level:2},{value:"Numbers",id:"numbers",level:3},{value:"Strings",id:"strings",level:3},{value:"List",id:"list",level:3},{value:"Tuple",id:"tuple",level:3},{value:"Range",id:"range",level:3}],m={toc:u};function d(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"1-python-basic"},"1 Python Basic"),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"functions without a return statement return None"),(0,l.kt)("li",{parentName:"ul"},"default value: The default value is evaluated only once, unless it is a mutable object such as a list, dictionary, or instances of most classes"),(0,l.kt)("li",{parentName:"ul"},"keyword arguments must follow positional arguments")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'## General\ni = 5\ndef f(arg=i):\n    print(arg)\n\ni = 6\nf() # 5\n\n## Mutable object\ndef f(a, L=[]):\n    L.append(a)\n    return L\n\nprint(f(1)) # [1]\nprint(f(2)) # [1,2]\nprint(f(3)) # [1,2,3]\n\n# positional: *name, keyword: **name\ndef cheeseshop(kind, *arguments, **keywords):\n    # arguments receives a tuple, keywords receives a dictionary\n    print("-- Do you have any", kind, "?")\n    for arg in arguments:\n        print(arg)\n    for kw in keywords:\n        print(kw, ":", keywords[kw])\n')),(0,l.kt)("h3",{id:"unpacking-argument-lists"},"Unpacking argument lists"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'nums = [3, 6]\nlist(range(*nums)) # * to unpack the arguments out of a list or tuple->[3, 4, 5]\nd = {"voltage": "four million", "state": "bleedin\' demised", "action": "VOOM"}\nparrot(**d) # ** deliver keyword arguments\n')),(0,l.kt)("h3",{id:"lambda"},"lambda"),(0,l.kt)("p",null,"lambda parameter_list : expression"),(0,l.kt)("h3",{id:"function-annotations"},"Function Annotations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def input(__prompt: object = "") -> str: ...\n')),(0,l.kt)("h2",{id:"iterable"},"Iterable"),(0,l.kt)("p",null,"Any classes you define with an ","_","iter","_","() method or with a ","_","getitem","_","() method that implements sequence semantics are Iterable"),(0,l.kt)(r.G,{chart:"graph LR;\n\tSequenceTypes--\x3eIterable;\n    list--\x3eSequenceTypes;\n    Tuple--\x3eSequenceTypes;\n    Range--\x3eSequenceTypes;\n    dict--\x3eMappingTypes;\n    MappingTypes--\x3eIterable;",mdxType:"Mermaid"}),(0,l.kt)("h3",{id:"common-sequence-operations"},"Common Sequence Operations"),(0,l.kt)("p",null,"s and t are sequences of the same type, n, i, j and k are integers and x is an arbitrary object that meets any type and value restrictions imposed by s"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operation"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"x in s"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"x not in s"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s + t"),(0,l.kt)("td",{parentName:"tr",align:null},"concatenation, range excluded")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s ","*"," n or n ","*"," s"),(0,l.kt)("td",{parentName:"tr",align:null},"repeat ",(0,l.kt)("em",{parentName:"td"},"reference"),", range excluded")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s","[","i","]"),(0,l.kt)("td",{parentName:"tr",align:null},"index")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s","[","i:j:k","]"),(0,l.kt)("td",{parentName:"tr",align:null},"slice of s from i to j with step k")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"len(s)"),(0,l.kt)("td",{parentName:"tr",align:null},"The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"min(s)/max(s)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.count(x)"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20230428161659.png",alt:"20230428161659"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"lists = [[2]] * 3\nlists[0].append(3)\nprint(lists) # [[2, 3], [2, 3], [2, 3]]\n")),(0,l.kt)("h3",{id:"immutable-sequence-types"},"Immutable Sequence Types"),(0,l.kt)("p",null,"support hash()"),(0,l.kt)("h3",{id:"mutable-sequence-types"},"Mutable Sequence Types"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Operation"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s","[","i","]"," = x"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s","[","i:j:k","]"," = t"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.append(x)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.copy()"),(0,l.kt)("td",{parentName:"tr",align:null},"creates a shallow copy of s")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.extend(t) / s += t"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s *= n"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.insert(i, x)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.pop() or s.pop(i)"),(0,l.kt)("td",{parentName:"tr",align:null},"retrieves the item at i and also removes it from s")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.remove(x)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"s.reverse()"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"data-types"},"Data Types"),(0,l.kt)("h3",{id:"numbers"},"Numbers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Division (/) always returns a float. To do floor division and get an integer result you can use the // operator"),(0,l.kt)("li",{parentName:"ul"},"use the ** operator to calculate powers")),(0,l.kt)("h3",{id:"strings"},"Strings"),(0,l.kt)("p",null,"str is immutable, but it implement all of the common sequence operations"),(0,l.kt)("p",null,"Two ways of formating"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(f'The value of pi is approximately {math.pi:1.3f}.')\nprint('The value of pi is approximately {:1.3f}'.format(math.pi))\n# positional and keyword arguments\nprint('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',other='Georg'))\ntable = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\nprint('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table)) # Jack: 4098; Sjoerd: 4127; Dcab: 8637678\n")),(0,l.kt)("h3",{id:"list"},"List"),(0,l.kt)("p",null,"List is mutable"),(0,l.kt)("p",null,"More: "),(0,l.kt)("p",null,"list.sort(*, key=None, reverse=False)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"lst = [('Ann','20','400'), ('Scott','40','500'), ('Bean','10','450')]\nlst.sort(key=lambda x:x[1])\n\n# use cmp_to_key\nfrom functools import cmp_to_key\nlists = [1,23,2,134,51,213,12,33]\nlists.sort(key=cmp_to_key(lambda x,y:x-y))\n")),(0,l.kt)("h3",{id:"tuple"},"Tuple"),(0,l.kt)("p",null,"tuple is immutable"),(0,l.kt)("p",null,"Tuples may be constructed in a number of ways:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Using a pair of parentheses to denote the empty tuple: ()"),(0,l.kt)("li",{parentName:"ul"},"Using a trailing comma for a singleton tuple: a, or (a,)"),(0,l.kt)("li",{parentName:"ul"},"Separating items with commas: a, b, c or (a, b, c)"),(0,l.kt)("li",{parentName:"ul"},"Using the tuple() built-in: tuple() or tuple(iterable)")),(0,l.kt)("h3",{id:"range"},"Range"),(0,l.kt)("p",null,"range is immutable"))}d.isMDXComponent=!0}}]);