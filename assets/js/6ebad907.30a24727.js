"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[1784],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,k=c["".concat(p,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8187:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={},l="CS61C Lecture1 --Number Representation",o={unversionedId:"cs/cs61c_1",id:"cs/cs61c_1",title:"CS61C Lecture1 --Number Representation",description:"Number Representation",source:"@site/docs/cs/cs61c_1.md",sourceDirName:"cs",slug:"/cs/cs61c_1",permalink:"/docs/cs/cs61c_1",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/cs/cs61c_1.md",tags:[],version:"current",frontMatter:{},sidebar:"cs",previous:{title:"Index & Hashing",permalink:"/docs/cs/cs186_3"},next:{title:"CS61C Lecture2 --RISCV Assembly",permalink:"/docs/cs/cs61c_2"}},p={},s=[{value:"Number Representation",id:"number-representation",level:2},{value:"Unsigned",id:"unsigned",level:3},{value:"Signed-Magnitude",id:"signed-magnitude",level:3},{value:"Biased Notation",id:"biased-notation",level:3},{value:"Two\u2019s Complement",id:"twos-complement",level:3},{value:"Logical Operations",id:"logical-operations",level:2},{value:"Floating Point Representation",id:"floating-point-representation",level:2},{value:"Definition",id:"definition",level:3},{value:"Special Cases",id:"special-cases",level:3},{value:"Overflow and Underflow",id:"overflow-and-underflow",level:4},{value:"0,infinite and NAN",id:"0infinite-and-nan",level:4},{value:"Demorms",id:"demorms",level:4}],m={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cs61c-lecture1---number-representation"},"CS61C Lecture1 --Number Representation"),(0,i.kt)("h2",{id:"number-representation"},"Number Representation"),(0,i.kt)("h3",{id:"unsigned"},"Unsigned"),(0,i.kt)("p",null,"$\\sum_{i=0}^{w-1} x_i2^i$"),(0,i.kt)("h3",{id:"signed-magnitude"},"Signed-Magnitude"),(0,i.kt)("p",null,'"first" bit gives sign, rest treated as unsigned (magnitude)'),(0,i.kt)("h3",{id:"biased-notation"},"Biased Notation"),(0,i.kt)("p",null,"The actual value is the binary value plus a fixed bias"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220310164318.png",alt:null})),(0,i.kt)("h3",{id:"twos-complement"},"Two\u2019s Complement"),(0,i.kt)("p",null,"$-x",(0,i.kt)("em",{parentName:"p"},"{w-1}2^{w-1}+\\sum"),"{i=0}^{w-2} x_i2^i$"),(0,i.kt)("h2",{id:"logical-operations"},"Logical Operations"),(0,i.kt)("p",null,"Shift operations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Left Shift: throw away extra bits on left, fill with 0's on the right"),(0,i.kt)("li",{parentName:"ul"},"Right Shift: throw away extra bits on right",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"logical shift: fill with 0's on the left"),(0,i.kt)("li",{parentName:"ul"},"arithmetic shift: replicate most significant bit(x >> k gives$\\lfloor x/2^k \\rfloor$ towards negative infinity)")))),(0,i.kt)("h2",{id:"floating-point-representation"},"Floating Point Representation"),(0,i.kt)("h3",{id:"definition"},"Definition"),(0,i.kt)("p",null,"$(-1)^s\\times(1+Significand)\\times2^{E-bias}$"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220310163749.png",alt:"20220310163749"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"S represents Sign"),(0,i.kt)("p",{parentName:"li"},"  1 for negative, 0 for positive")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Significand"),(0,i.kt)("p",{parentName:"li"},"  implicit leading 1, signed-magnitude (not 2\u2019s complement)\n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Exponent(biased notation) "),(0,i.kt)("p",{parentName:"li"},"  Idea: we want floating point numbers to look small when their actual value is small"),(0,i.kt)("p",{parentName:"li"},"  $-(2^{k-1}-1)\\rightarrow2^k$(bias of 127 for 32bits, 1023 for 64bits)"))),(0,i.kt)("h3",{id:"special-cases"},"Special Cases"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220615204217.png",alt:"20220615204217"})),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Exponent(Biased)"),(0,i.kt)("th",{parentName:"tr",align:null},"Significand"),(0,i.kt)("th",{parentName:"tr",align:null},"Object"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"$\\pm0$")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"nonzero"),(0,i.kt)("td",{parentName:"tr",align:null},"Denorm")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1-254"),(0,i.kt)("td",{parentName:"tr",align:null},"aynthing"),(0,i.kt)("td",{parentName:"tr",align:null},"Normal Floating Point")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"255"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"$\\pm\\infty$")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"255"),(0,i.kt)("td",{parentName:"tr",align:null},"Nonzero"),(0,i.kt)("td",{parentName:"tr",align:null},"NaN")))),(0,i.kt)("h4",{id:"overflow-and-underflow"},"Overflow and Underflow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overflow ($>2^{128}$or$<-2^{128}$)"),(0,i.kt)("li",{parentName:"ul"},"Underflow ($-2^{149}<x<2^{149}$ without 0) ")),(0,i.kt)("h4",{id:"0infinite-and-nan"},"0,infinite and NAN"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"0:Bit pattern all 0s"),(0,i.kt)("li",{parentName:"ul"},"$\\infty$($1\\div0$)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sign bit 0 or 1, largest exponent (all 1s), 0 in fraction"))),(0,i.kt)("li",{parentName:"ul"},"NaN($\\infty-\\infty$,$0\\div0,\\sqrt{-4}$)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sign bit 0 or 1, largest exponent (all 1s), not zero in fraction")))),(0,i.kt)("p",null,"op(NaN, X) = NaN"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220310173933.png",alt:"20220310173933"})),(0,i.kt)("h4",{id:"demorms"},"Demorms"),(0,i.kt)("p",null,"Denormalized number: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"no (implied) leading 1(just Significand),frac nonzero"),(0,i.kt)("li",{parentName:"ul"},"exponent all 0,value = 1 \u2013 Bias (instead of 0 \u2013 Bias)")),(0,i.kt)("p",null,"Special Cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Smallest denorm: $\\pm0.0...01\\times2^{-126} = \\pm2^{-149}$"),(0,i.kt)("li",{parentName:"ul"},"Largest denorm: $\\pm0.1...1\\times2^{-126} = \\pm2(^{-126}-2^{-149})$"),(0,i.kt)("li",{parentName:"ul"},"Smallest norm: $\\pm1.0...0\\times2^{-126}=\\pm 2^{-126}$"),(0,i.kt)("li",{parentName:"ul"},"Largest norm: $\\pm1.1...1\\times2^{127}=\\pm (2^{128}-2^{104})$")))}u.isMDXComponent=!0}}]);