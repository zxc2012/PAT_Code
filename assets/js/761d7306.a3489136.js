"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[9427],{4810:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));a(1839);const r={},o="4 Java New Features",s={unversionedId:"C++/Java_4",id:"C++/Java_4",title:"4 Java New Features",description:"Optional",source:"@site/docs/C++/Java_4.md",sourceDirName:"C++",slug:"/C++/Java_4",permalink:"/docs/C++/Java_4",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/C++/Java_4.md",tags:[],version:"current",frontMatter:{},sidebar:"C",previous:{title:"3 Exceptions & IO",permalink:"/docs/C++/Java_3"},next:{title:"5 SpringBoot",permalink:"/docs/C++/Java_5"}},i={},p=[{value:"Optional",id:"optional",level:2},{value:"Stream",id:"stream",level:2},{value:"Method",id:"method",level:3},{value:"Lazy Evaluation",id:"lazy-evaluation",level:3}],u={toc:p};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"4-java-new-features"},"4 Java New Features"),(0,l.kt)("h2",{id:"optional"},"Optional"),(0,l.kt)("p",null,"Before Java 8, any number of operations involving accessing an object\u2019s methods or properties could result in a NullPointerException:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"String isocode = user.getAddress().getCountry().getIsocode().toUpperCase();\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Create Optional(Of, OfNullable)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Optional.ofNullable(user);"))),(0,l.kt)("li",{parentName:"ul"},"ReturnValues",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'Optional.ofNullable(user).ifPresent(u -> logger.info("User is:" + u.getEmail()))'),(0,l.kt)("li",{parentName:"ul"},"Optional.ofNullable(user).orElse(createNewUser());"),(0,l.kt)("li",{parentName:"ul"},'Optional.ofNullable(user).ifPresentOrElse( u -> logger.info("User is:" + u.getEmail()), () -> logger.info("User not found"));')))),(0,l.kt)("h2",{id:"stream"},"Stream"),(0,l.kt)("p",null,"Streams are wrappers around a data source, allowing us to operate with that data source and making bulk processing convenient and fast."),(0,l.kt)("p",null,"Stream pipeline: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"source: A collection, an array, a generator function, or an I/O channel."),(0,l.kt)("li",{parentName:"ul"},"Zero or more intermediate operations: An intermediate operation, such as filter, produces a new stream."),(0,l.kt)("li",{parentName:"ul"},"A terminal operation: produces a non-stream result, such as a primitive value (like a double value), a collection.")),(0,l.kt)("h3",{id:"method"},"Method"),(0,l.kt)("p",null,"forEach() is a terminal function. After the operation is performed, the stream pipeline is considered consumed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenIncrementSalaryForEachEmployee_thenApplyNewSalary() {    \n    empList.stream().forEach(e -> e.salaryIncrement(10.0));\n    \n    assertThat(empList, contains(\n      hasProperty("salary", equalTo(110000.0)),\n      hasProperty("salary", equalTo(220000.0)),\n      hasProperty("salary", equalTo(330000.0))\n    ));\n}\n')),(0,l.kt)("p",null,"The strategy for collect() is provided via the ",(0,l.kt)("em",{parentName:"p"},"Collector")," interface implementation. In the example below, we used the toList collector to collect all Stream elements into a List instance."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Test\npublic void whenFindFirst_thenGetFirstEmployeeInStream() {\n    Integer[] empIds = { 1, 2, 3, 4 };\n    \n    List<Employee> employees = Stream.of(empIds)\n      .map(employeeRepository::findById)\n      .filter(e -> e != null)\n      .filter(e -> e.getSalary() > 200000)\n      .collect(Collectors.toList());\n    \n    assertEquals(Arrays.asList(arrayOfEmps[2]), employees);\n}\n")),(0,l.kt)("p",null,"findFirst() returns an Optional for the first entry in the stream; the Optional can, of course, be empty."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Test\npublic void whenFindFirst_thenGetFirstEmployeeInStream() {\n    Integer[] empIds = { 1, 2, 3, 4 };\n    \n    Employee employee = Stream.of(empIds)\n      .map(employeeRepository::findById)\n      .filter(e -> e != null)\n      .filter(e -> e.getSalary() > 100000)\n      .findFirst()\n      .orElse(null);\n    \n    assertEquals(employee.getSalary(), new Double(200000));\n}\n")),(0,l.kt)("p",null,"We saw forEach() earlier in this section, which is a terminal operation. However, sometimes we need to perform multiple operations on each element of the stream before any terminal operation is applied."),(0,l.kt)("p",null,"peek() is a intermediate operation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenIncrementSalaryUsingPeek_thenApplyNewSalary() {\n    Employee[] arrayOfEmps = {\n        new Employee(1, "Jeff Bezos", 100000.0), \n        new Employee(2, "Bill Gates", 200000.0), \n        new Employee(3, "Mark Zuckerberg", 300000.0)\n    };\n\n    List<Employee> empList = Arrays.asList(arrayOfEmps);\n    \n    empList.stream()\n      .peek(e -> e.salaryIncrement(10.0))\n      .peek(System.out::println)\n      .collect(Collectors.toList());\n\n    assertThat(empList, contains(\n      hasProperty("salary", equalTo(110000.0)),\n      hasProperty("salary", equalTo(220000.0)),\n      hasProperty("salary", equalTo(330000.0))\n    ));\n}\n')),(0,l.kt)("h3",{id:"lazy-evaluation"},"Lazy Evaluation"),(0,l.kt)("p",null,"Computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed."),(0,l.kt)("p",null,"All intermediate operations are lazy, so they\u2019re not executed until a result of a processing is actually needed."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Short-circuiting"),":When findFirst() meets, the remaining employees will not evalute."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"@Test\npublic void whenFindFirst_thenGetFirstEmployeeInStream() {\n    Integer[] empIds = { 1, 2, 3, 4 };\n    \n    Employee employee = Stream.of(empIds)\n      .map(employeeRepository::findById)\n      .filter(e -> e != null)\n      .filter(e -> e.getSalary() > 100000)\n      .findFirst()\n      .orElse(null);\n    \n    assertEquals(employee.getSalary(), new Double(200000));\n}\n")))}m.isMDXComponent=!0}}]);