"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[3401],{806:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>o,frontMatter:()=>r,metadata:()=>p,toc:()=>m});var n=a(7462),s=(a(7294),a(3905));a(1839);const r={},l="1 Abstraction",p={unversionedId:"cs/Operating_System/OS_1",id:"cs/Operating_System/OS_1",title:"1 Abstraction",description:"Overview",source:"@site/docs/cs/Operating_System/OS_1.md",sourceDirName:"cs/Operating_System",slug:"/cs/Operating_System/OS_1",permalink:"/docs/cs/Operating_System/OS_1",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/cs/Operating_System/OS_1.md",tags:[],version:"current",frontMatter:{},sidebar:"cs",previous:{title:"Numrical Analysis Summary",permalink:"/docs/cs/Math/numerical"},next:{title:"2 Synchronization",permalink:"/docs/cs/Operating_System/OS_2"}},i={},m=[{value:"Overview",id:"overview",level:2},{value:"Compare of cs61c and cs162",id:"compare-of-cs61c-and-cs162",level:3},{value:"Four fundamental OS concepts",id:"four-fundamental-os-concepts",level:2},{value:"Thread",id:"thread",level:3},{value:"Concept",id:"concept",level:4},{value:"Concurrency",id:"concurrency",level:4},{value:"User/Kernel Threading Models",id:"userkernel-threading-models",level:4},{value:"Address Space",id:"address-space",level:3},{value:"Process",id:"process",level:3},{value:"Process Management API",id:"process-management-api",level:4},{value:"Internal Events--PCB",id:"internal-events--pcb",level:4},{value:"External Events--Interrupt",id:"external-events--interrupt",level:4},{value:"Dual Mode Operation",id:"dual-mode-operation",level:3}],c={toc:m};function o(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"1-abstraction"},"1 Abstraction"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"BIOS:Basic Input Output System"),(0,s.kt)("li",{parentName:"ul"},"PC(program counter) SP(stack pointer)"),(0,s.kt)("li",{parentName:"ul"},"CS:IP code segment : instruction pointer."),(0,s.kt)("li",{parentName:"ul"},".s source code files written in assembly")),(0,s.kt)("h3",{id:"compare-of-cs61c-and-cs162"},"Compare of cs61c and cs162"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Processor -- Thread"),(0,s.kt)("li",{parentName:"ul"},"Memory -- Address Space"),(0,s.kt)("li",{parentName:"ul"},"Disks,SSDS,... -- Files"),(0,s.kt)("li",{parentName:"ul"},"Networks -- Sockets"),(0,s.kt)("li",{parentName:"ul"},"Machines -- Processes")),(0,s.kt)("p",null,"Instruction Fetch/Decode/Execute"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/202300001.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,s.kt)("h2",{id:"four-fundamental-os-concepts"},"Four fundamental OS concepts"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Thread: execution context"),(0,s.kt)("li",{parentName:"ul"},"Address space: set of memory address accessible to program(r/o)"),(0,s.kt)("li",{parentName:"ul"},"Process: instance of a running program(protected address space+ >=1 threads)"),(0,s.kt)("li",{parentName:"ul"},'Dual Mode operation/Protection: only the "system" has the ability to access certain resources')),(0,s.kt)("h3",{id:"thread"},"Thread"),(0,s.kt)("h4",{id:"concept"},"Concept"),(0,s.kt)("p",null,"3 states"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"running"),(0,s.kt)("li",{parentName:"ul"},"ready \u2013 eligible to run, but not currently running"),(0,s.kt)("li",{parentName:"ul"},"blocked \u2013 ineligible to run (e.g.waiting for an I/O to finish)")),(0,s.kt)("p",null,"API"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"yield() \u2014 Current thread yields the CPU"),(0,s.kt)("li",{parentName:"ul"},"sleep() (e.g., sending to full buffer)"),(0,s.kt)("li",{parentName:"ul"},"wakeup() (e.g., buffer space becomes available)")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220503163341.png",alt:"20220503163341"})),(0,s.kt)("h4",{id:"concurrency"},"Concurrency"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Concurrency vs parallelism"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Concurrency is about handling multiple things at once(Networked servers must handle ",(0,s.kt)("em",{parentName:"li"},"concurrent")," requests)"),(0,s.kt)("li",{parentName:"ul"},"Parallelism is about doing multiple things simultaneously(Parallel programs must ",(0,s.kt)("em",{parentName:"li"},"parallelise")," for performance)"),(0,s.kt)("li",{parentName:"ul"},"Parallel => concurrent, but not the other way round!"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Multiprocessing vs multithreading"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Multiprocessing: Multiple CPUs(cores)"),(0,s.kt)("li",{parentName:"ul"},"Multithreading: Multiple threads/processes")),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210317164857.png",alt:"20210317164857"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210317165234.png",alt:"20210317165234"})))),(0,s.kt)("h4",{id:"userkernel-threading-models"},"User/Kernel Threading Models"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"One-to-one: All major operating systems: Windows, Linux (with the Native POSIX Thread Library), macOS"),(0,s.kt)("li",{parentName:"ul"},"Many-to-one: GNU Portable Threads (Pth)"),(0,s.kt)("li",{parentName:"ul"},"Many-to-many: Windows user-mode scheduling")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220531163348.png",alt:"20220531163348"})),(0,s.kt)("h3",{id:"address-space"},"Address Space"),(0,s.kt)("p",null,"Base and bounds registers are visible/accessible only\nwhen processor is running in ",(0,s.kt)("em",{parentName:"p"},"supervisor")," mode"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/202300002.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe33"})),(0,s.kt)("h3",{id:"process"},"Process"),(0,s.kt)("p",null,"Thread encapsulate ",(0,s.kt)("em",{parentName:"p"},"concurrency")),(0,s.kt)("p",null,"Address spaces encapsulate ",(0,s.kt)("em",{parentName:"p"},"protection")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210310171008806.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,s.kt)("h4",{id:"process-management-api"},"Process Management API"),(0,s.kt)("p",null,"pthread: posix(portable operating system interface)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"join(pid) - suspends execution of the calling thread until the target ",(0,s.kt)("em",{parentName:"p"},"pid")," terminates ")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"exit \u2013 terminate a process")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"fork \u2013 copy the current process"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},">"),(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},">0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5782em",verticalAlign:"-0.0391em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},">"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"))))),": Returned to parent or caller,return value is pid of new child"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"=0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"))))),": Returned to the newly created child process"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"<"),(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"<0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5782em",verticalAlign:"-0.0391em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"))))),": error creating,running in original process"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"exec \u2013 change the program being run by the current process")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"wait \u2013  pauses the parent until the child finishes,crashes, or is terminated"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-c"},'int main(int argc, char* argv[]){\n    pid_t cpid,tcpid;\n    cpid = fork();\n    int status;\n    pid_t mypid=getpid();\n    if (cpid > 0) {               /* Parent Process */\n        tcpid = wait(&status);\n        printf("%d wait%d(%d)",mypid,tcpid,status);\n    } else if (cpid == 0) {      /* Child Process */\n        mypid = getpid();\n        printf("[%d] child\\n", mypid);\n        char *myargs[3];\n        myargs[0] = strdup("wc");   // program: "wc" (word count)\n        myargs[1] = strdup("test.cpp"); // argument: file to count\n        myargs[2] = NULL;           // marks end of array\n        execvp(myargs[0], myargs);  // runs word count\n        printf("this shouldn\'t print out.\\n");\n    }\n}\n')),(0,s.kt)("p",{parentName:"li"},"  output:"),(0,s.kt)("blockquote",{parentName:"li"},(0,s.kt)("p",{parentName:"blockquote"},"[8042]"," child")),(0,s.kt)("blockquote",{parentName:"li"},(0,s.kt)("p",{parentName:"blockquote"},"8041 wait8042(256)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"kill \u2013 send a signal (interrupt-like notification) to another process")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"signal \u2013 system call to send a notification to another process"))),(0,s.kt)("p",null,"Main thread creates (forks) collection of sub-threads passing them args to work on, and then ",(0,s.kt)("em",{parentName:"p"},"join"),"s with them, collecting results"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220120162550.png",alt:"20220120162550"})),(0,s.kt)("h4",{id:"internal-events--pcb"},"Internal Events--PCB"),(0,s.kt)("p",null,"PCB is used for saving states in a ",(0,s.kt)("em",{parentName:"p"},"context")),(0,s.kt)("p",null,"For multi-threaded process, substitute process \u2192 thread and\nPCB \u2192 TCB"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220120162249.png",alt:"20220120162249"})),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20220503162234.png",alt:"20220503162234"})),(0,s.kt)("h4",{id:"external-events--interrupt"},"External Events--Interrupt"),(0,s.kt)("p",null,"Example:web server"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210317172017.png",alt:"20210317172017"})),(0,s.kt)("h3",{id:"dual-mode-operation"},"Dual Mode Operation"),(0,s.kt)("p",null,"Unix structure"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/Kernel.png",alt:"20210317172017"})),(0,s.kt)("p",null,"3 types of user",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2192")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2192"))))),"kernel mode transfer"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"syscall",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"process requests a system service,e.g.,exit()"),(0,s.kt)("li",{parentName:"ul"},'like a function call, but "outside" the process'))),(0,s.kt)("li",{parentName:"ul"},"interrupt",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"external asychronous event triggers context switch "),(0,s.kt)("li",{parentName:"ul"},"e.g.,timer, I/O device"))),(0,s.kt)("li",{parentName:"ul"},"trap/exception",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"internal asychronous event in process triggers context switch"),(0,s.kt)("li",{parentName:"ul"},"e.g.,protection violation(segment fault),divide by zero")))))}o.isMDXComponent=!0}}]);