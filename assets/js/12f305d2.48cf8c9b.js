"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[9308],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||l;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=m;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6976:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const l={},i="Huffman Tree",a={unversionedId:"Algorithms/greedy",id:"Algorithms/greedy",title:"Huffman Tree",description:"Introduction",source:"@site/docs/Algorithms/greedy.md",sourceDirName:"Algorithms",slug:"/Algorithms/greedy",permalink:"/docs/Algorithms/greedy",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/greedy.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",previous:{title:"\u4f4d\u8fd0\u7b97\u603b\u7ed3",permalink:"/docs/Algorithms/bit_operation"},next:{title:"\u5251\u6307offer",permalink:"/docs/Algorithms/point"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Proof",id:"proof",level:2},{value:"Theorem",id:"theorem",level:3},{value:"Lemma",id:"lemma",level:3},{value:"Correctness proof",id:"correctness-proof",level:3}],s={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"huffman-tree"},"Huffman Tree"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fixed-length coding: Information Entropy(en- tropical",(0,o.kt)("inlineCode",{parentName:"li"},"turn"),"\u6df7\u4e71)"),(0,o.kt)("li",{parentName:"ul"},"Variable-length coding: Prefix-Free code (no codeword is a prefix of a codework of another symbol)")),(0,o.kt)("h2",{id:"proof"},"Proof"),(0,o.kt)("h3",{id:"theorem"},"Theorem"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"T: a tree for some prefix encoding A and some probability distribution p over the symbols."),(0,o.kt)("li",{parentName:"ul"},"x and y: two leaves"),(0,o.kt)("li",{parentName:"ul"},"T': the tree obtained by swapping x and y in T.")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Then")),(0,o.kt)("p",null,"$E_p(T')-E_p(T)=(p(x)-p(y))(depth(y,T)-depth(x,T))$"),(0,o.kt)("h3",{id:"lemma"},"Lemma"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"something received or taken (di-:both side)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"An optimal tree"),"\ntwo symbols with least probabilities are sibling leaves in the lowest level.\n",(0,o.kt)("em",{parentName:"p"},"Easy")),(0,o.kt)("h3",{id:"correctness-proof"},"Correctness proof"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"n=2 obvious"),(0,o.kt)("li",{parentName:"ul"},"n>2")),(0,o.kt)("p",null,"Consider an alphabet A of n-1 letters.(except the two least probabilities leaves which parent is z) "),(0,o.kt)("p",null,"Let T be an optimum tree for A"),(0,o.kt)("p",null,"Let A'=A+{x,y}-z,T':adding x,y as children of z."),(0,o.kt)("p",null,"$H'$:optimum tree for A' "),(0,o.kt)("p",null,"$H$:removing x,y from H;"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Then"),"\n$E_p(T)<=E_p(H)$"),(0,o.kt)("p",null,"$E_p(T')=E_p(T)+p(x)+p(y)<=E_p(H')$"),(0,o.kt)("p",null,"$E_p(T')>=E_p(H')$"),(0,o.kt)("p",null,"so $E_p(T')=E_p(H')$"),(0,o.kt)("h1",{id:"trees"},"Tree's"))}u.isMDXComponent=!0}}]);