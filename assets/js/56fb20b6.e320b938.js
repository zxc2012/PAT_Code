"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[4469],{5162:(a,e,n)=>{n.d(e,{Z:()=>r});var t=n(7294),s=n(6010);const m="tabItem_Ymn6";function r(a){let{children:e,hidden:n,className:r}=a;return t.createElement("div",{role:"tabpanel",className:(0,s.Z)(m,r),hidden:n},e)}},4866:(a,e,n)=>{n.d(e,{Z:()=>b});var t=n(7462),s=n(7294),m=n(6010),r=n(2466),l=n(6550),p=n(1980),i=n(7392),o=n(12);function c(a){return function(a){var e;return(null==(e=s.Children.map(a,(a=>{if(!a||(0,s.isValidElement)(a)&&function(a){const{props:e}=a;return!!e&&"object"==typeof e&&"value"in e}(a))return a;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof a.type?a.type:a.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:e.filter(Boolean))??[]}(a).map((a=>{let{props:{value:e,label:n,attributes:t,default:s}}=a;return{value:e,label:n,attributes:t,default:s}}))}function N(a){const{values:e,children:n}=a;return(0,s.useMemo)((()=>{const a=e??c(n);return function(a){const e=(0,i.l)(a,((a,e)=>a.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((a=>a.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(a),a}),[e,n])}function u(a){let{value:e,tabValues:n}=a;return n.some((a=>a.value===e))}function k(a){let{queryString:e=!1,groupId:n}=a;const t=(0,l.k6)(),m=function(a){let{queryString:e=!1,groupId:n}=a;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,p._X)(m),(0,s.useCallback)((a=>{if(!m)return;const e=new URLSearchParams(t.location.search);e.set(m,a),t.replace({...t.location,search:e.toString()})}),[m,t])]}function h(a){const{defaultValue:e,queryString:n=!1,groupId:t}=a,m=N(a),[r,l]=(0,s.useState)((()=>function(a){let{defaultValue:e,tabValues:n}=a;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((a=>a.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((a=>a.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:e,tabValues:m}))),[p,i]=k({queryString:n,groupId:t}),[c,h]=function(a){let{groupId:e}=a;const n=function(a){return a?`docusaurus.tab.${a}`:null}(e),[t,m]=(0,o.Nk)(n);return[t,(0,s.useCallback)((a=>{n&&m.set(a)}),[n,m])]}({groupId:t}),g=(()=>{const a=p??c;return u({value:a,tabValues:m})?a:null})();(0,s.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:r,selectValue:(0,s.useCallback)((a=>{if(!u({value:a,tabValues:m}))throw new Error(`Can't select invalid tab value=${a}`);l(a),i(a),h(a)}),[i,h,m]),tabValues:m}}var g=n(2389);const d="tabList__CuJ",f="tabItem_LNqP";function v(a){let{className:e,block:n,selectedValue:l,selectValue:p,tabValues:i}=a;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),N=a=>{const e=a.currentTarget,n=o.indexOf(e),t=i[n].value;t!==l&&(c(e),p(t))},u=a=>{var e;let n=null;switch(a.key){case"Enter":N(a);break;case"ArrowRight":{const e=o.indexOf(a.currentTarget)+1;n=o[e]??o[0];break}case"ArrowLeft":{const e=o.indexOf(a.currentTarget)-1;n=o[e]??o[o.length-1];break}}null==(e=n)||e.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":n},e)},i.map((a=>{let{value:e,label:n,attributes:r}=a;return s.createElement("li",(0,t.Z)({role:"tab",tabIndex:l===e?0:-1,"aria-selected":l===e,key:e,ref:a=>o.push(a),onKeyDown:u,onClick:N},r,{className:(0,m.Z)("tabs__item",f,null==r?void 0:r.className,{"tabs__item--active":l===e})}),n??e)})))}function w(a){let{lazy:e,children:n,selectedValue:t}=a;const m=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const a=m.find((a=>a.props.value===t));return a?(0,s.cloneElement)(a,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},m.map(((a,e)=>(0,s.cloneElement)(a,{key:e,hidden:a.props.value!==t}))))}function y(a){const e=h(a);return s.createElement("div",{className:(0,m.Z)("tabs-container",d)},s.createElement(v,(0,t.Z)({},a,e)),s.createElement(w,(0,t.Z)({},a,e)))}function b(a){const e=(0,g.Z)();return s.createElement(y,(0,t.Z)({key:String(e)},a))}},1012:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var t=n(7462),s=(n(7294),n(3905)),m=(n(1839),n(4866)),r=n(5162);const l={},p="3 Basic Strategy",i={unversionedId:"Algorithms/3",id:"Algorithms/3",title:"3 Basic Strategy",description:"Divide and Conquer",source:"@site/docs/Algorithms/3.md",sourceDirName:"Algorithms",slug:"/Algorithms/3",permalink:"/docs/Algorithms/3",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/3.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",previous:{title:"2 \u66b4\u529b\u6c42\u89e3/\u6570\u5b66\u95ee\u9898",permalink:"/docs/Algorithms/2"},next:{title:"4 Data Structure",permalink:"/docs/Algorithms/4"}},o={},c=[{value:"Divide and Conquer",id:"divide-and-conquer",level:2},{value:"Case1: Merge subproblem",id:"case1-merge-subproblem",level:3},{value:"Case2: Binary Search",id:"case2-binary-search",level:3},{value:"Two pointers",id:"two-pointers",level:2},{value:"Merge Intervals",id:"merge-intervals",level:3},{value:"Sliding Window",id:"sliding-window",level:3},{value:"Hash",id:"hash",level:2},{value:"Bit Manipulation",id:"bit-manipulation",level:2},{value:"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570",id:"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570",level:3},{value:"Set Mismatch",id:"set-mismatch",level:3},{value:"Sort",id:"sort",level:2},{value:"Brute Force",id:"brute-force",level:3},{value:"Decrease &amp; Conquer",id:"decrease--conquer",level:3},{value:"Divide &amp; Conquer",id:"divide--conquer",level:3},{value:"Transform &amp; Conquer",id:"transform--conquer",level:3},{value:"Heap sort",id:"heap-sort",level:4}],N={toc:c};function u(a){let{components:e,...n}=a;return(0,s.kt)("wrapper",(0,t.Z)({},N,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"3-basic-strategy"},"3 Basic Strategy"),(0,s.kt)("h2",{id:"divide-and-conquer"},"Divide and Conquer"),(0,s.kt)("p",null,"Deciding the term before the subproblem(e.g. half\u4e4b\u95f4\u53ef\u6bd4\u5927\u5c0f)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Case1: ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mfrac",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"mfrac"},"n"),(0,s.kt)("mn",{parentName:"mfrac"},"2")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u21d2"),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T(n) = 2T(\\frac n2) + O(n) \\Rightarrow T(n) = O(nlogn)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.095em",verticalAlign:"-0.345em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,s.kt)("span",{parentName:"span",className:"mfrac"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.6954em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.655em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.23em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,s.kt)("span",{parentName:"span",style:{top:"-3.394em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.345em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u21d2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,s.kt)("li",{parentName:"ul"},"Case2: ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mfrac",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"mfrac"},"n"),(0,s.kt)("mn",{parentName:"mfrac"},"2")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"\u21d2"),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T(n) = T(\\frac n2) + O(1)/O(n) \\Rightarrow T(n) = O(logn)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.095em",verticalAlign:"-0.345em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mopen nulldelimiter"}),(0,s.kt)("span",{parentName:"span",className:"mfrac"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.6954em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.655em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",style:{top:"-3.23em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),(0,s.kt)("span",{parentName:"span",style:{top:"-3.394em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.345em"}},(0,s.kt)("span",{parentName:"span"}))))),(0,s.kt)("span",{parentName:"span",className:"mclose nulldelimiter"})),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mord"},"/"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u21d2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,s.kt)("h3",{id:"case1-merge-subproblem"},"Case1: Merge subproblem"),(0,s.kt)("p",null,"Given a collection of n plugs of different widths, and n corresponding sockets. You are allowed to try plug and socket together, from which you can determine whether the socket is too large, too small, or an exac natch for the plug, but there is no way to compare two socket together, or two plugs together. You are asked to match each plug to its socket. "),(0,s.kt)("p",null,"Solution: Select a plug p, and use it to separate the sockets into 3 sets, those smaller than p(S1), those bigger than p (S2), and the single socket s that matches p. Uses to do the same for the remaining plugs, separating them into those smaller than s (P1), and those bigger than s (P2). This takes a total of 2n - 1 comparisons (n for the sockets, and n - 1 for the prugs)\nSince the plugs in P1 match\nsockets in S1, and the plugs in P2 match the sockets in S2, it remains to apply\nthe algorithm recursively to both P1 U S1, and P2 U S2"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow"},"\u21d2"),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"T(n) = T(i) + T(n-1-i) + 2n-1 \\Rightarrow T(n) = O(nlogn)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u21d2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,s.kt)("h3",{id:"case2-binary-search"},"Case2: Binary Search"),(0,s.kt)("p",null,"\u5728\u95ed\u533a\u95f4\u67e5\u627e","[begin,end]",",\u6ce8\u610f\u5bf9\u627e\u4e0d\u5230\u7684\u5904\u7406"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int binary_find(vector<int>& nums, int target){\n    int l=0,r=nums.size()-1;//Notice1\n    while(l<r){\n        int mid=l+(r-l)/2;//Notice2\n        if(nums[mid]==target)return mid;\n        else if(nums[mid]>target)r=mid-1;\n        else l=mid+1;\n    }\n    return nums[l]==target?l:-1;\n}\n")),(0,s.kt)("p",null,"Floating Point"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"double floating_find(double l, double r)\n{\n    while (r - l > eps)\n    {\n        double mid = (l + r) / 2;\n        if (check(mid)) r = mid;\n        else l = mid;\n    }\n    return l;\n}\n")),(0,s.kt)("p",null,"Find the bound"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"\u5728[begin,end)\u67e5\u627e,\u6545\u683c\u5916\u6ce8\u610f\u8fb9\u754c"),(0,s.kt)("li",{parentName:"ol"},"\u5148\u60f3\u6700\u7ec8\u76ee\u6807>or>=,\u7136\u540e\u6ee1\u8db3\u6761\u4ef6\u65f6\u53f3\u4e0d\u53d8,\u4e0d\u6ee1\u8db3\u65f6\u5de6\u52a0\u4e00"),(0,s.kt)("li",{parentName:"ol"},"\u6ce8\u610f\u53d8\u5f0f\u5982\u6c42\u4e0a\u754c(\u6ce8\u91ca\u90e8\u5206)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int upper_bound(vector<int>& nums, int target){\n    int l=0,n=nums.size();//Notice1\n    int r=n;\n    while(l<r){\n        int mid=l+(r-l)/2);//Notice2\n        if(nums[mid]>target)r=mid;\n        else l=mid+1;\n    }\n    if(r==n||nums[l]!=target)return -1;\n    else return l;\n    /*\n    if(l==0||nums[l-1]!=target)return -1;\n    else return l-1;    \n    */\n}\nint lower_bound(vector<int>& nums, int target){\n    int l=0,n=nums.size();//Notice1\n    int r=n;\n    while(l<r){\n        int mid=l+(r-l)/2);//Notice2\n        if(nums[mid]>=target)r=mid;\n        else l=mid+1;\n    }\n    if(r==n||nums[l]!=target)return -1;\n    else return l;\n}\n")),(0,s.kt)("h2",{id:"two-pointers"},"Two pointers"),(0,s.kt)("h3",{id:"merge-intervals"},"Merge Intervals"),(0,s.kt)("p",null,"first pointer: merged interval right end"),(0,s.kt)("p",null,"second pointer: the unmerged part"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<vector<int>> merge(vector<vector<int>>& intervals) {\n    sort(intervals.begin(),intervals.end());\n    int n = intervals.size();\n    vector<vector<int>> ans;\n    ans.push_back(intervals[0]);\n    for(int i =1;i<n;++i){\n        if(intervals[i][0]<=ans.back()[1]){\n            ans.back()[1] = max(ans.back()[1],intervals[i][1]);\n        }\n        else{\n            ans.push_back(intervals[i]);\n        }\n    }\n    return ans;\n}\n")),(0,s.kt)("h3",{id:"sliding-window"},"Sliding Window"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Leetcode76")),(0,s.kt)("p",null,'Given two strings s and t of lengths m and n respectively, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string ""'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string minWindow(string s, string t) {\n        fill(flag,flag+128,0);\n        fill(each,each+128,0);\n        int n=t.size();\n        int m=s.size();\n        int cap;\n        int count=0,start=0,mini=m+1;//\u6613\u9519\u70b91\n        for(int i=0;i<n;++i)flag[t[i]]=1,each[t[i]]++;\n        for(int i=0;i<m;++i){\n            if(flag[s[i]]){\n                if(--each[s[i]]>=0)count++;\n                while(count==n){\n                    if(i-start+1<mini){\n                        mini=i-start+1;\n                        cap=start;\n                    }\n                    if(flag[s[start]]&&++each[s[start]]>0)count--;\n                    ++start;\n                }\n            }\n        }\n        return mini==m+1?"":s.substr(cap,mini);\n    }\nprivate:\n    int flag[128];\n    int each[128];\n};\n')),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Leetcode3")),(0,s.kt)("p",null,"Given a string s, find the length of the longest substring without repeating characters."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        fill(each,each+128,0);\n        int n=s.size();\n        int start=0,maxi=0;\n        for(int i=0;i<n;++i){\n            char p=s[i];\n            if(++each[p]>1){\n                while(start<i&&s[start]!=p){\n                    --each[s[start]];\n                    ++start;\n                }\n                if(start!=i){\n                    --each[s[start]];\n                    ++start;\n                }\n            }   \n            maxi=max(maxi,i-start+1);\n        }\n        return maxi;\n    }\nprivate:\n    int each[128];\n};\n")),(0,s.kt)("h2",{id:"hash"},"Hash"),(0,s.kt)("p",null,"\u601d\u8def"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u8bb0\u5f55\u4e0a\u4e00\u6b21\u4f4d\u7f6e(\u662f\u5426\u51fa\u73b0)\n")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"\u7528vector\u5b58,\u9700\u8981\u4ece-1\u5f00\u59cb"),(0,s.kt)("li",{parentName:"ul"},"\u7528unordered_map\u5b58,\u6ce8\u610f\u5148\u5224\u65adcount"))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Leetcode 3 Longest Substring Without Repeating Characters")),(0,s.kt)("p",null,"Given a string s, find the length of the longest substring without repeating characters."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// unordered_map\nint lengthOfLongestSubstring(string s) {\n    unordered_map<char,int> record;\n    int ans = 0;\n    int n = s.size();\n    int j = -1;\n    for (int i =0;i<n;++i){\n        if(record.count(s[i])&&record[s[i]]>j){\n            j = record[s[i]];\n        }\n        record[s[i]] = i;\n        ans = max(ans, i - j);\n    }\n    return ans;\n}\n// vector\nint lengthOfLongestSubstring(string s) {\n    vector<int> record(256,-1);\n    int ans = 0;\n    int n = s.size();\n    int j = -1;\n    for (int i =0;i<n;++i){\n        j = max(j,record[s[i]]);\n        record[s[i]] = i;\n        ans = max(ans, i - j);\n    }\n    return ans;\n}\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570(\u5f80\u5f80\u53ef\u4ee5\u8054\u7cfbTwo pointers)")),(0,s.kt)("h2",{id:"bit-manipulation"},"Bit Manipulation"),(0,s.kt)("h3",{id:"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},"\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking"},"\u9898\u76ee\u94fe\u63a5")),(0,s.kt)("p",null,"\u6bcf\u4f4d\u904d\u5386O(n)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n     int  NumberOf1(int n) {\n         unsigned int flag=1,sum=0;\n         for(int i=0;i<32;++i){\n             sum+=flag&n?1:0;\n             flag<<=1;\n         }\n         return sum;\n     }\n};\n")),(0,s.kt)("p",null,"\u53ea\u904d\u53861\u7684\u4e2a\u6570O(m)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n     int  NumberOf1(int n) {\n         unsigned int sum=0;\n         while(n!=0){\n             n=n&(n-1);\n             sum++;\n         }\n         return sum;\n     }\n};\n")),(0,s.kt)("h3",{id:"set-mismatch"},"Set Mismatch"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/set-mismatch/"},"\u9898\u76ee\u94fe\u63a5")),(0,s.kt)("p",null,"a set of integers 1 to n but got repetition of one number and loss of another number,e.g. ","[1,2,2,4]"),(0,s.kt)("p",null,"find the duplicate and the missing."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u5728\u540e\u9762\u6dfb\u52a01 to n\uff0c\u6784\u5efa3\u4e2aduplicate\u548c1\u4e2amissing,\u7136\u540e\u5728\u6570\u91cf\u4e0a\u505a\u6587\u7ae0")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> findErrorNums(vector<int>& nums) {\n    int sum=0,num1=0,num2=0;\n    int n=nums.size();\n    vector<int> result(2);\n    for(int i=0;i<n;++i){\n        sum^=nums[i];\n        sum^=(i+1);\n    }\n    int low=sum&(-sum);\n    for(int i=0;i<n;++i){\n        if((nums[i]&low)==0)num1^=nums[i];\n        else num2^=nums[i];\n        if(((i+1)&low)==0)num1^=(i+1);\n        else num2^=(i+1);\n    }\n    for(int i=0;i<n;++i){\n        if(nums[i]==num1||nums[i]==num2){\n            result[0]=nums[i];\n            result[1]=nums[i]==num1?num2:num1;\n            break;\n        }\n    }\n    return result;\n}\n")),(0,s.kt)("h2",{id:"sort"},"Sort"),(0,s.kt)("h3",{id:"brute-force"},"Brute Force"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Selection sort\n//Finding the minimum element from the unsorted part,swapping it with the leftmost unsorted element\nfor(int i = 0; i< n-1; ++i){\n    int min = i;\n    for(int j = i+1; j<n; ++j)\n        if(nums[j]<nums[min])min = j;\n    swap(nums[i],nums[min]);\n}\n//Bubble sort\n//Just like the movement of air bubbles in the water that rise up to the surface, each element of the array move to the end in each iteration\nfor(int i = 0; i< n-1; ++i){\n    int flag = true;\n    for(int j =0; j< n-1-i; ++j)\n        if(nums[j+1]<nums[j]){\n            swap(nums[j],nums[j+1]);\n            flag = false;\n        }\n    if(flag == true)break;\n}\n")),(0,s.kt)("h3",{id:"decrease--conquer"},"Decrease & Conquer"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Insertion sort\n//Compare the new card to each sorted card and find its position until the array is sorted\nfor(int i = 0; i < n; ++i){\n    int v = nums[i];\n    j = i - 1;\n    while(j>= 0 && nums[j] > v){\n        nums[j + 1] = nums[j];\n        j--;\n    }\n    nums[j+1] = v;\n}\n")),(0,s.kt)("p",null,"Shell\u2019s Sort:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"compare items that are one stride length h apart. Do insertion sort."),(0,s.kt)("li",{parentName:"ul"},"Start with large stride, and decrease towards 1")),(0,s.kt)("h3",{id:"divide--conquer"},"Divide & Conquer"),(0,s.kt)(m.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"mergesort",mdxType:"TabItem"},(0,s.kt)("p",null,"\u6a21\u677f"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void merge_sort(vector<int> &nums, int l, int r, vector<int> &temp) {\n    if (r-l<=1) return; //Notice1\n    // divide\n    int mid = l + (r - l) / 2;\n    merge_sort(nums, l, mid, temp); // Notice2, [l,mid), \u5982\u679c\u662fmid + 1\u6709\u53ef\u80fd=r\n    merge_sort(nums, mid, r, temp);\n    // conquer\n    int p = l, q = mid, k = l;\n    while (p < mid && q < r)\n        temp[k++] = nums[p]< nums[q]? nums[p++]:nums[q++];\n    while(p < mid)temp[k++] = nums[p++];\n    while(q < r) temp[k++] = nums[q++];\n    for (k = l; k < r; ++k)\n        nums[k] = temp[k];\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// Leetcode 148 https://leetcode-cn.com/problems/sort-list/\nListNode* sortList(ListNode* head) {\n    if(!head||!head->next)return head;\n    //Find midium\n    ListNode *slow = head,*fast = head;\n    while(fast->next&&fast->next->next){\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    fast = slow->next;\n    slow->next = NULL;\n    slow = head;\n    //divide\n    slow=sortList(slow);fast=sortList(fast);\n    //conquer\n    ListNode * dummy = new ListNode(0);\n    ListNode * node = dummy;\n    while(slow&&fast){\n        if(slow->val < fast->val){\n            node->next = slow;\n            slow = slow->next;\n        }\n        else{\n            node->next = fast;\n            fast = fast->next;\n        }\n        node = node->next;\n    }\n    node->next = slow?slow:fast;\n    return dummy->next;\n}\n"))),(0,s.kt)(r.Z,{value:"quicksort",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void quick_sort(int l,int r){//\u5de6\u95ed\u53f3\u5f00\n    if(r-l<=1)return;\n    int first=l,last=r-1,key=nums[l];//\u4fdd\u7559pivot\n    while(first<last){//\u5148\u53f3\u518d\u5de6\uff0c\u56e0\u4e3anums[first]\u53ef\u4ee5\u88ab\u66ff\u6362\n        while(first<last&&nums[last]>=key)last--;\n        nums[first]=nums[last];\n        while(first<last&&nums[first]<=key)first++;\n        nums[last]=nums[first];\n    }\n    nums[first]=key;\n    quick_sort(l,first);\n    quick_sort(first+1,r);\n}\n")))),(0,s.kt)("h3",{id:"transform--conquer"},"Transform & Conquer"),(0,s.kt)("h4",{id:"heap-sort"},"Heap sort"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"sink: ",(0,s.kt)("strong",{parentName:"li"},"O(logn)")),(0,s.kt)("li",{parentName:"ul"},"pop_heap: v","[1]"," sink ",(0,s.kt)("strong",{parentName:"li"},"O(logn)")),(0,s.kt)("li",{parentName:"ul"},"push_heap: v","[n+1]"," up ",(0,s.kt)("strong",{parentName:"li"},"O(logn)")),(0,s.kt)("li",{parentName:"ul"},"make_heap: bottom-up sink ",(0,s.kt)("strong",{parentName:"li"},"O(n)"))),(0,s.kt)("p",null,"heap sort: make_heap + sort_heap(O(nlog(n)))"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//[f,l),[,Compare comp]\nvoid pop_heap(iterator first, iterator last);\nvoid push_heap(iterator first, iterator last);\nvoid make_heap(iterator first, iterator last);\nvoid sort_heap(iterator first, iterator last);\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u53d8\u5f0f:vector\u53ea\u5c06a","[i]","\u7528v","[i-1]","\u4ee3\u66ff\u5373\u53ef")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void sink(int val, vector<int>& a){\n    int n = a.size()-1;\n    while(2*val<=n){//\u6700\u7ec8\u662f2*val\n        int i=2*val;\n        if(i+1<=n&&a[i+1]>a[i])i++;//\u6613\u9519\u70b92\n        if(a[i]>a[val]){\n            swap(a[i],a[val]);\n            val=i;\n        }\n        else break;\n    }\n}\nvoid up(int val, vector<int>& a){//\u6700\u7ec8\u662fval/2\n    while(val>1&&a[val>>1]<a[val]){// all but a[1]\n        swap(a[val],a[val>>1]);\n        val>>=1;\n    }\n}\nint main(){\n    for(int i=n>>1;i>=1;--i)sink(i);//construct heap\n    // partition heap and sorted array\n    while(--n){\n        // get nums[1]\n        nums[1] = nums.back();\n        nums.pop_back();\n        sink(1, nums);\n    }\n}\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Leetcode215. Kth Largest Element in an Array")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/"},"\u9898\u76ee")),(0,s.kt)("p",null,"\u6cd51:\u5806\u6392\u5e8f"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        int n = nums.size();\n        // make heap\n        for(int i=n/2;i>0;--i)sink(i,nums);\n        // sort heap\n        while(--k){\n            nums[0] = nums.back();\n            nums.pop_back();\n            sink(1,nums);\n        }\n        return nums[0];\n    }\nprivate:\n    void sink(int val, vector<int>& nums){\n        int n = nums.size();\n        while(val*2<=n){\n            int i = val*2;\n            if(i+1<=n&&nums[i]>nums[i-1]) ++i;\n            if(nums[i-1]>nums[val-1]){\n                swap(nums[i-1],nums[val-1]);\n                val = i;\n            }\n            else break;\n        }\n    }\n};\n")),(0,s.kt)("p",null,"\u6cd52:\u5feb\u6392"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int x) {\n        k=x;\n        n=nums.size();\n        v=nums;\n        quick_selection(0,n);\n        return v[n-k];\n    }\nprivate:\n    int k,n;\n    vector<int> v;\n    void quick_selection(int l,int r){\n        if(r-l<=1)return;\n        int first=l,last=r-1,p=v[l];\n        while(first<last){\n            while(first<last&&v[last]>=p)last--;\n            v[first]=v[last];\n            while(first<last&&v[first]<=p)first++;\n            v[last]=v[first];\n        }\n        v[first]=p;\n        if(first==n-k)return;\n        else if(first<n-k)quick_selection(first+1,r);\n        else quick_selection(l,first);\n    }\n};\n")))}u.isMDXComponent=!0}}]);