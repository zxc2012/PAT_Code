"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[7128],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>d});var l=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,l,i=function(t,e){if(null==t)return{};var n,l,i={},r=Object.keys(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var p=l.createContext({}),o=function(t){var e=l.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=o(t.components);return l.createElement(p.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},c=l.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,p=t.parentName,s=u(t,["components","mdxType","originalType","parentName"]),c=o(n),d=i,m=c["".concat(p,".").concat(d)]||c[d]||k[d]||r;return n?l.createElement(m,a(a({ref:e},s),{},{components:n})):l.createElement(m,a({ref:e},s))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,a=new Array(r);a[0]=c;var u={};for(var p in e)hasOwnProperty.call(e,p)&&(u[p]=e[p]);u.originalType=t,u.mdxType="string"==typeof t?t:i,a[1]=u;for(var o=2;o<r;o++)a[o]=n[o];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},949:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>k,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var l=n(7462),i=(n(7294),n(3905));const r={},a="Trie summary",u={unversionedId:"Algorithms/trie",id:"Algorithms/trie",title:"Trie summary",description:"\u5355\u6a21\u5339\u914d--KMP",source:"@site/docs/Algorithms/trie.md",sourceDirName:"Algorithms",slug:"/Algorithms/trie",permalink:"/docs/Algorithms/trie",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/Algorithms/trie.md",tags:[],version:"current",frontMatter:{},sidebar:"Algorithms",previous:{title:"\u5251\u6307offer",permalink:"/docs/Algorithms/point"}},p={},o=[{value:"\u5355\u6a21\u5339\u914d--KMP",id:"\u5355\u6a21\u5339\u914d--kmp",level:2},{value:"\u5efanext\u6570\u7ec4--&gt;\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f000...k",id:"\u5efanext\u6570\u7ec4--\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f000k",level:3},{value:"\u79fb\u4f4d\u5339\u914d",id:"\u79fb\u4f4d\u5339\u914d",level:3},{value:"\u4ee3\u7801\u6a21\u677f",id:"\u4ee3\u7801\u6a21\u677f",level:3},{value:"\u591a\u6a21\u5339\u914d--AC\u81ea\u52a8\u673a",id:"\u591a\u6a21\u5339\u914d--ac\u81ea\u52a8\u673a",level:2},{value:"\u5efafail\u6570\u7ec4",id:"\u5efafail\u6570\u7ec4",level:3},{value:"fail[eu]=efail[u];",id:"faileuefailu",level:4},{value:"eu=efail[u];",id:"euefailu",level:4},{value:"\u63d2\u5165trie",id:"\u63d2\u5165trie",level:3},{value:"query",id:"query",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"Regular Expression",id:"regular-expression",level:2},{value:"Solution:",id:"solution",level:3},{value:"Code",id:"code",level:3},{value:"Regular Expressions",id:"regular-expressions",level:2}],s={toc:o};function k(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,l.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"trie-summary"},"Trie summary"),(0,i.kt)("h2",{id:"\u5355\u6a21\u5339\u914d--kmp"},"\u5355\u6a21\u5339\u914d--KMP"),(0,i.kt)("p",null,"\u5b9a\u4e49\u4e24\u4e2a\u5b57\u7b26\u4e32text\u548cpattern,pattern\u4e0d\u65ad\u4f4d\u79fb\u7684\u8fc7\u7a0b\u4e2d,\u9700\u8981\u8ba9\u5176\u4e2d\u95f4\u65ad\u6389\u7684\u65f6\u5019\u526a\u679d"),(0,i.kt)("p",null,"Eg:",(0,i.kt)("em",{parentName:"p"},"ABAABAB")),(0,i.kt)("h3",{id:"\u5efanext\u6570\u7ec4--\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f000k"},"\u5efanext\u6570\u7ec4--\x3e\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f00","[0...k][i-k...i]"),(0,i.kt)("p",null,"i:0->pattern.length()-1,j=-1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"case1:p","[j+1]","=p","[i]","--\x3ej++;"),(0,i.kt)("li",{parentName:"ul"},"case2:\u4e0a\u4e00\u4e2a\u5143\u7d20\u5185\u62c6\u524d\u540e\u7f00\nwhile(j!=-1&&p","[i]","!=p","[j+1]",")j=next","[j]",";\np","[j+1]","=p","[i]","--\x3ej++;")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"\u72b6\u6001\u8f6c\u79fb:next[i]=j;")),(0,i.kt)("h3",{id:"\u79fb\u4f4d\u5339\u914d"},"\u79fb\u4f4d\u5339\u914d"),(0,i.kt)("p",null,"i:0->text.length()-1,j=-1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"case1:p","[j+1]","=t","[i]","--\x3ej++;"),(0,i.kt)("li",{parentName:"ul"},"case2:\u4e0a\u4e00\u4e2a\u5143\u7d20\u5185\u62c6\u524d\u540e\u7f00\nwhile(j!=-1&&t","[i]","!=p","[j+1]",")j=next","[j]",";\np","[j+1]","=t","[i]","--\x3ej++;")),(0,i.kt)("p",null,"\u5224\u65ad\uff1aj==m-1--\x3ereturn true"),(0,i.kt)("h3",{id:"\u4ee3\u7801\u6a21\u677f"},"\u4ee3\u7801\u6a21\u677f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'scanf("%s%s",s1,s2);int a=strlen(s1);//text\nint b=strlen(s2);//pattern\nnxt[0]=-1;\nfor(i=1;i<b;++i){\n    while(j!=-1&&s2[j+1]!=s2[i])j=nxt[j];\n    if(s2[j+1]==s2[i])++j;\n    nxt[i]=j;\n}j=-1;\nfor(i=0;i<a;++i){\n    while(j!=-1&&s2[j+1]!=s1[i])j=nxt[j];\n    if(s2[j+1]==s1[i])++j;\n    if(j==b-1)printf("%d\\n",i-b+2);\n}\n')),(0,i.kt)("h2",{id:"\u591a\u6a21\u5339\u914d--ac\u81ea\u52a8\u673a"},"\u591a\u6a21\u5339\u914d--AC\u81ea\u52a8\u673a"),(0,i.kt)("p",null,"\u5b9a\u4e49text\u548cpattern,pattern1\u5728\u67d0\u4f4dfail\u65f6\u53ef\u4ee5\u4ece\u8be5\u4f4dfail\u60f3\u529e\u6cd5\u526a\u679d"),(0,i.kt)("h3",{id:"\u5efafail\u6570\u7ec4"},"\u5efafail\u6570\u7ec4"),(0,i.kt)("p",null,"\u6839\u636efail\u6765\u6e90\u5efa\u8868\u987a\u5e8f\u53ef\u4ee5\u662fBFS,\u6307\u5411\u4e3a\u4e86\u8fdb\u884c\u4e0b\u4e00\u4e2a\u6a21\u677f,fail\u4e3a\u4e86\u8bb0\u5f55\u8df3\u8f6c\u7684\u8d77\u70b9"),(0,i.kt)("p",null,"\u6bcf\u53d6\u4e00\u4e2au,i:26capital"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"case1:e","[u][i]","!=0",(0,i.kt)("inlineCode",{parentName:"li"},"\u56de\u52300\u6216\u8005\u4e0a\u4e00\u4e2afail\u4e0b\u9762p"))),(0,i.kt)("h4",{id:"faileuefailu"},"fail[e","[u][i]","]=e","[fail[u]][i]",";"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"case2:e","[u][i]","=0\u6307\u5411\u4e0a\u4e00\u4e2afail\u4e0b\u9762p")),(0,i.kt)("h4",{id:"euefailu"},"e","[u][i]","=e","[fail[u]][i]",";"),(0,i.kt)("h3",{id:"\u63d2\u5165trie"},"\u63d2\u5165trie"),(0,i.kt)("p",null,"i:pattern,j=0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"case1:e","[j][i]","=0->e","[j][i]","=++cnt(\u603b\u5e8f\u53f7);"),(0,i.kt)("li",{parentName:"ul"},"case2:e","[j][i]","!=0")),(0,i.kt)("p",null,"\u5224\u65ad:val","[pattern.length()-1]","=1;"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"\u72b6\u6001\u8f6c\u79fb:j=e[j][i]")),(0,i.kt)("h3",{id:"query"},"query"),(0,i.kt)("p",null,"\u662f\u5426\u5141\u8bb8\u4e32\u91cd\u590d\u51fa\u73b0--\x3e\u662f\u5426\u8bbe\u7f6eval[]=-1"),(0,i.kt)("p",null,"i:text"),(0,i.kt)("p",null,"\u53bb\u91cd\u5904\u7406t=j,while(t)fail","[t]","=-1,t=fail","[t]",";"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"case1:val","[j]","!=-1->sum+=val","[j]",";"),(0,i.kt)("li",{parentName:"ul"},"case2:val","[j]","=-1")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"\u72b6\u6001\u8f6c\u79fb:j=e[j][i]")),(0,i.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"struct AC{\n    int fail[500010],val[500010],e[500010][26],cnt=0;\n    void ins(char* p){\n        int len=strlen(p);int j=0;\n        for(int i=0;i<len;++i){\n            int x=p[i]-'a';\n            if(e[j][x]==0)e[j][x]=++cnt;\n            j=e[j][x];\n        }\n        val[j]++;\n    }\n    void build(){\n        for(int i=0;i<26;++i)if(e[0][i])fail[e[0][i]]=0,q.push(e[0][i]);\n        while(!q.empty()){\n            int u=q.front();q.pop();\n            for(int i=0;i<26;++i)\n                if(e[u][i])fail[e[u][i]]=e[fail[u]][i],q.push(e[u][i]);\n                else e[u][i]=e[fail[u]][i];\n        }\n    }\n    int query(char* p){\n        int len=strlen(p),j=0,sum=0;\n        for(int i=0;i<len;++i){\n            int x=p[i]-'a';j=e[j][x];int t=j;\n            while(t&&val[t]!=-1)sum+=val[t],val[t]=-1,t=fail[t];\n        }\n        return sum;\n    }\n}at;\n")),(0,i.kt)("h2",{id:"regular-expression"},"Regular Expression"),(0,i.kt)("p",null,"Given an input string s\xa0and a pattern p, implement regular expression matching with support for '.' and '*' where:"),(0,i.kt)("p",null,"'.' Matches any single character.\u200b\u200b\u200b\u200b"),(0,i.kt)("p",null,"'*' Matches zero or more of the preceding element."),(0,i.kt)("h3",{id:"solution"},"Solution:"),(0,i.kt)("p",null,"The matching should cover the entire input string (not partial)."),(0,i.kt)("p",null,"Iterate Two strings, match one by one"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"case 0: \u4e00\u822c\u60c5\u51b5judge(str","[i-1]",",pattern","[j-1]",")"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"dp","[i][j]","=dp","[i-1][j-1]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"case 1: pattern","[j-1]","=='*':"),(0,i.kt)("p",{parentName:"li"},"\u4e24\u79cd\u5c0f\u60c5\u51b5:"),(0,i.kt)("p",{parentName:"li"},"(1)not use preceding char "),(0,i.kt)("p",{parentName:"li"},"(2)preceding char use multiple times"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"dp","[i][j]","=dp","[i][j-2]","||judge(str","[i-1]",",pattern","[j-2]","&&dp","[i-1][j]",")")))),(0,i.kt)("h3",{id:"code"},"Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool match(string s, string p) {\n        int n=p.size();\n        int m=s.size();\n        vector<vector<int>> dp(m+1,vector<int>(n+1,0));\n        dp[0][0]=1;\n        for(int i=2;i<=n;++i){\n            if(p[i-1]=='*')dp[0][i]=dp[0][i-2];\n        }\n        for(int i=1;i<=m;++i)for(int j=1;j<=n;++j){\n            if(judge(s[i-1],p[j-1]))\n                dp[i][j]=dp[i-1][j-1];\n            else if(p[j-1]=='*')\n                dp[i][j]=dp[i][j-2]||judge(s[i-1],p[j-2])&&dp[i-1][j];\n        }\n        return dp[m][n];\n    }\nprivate:\n    bool judge(char a,char b){return a==b||b=='.';}\n};\n")),(0,i.kt)("h2",{id:"regular-expressions"},"Regular Expressions"),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,"Category"),(0,i.kt)("th",null,"Pattern"),(0,i.kt)("th",null,"Matches")),(0,i.kt)("tr",null,(0,i.kt)("td",{rowspan:"6"},"Disjuncitons"),(0,i.kt)("td",null,"/[A-Z|a-z]/"),(0,i.kt)("td",null,"An upper/lower case letter")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/[0-9]/"),(0,i.kt)("td",null,"A single digit")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/[^A-Z]/"),(0,i.kt)("td",null,"Negations")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/\\d/"),(0,i.kt)("td",null,"any digit")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/\\D/"),(0,i.kt)("td",null,"any non-digit")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/./"),(0,i.kt)("td",null,"Any character except for newline")),(0,i.kt)("tr",null,(0,i.kt)("td",{rowspan:"2"},"Anchors"),(0,i.kt)("td",null,"/^/"),(0,i.kt)("td",null,"Start of Input")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/$/"),(0,i.kt)("td",null,"End of Input")),(0,i.kt)("tr",null,(0,i.kt)("td",{rowspan:"5"},"Frequencies"),(0,i.kt)("td",null,"/?/"),(0,i.kt)("td",null,"Optional(one or none)")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/*/"),(0,i.kt)("td",null,"zero or more")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/+/"),(0,i.kt)("td",null,"one or more")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/{m}/"),(0,i.kt)("td",null,"m repetitions")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"/{m,n}/"),(0,i.kt)("td",null,"m to n repetitions")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"Others"),(0,i.kt)("td",null,"/()/"),(0,i.kt)("td",null,"capture group"))))}k.isMDXComponent=!0}}]);