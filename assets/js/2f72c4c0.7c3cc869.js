"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[8390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),f=i,m=d["".concat(a,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,c(c({ref:t},l),{},{components:n})):r.createElement(m,c({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:i,c[1]=s;for(var u=2;u<o;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const o={},c="Leetcode 334 Increasing Triplet Subsequence",s={unversionedId:"OJ/Leetcode334",id:"OJ/Leetcode334",title:"Leetcode 334 Increasing Triplet Subsequence",description:"Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.",source:"@site/docs/OJ/Leetcode334.md",sourceDirName:"OJ",slug:"/OJ/Leetcode334",permalink:"/docs/OJ/Leetcode334",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/OJ/Leetcode334.md",tags:[],version:"current",frontMatter:{},sidebar:"OJ",previous:{title:"leetcode1348 Tweet Counts Per Frequency",permalink:"/docs/OJ/Leetcode1348"},next:{title:"Leetcode4",permalink:"/docs/OJ/Leetcode4"}},a={},u=[{value:"Analysis",id:"analysis",level:2},{value:"Solution",id:"solution",level:2}],l={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"leetcode-334-increasing-triplet-subsequence"},"Leetcode 334 Increasing Triplet Subsequence"),(0,i.kt)("p",null,"Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums","[i]"," < nums","[j]"," < nums","[k]",". If no such indices exists, return false."),(0,i.kt)("h2",{id:"analysis"},"Analysis"),(0,i.kt)("p",null,"\u5f88\u50cfLongest Increasing Subsequence\uff0c\u4f46\u9650\u5b9a\u4e863\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u628alower_bound \u6362\u6210\u5355\u72ec\u5143\u7d20->O(1)"),(0,i.kt)("p",null,"\u4ece\u65b9\u6cd5\u4e0a\u770b\uff0c\u90fd\u662f\u91c7\u7528\u8d2a\u5fc3\u7b56\u7565\uff0c\u8ba9\u524d\u9762\u7684\u5143\u7d20\u5c3d\u53ef\u80fd\u5c0f"),(0,i.kt)("h2",{id:"solution"},"Solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool increasingTriplet(vector<int>& nums) {\n    int n = nums.size();\n    int first = nums[0],second = INT_MAX;\n    for(int &p:nums){\n        if(p>second) return true;\n        else if(p>first) second = p;\n        else first = p;\n    }\n    return false;\n}\n")))}p.isMDXComponent=!0}}]);