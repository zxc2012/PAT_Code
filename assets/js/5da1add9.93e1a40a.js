"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[508],{6350:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var r=n(7462),o=(n(7294),n(3905));n(1839);const s={},i=void 0,d={unversionedId:"OJ/Leetcode4",id:"OJ/Leetcode4",title:"Leetcode4",description:"Leetcode 4 Median of Two Sorted Arrays",source:"@site/docs/OJ/Leetcode4.md",sourceDirName:"OJ",slug:"/OJ/Leetcode4",permalink:"/docs/OJ/Leetcode4",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/OJ/Leetcode4.md",tags:[],version:"current",frontMatter:{},sidebar:"OJ",previous:{title:"Leetcode 334 Increasing Triplet Subsequence",permalink:"/docs/OJ/Leetcode334"},next:{title:"Leetcode 93 Restore IP Addresses",permalink:"/docs/OJ/Leetcode93"}},m={},a=[{value:"Leetcode 4 Median of Two Sorted Arrays",id:"leetcode-4-median-of-two-sorted-arrays",level:2}],l={toc:a};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"leetcode-4-median-of-two-sorted-arrays"},"Leetcode 4 Median of Two Sorted Arrays"),(0,o.kt)("p",null,"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays."),(0,o.kt)("p",null,"The overall run time complexity should be O(log (m+n))."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/zxc2012/image/main/20210904113642.png",alt:"20210904113642"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n    int n=nums1.size(),m=nums2.size();\n    if(n>m)return findMedianSortedArrays(nums2,nums1);\n    int k=m+n;\n    int l=0,r=n;\n    while(l<r){\n        int mid=l+r>>1;\n        int m2=(k+1>>1)-mid;\n        if(nums1[mid]<nums2[m2-1])l=mid+1;\n        else r=mid;\n    }\n    int m2=(k+1>>1)-l;\n    int left=m2==0?nums1[l-1]:l==0?nums2[m2-1]:max(nums1[l-1],nums2[m2-1]);\n    if(k%2==0){\n        int right=m2==m?nums1[l]:l==n?nums2[m2]:min(nums1[l],nums2[m2]);\n        return (left+right)/2.0;\n    }\n    else return left;\n}\n")))}c.isMDXComponent=!0}}]);