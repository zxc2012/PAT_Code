"use strict";(self.webpackChunkChance=self.webpackChunkChance||[]).push([[2076],{8913:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));n(1839);const s={},d="PAT1123 Is It a Complete AVL Tree",a={unversionedId:"OJ/PAT1123",id:"OJ/PAT1123",title:"PAT1123 Is It a Complete AVL Tree",description:"1123 Is It a Complete AVL Tree (30\u5206)",source:"@site/docs/OJ/PAT1123.md",sourceDirName:"OJ",slug:"/OJ/PAT1123",permalink:"/docs/OJ/PAT1123",draft:!1,editUrl:"https://github.com/zxc2012/zxc2012.github.io/tree/master/docs/OJ/PAT1123.md",tags:[],version:"current",frontMatter:{},sidebar:"OJ",previous:{title:"Leetcode 93 Restore IP Addresses",permalink:"/docs/OJ/Leetcode93"},next:{title:"PAT1141 PAT Ranking of Institutions (25 \u5206)",permalink:"/docs/OJ/PAT1141"}},o={},l=[{value:"1123 Is It a Complete AVL Tree (30\u5206)",id:"1123-is-it-a-complete-avl-tree-30\u5206",level:3}],p={toc:l};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pat1123-is-it-a-complete-avl-tree"},"PAT1123 Is It a Complete AVL Tree"),(0,i.kt)("h3",{id:"1123-is-it-a-complete-avl-tree-30\u5206"},"1123 Is It a Complete AVL Tree (30\u5206)"),(0,i.kt)("p",null,"\u5b58\u4e00\u4e2a\u6a21\u677f\uff0c\u4ee5\u540e\u80cc\u8fd9\u4e2a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n    int data;\n    node* left;\n    node* right;\n};\nstruct sq{int i,data;};\nvector<sq> v;\nbool cmp(sq& a,sq& b){return a.i<b.i;}\nnode* l(node* tree){\n    node* temp=tree->right;\n    tree->right=temp->left;\n    temp->left=tree;\n    return temp;\n}\nnode* r(node* tree){\n    node* temp=tree->left;\n    tree->left=temp->right;\n    temp->right=tree;\n    return temp;\n}\nnode* lr(node* tree){\n    tree->left=l(tree->left);\n    return r(tree);\n}\nnode* rl(node* tree){\n    tree->right=r(tree->right);\n    return l(tree);\n}\nint height(node* tree){\n    if(tree==NULL)return 0;\n    int l=height(tree->left);\n    int r=height(tree->right);\n    return max(l,r)+1;\n}\nnode* insert(node* tree,int v){\n    if(tree==NULL){\n        tree=new node();\n        tree->data=v;\n    }\n    else if(v<tree->data){\n        tree->left=insert(tree->left,v);\n        if(height(tree->left)-height(tree->right)>=2){\n            if(v<tree->left->data)tree=r(tree);\n            else tree=lr(tree);\n        }\n    }\n    else{\n        tree->right=insert(tree->right,v);\n        if(height(tree->right)-height(tree->left)>=2){\n            if(v>tree->right->data)tree=l(tree);\n            else tree=rl(tree);\n        }\n    }\n    return tree;\n}\nvoid dfs(node* tree,int i){\n    if(tree==NULL)return ;\n    v.push_back({i,tree->data});\n    dfs(tree->left,2*i);\n    dfs(tree->right,2*i+1);\n}\nint main(){\n    int n,i,m,judge=1;\n    scanf("%d",&n);node* tree=NULL;\n    for(i=0;i<n;++i){\n        scanf("%d",&m);\n        tree=insert(tree,m);\n    }\n    dfs(tree,1);\n    sort(v.begin(),v.end(),cmp);\n    for(i=0;i<v.size();++i){\n        printf("%d",v[i].data);\n        judge=i!=0&&v[i].i!=v[i-1].i+1?0:judge;\n        if(i!=v.size()-1)printf(" ");\n    }\n    if(judge==1)printf("\\nYES");\n    else printf("\\nNO");\n    return 0;\n}\n')))}f.isMDXComponent=!0}}]);